// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: 0PjlvTKr4NOS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BrandLogo from "../../BrandLogo"; // plasmic-import: Ih8CO7qIPWwS/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicCardSelector.module.css"; // plasmic-import: 0PjlvTKr4NOS/css

export type PlasmicCardSelector__VariantMembers = {
  active: "active";
};

export type PlasmicCardSelector__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
};

type VariantPropType = keyof PlasmicCardSelector__VariantsArgs;
export const PlasmicCardSelector__VariantProps = new Array<VariantPropType>(
  "active"
);

export type PlasmicCardSelector__ArgsType = {
  name?: React.ReactNode;
  logo?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardSelector__ArgsType;
export const PlasmicCardSelector__ArgProps = new Array<ArgPropType>(
  "name",
  "logo"
);

export type PlasmicCardSelector__OverridesType = {
  root?: p.Flex<"div">;
  cardSelector?: p.Flex<"div">;
};

export interface DefaultCardSelectorProps {
  name?: React.ReactNode;
  logo?: React.ReactNode;
  active?: SingleBooleanChoiceArg<"active">;
  className?: string;
}

function PlasmicCardSelector__RenderFunc(props: {
  variants: PlasmicCardSelector__VariantsArgs;
  args: PlasmicCardSelector__ArgsType;
  overrides: PlasmicCardSelector__OverridesType;
  dataFetches?: PlasmicCardSelector__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__active]: hasVariant(variants, "active", "active")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"cardSelector"}
        data-plasmic-override={overrides.cardSelector}
        hasGap={true}
        className={classNames(projectcss.all, sty.cardSelector, {
          [sty.cardSelector__active]: hasVariant(variants, "active", "active")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <BrandLogo
              className={classNames("__wab_instance", sty.brandLogo__nfGU)}
              logos={"cavs" as const}
            />
          ),

          value: args.logo
        })}

        {p.renderPlasmicSlot({
          defaultContents: "Brand Name",
          value: args.name,
          className: classNames(sty.slotTargetName)
        })}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cardSelector"],
  cardSelector: ["cardSelector"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  cardSelector: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardSelector__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardSelector__VariantsArgs;
    args?: PlasmicCardSelector__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardSelector__Fetches;
  } & Omit<PlasmicCardSelector__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardSelector__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardSelector__ArgProps,
      internalVariantPropNames: PlasmicCardSelector__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardSelector__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardSelector";
  } else {
    func.displayName = `PlasmicCardSelector.${nodeName}`;
  }
  return func;
}

export const PlasmicCardSelector = Object.assign(
  // Top-level PlasmicCardSelector renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cardSelector: makeNodeComponent("cardSelector"),

    // Metadata about props expected for PlasmicCardSelector
    internalVariantProps: PlasmicCardSelector__VariantProps,
    internalArgProps: PlasmicCardSelector__ArgProps
  }
);

export default PlasmicCardSelector;
/* prettier-ignore-end */
