// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: 4i10JAkWDCTW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicPaddingWrapper.module.css"; // plasmic-import: 4i10JAkWDCTW/css

export type PlasmicPaddingWrapper__VariantMembers = {
  narrowBody: "narrowBody";
};

export type PlasmicPaddingWrapper__VariantsArgs = {
  narrowBody?: SingleBooleanChoiceArg<"narrowBody">;
};

type VariantPropType = keyof PlasmicPaddingWrapper__VariantsArgs;
export const PlasmicPaddingWrapper__VariantProps = new Array<VariantPropType>(
  "narrowBody"
);

export type PlasmicPaddingWrapper__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPaddingWrapper__ArgsType;
export const PlasmicPaddingWrapper__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicPaddingWrapper__OverridesType = {
  root2?: p.Flex<"div">;
  wrapper?: p.Flex<"div">;
};

export interface DefaultPaddingWrapperProps {
  children?: React.ReactNode;
  narrowBody?: SingleBooleanChoiceArg<"narrowBody">;
  className?: string;
}

function PlasmicPaddingWrapper__RenderFunc(props: {
  variants: PlasmicPaddingWrapper__VariantsArgs;
  args: PlasmicPaddingWrapper__ArgsType;
  overrides: PlasmicPaddingWrapper__OverridesType;
  dataFetches?: PlasmicPaddingWrapper__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root2"}
      data-plasmic-override={overrides.root2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root2, {
        [sty.root2__narrowBody]: hasVariant(
          variants,
          "narrowBody",
          "narrowBody"
        )
      })}
    >
      <div
        data-plasmic-name={"wrapper"}
        data-plasmic-override={overrides.wrapper}
        className={classNames(projectcss.all, sty.wrapper, {
          [sty.wrapper__narrowBody]: hasVariant(
            variants,
            "narrowBody",
            "narrowBody"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.children
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root2: ["root2", "wrapper"],
  wrapper: ["wrapper"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root2: "div";
  wrapper: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaddingWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaddingWrapper__VariantsArgs;
    args?: PlasmicPaddingWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPaddingWrapper__Fetches;
  } & Omit<PlasmicPaddingWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPaddingWrapper__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPaddingWrapper__ArgProps,
      internalVariantPropNames: PlasmicPaddingWrapper__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPaddingWrapper__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicPaddingWrapper";
  } else {
    func.displayName = `PlasmicPaddingWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicPaddingWrapper = Object.assign(
  // Top-level PlasmicPaddingWrapper renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),

    // Metadata about props expected for PlasmicPaddingWrapper
    internalVariantProps: PlasmicPaddingWrapper__VariantProps,
    internalArgProps: PlasmicPaddingWrapper__ArgProps
  }
);

export default PlasmicPaddingWrapper;
/* prettier-ignore-end */
