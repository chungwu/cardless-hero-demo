// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: asankEkracjf
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeroOverlay from "../../HeroOverlay"; // plasmic-import: gL5YkDbpKAXj/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicHeroImage.module.css"; // plasmic-import: asankEkracjf/css

export type PlasmicHeroImage__VariantMembers = {
  scene: "scene1" | "scene2" | "scene3" | "scene4" | "scene5";
};

export type PlasmicHeroImage__VariantsArgs = {
  scene?: SingleChoiceArg<"scene1" | "scene2" | "scene3" | "scene4" | "scene5">;
};

type VariantPropType = keyof PlasmicHeroImage__VariantsArgs;
export const PlasmicHeroImage__VariantProps = new Array<VariantPropType>(
  "scene"
);

export type PlasmicHeroImage__ArgsType = {};
type ArgPropType = keyof PlasmicHeroImage__ArgsType;
export const PlasmicHeroImage__ArgProps = new Array<ArgPropType>();

export type PlasmicHeroImage__OverridesType = {
  root?: p.Flex<"div">;
  backgrounds?: p.Flex<"div">;
  background1?: p.Flex<typeof p.PlasmicImg>;
  background2?: p.Flex<typeof p.PlasmicImg>;
  background3?: p.Flex<typeof p.PlasmicImg>;
  background4?: p.Flex<typeof p.PlasmicImg>;
  background5?: p.Flex<typeof p.PlasmicImg>;
  heroOverlay?: p.Flex<typeof HeroOverlay>;
};

export interface DefaultHeroImageProps {
  scene?: SingleChoiceArg<"scene1" | "scene2" | "scene3" | "scene4" | "scene5">;
  className?: string;
}

function PlasmicHeroImage__RenderFunc(props: {
  variants: PlasmicHeroImage__VariantsArgs;
  args: PlasmicHeroImage__ArgsType;
  overrides: PlasmicHeroImage__OverridesType;
  dataFetches?: PlasmicHeroImage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__scene_scene1]: hasVariant(variants, "scene", "scene1"),
        [sty.root__scene_scene2]: hasVariant(variants, "scene", "scene2"),
        [sty.root__scene_scene3]: hasVariant(variants, "scene", "scene3"),
        [sty.root__scene_scene4]: hasVariant(variants, "scene", "scene4"),
        [sty.root__scene_scene5]: hasVariant(variants, "scene", "scene5")
      })}
    >
      {true ? (
        <div
          data-plasmic-name={"backgrounds"}
          data-plasmic-override={overrides.backgrounds}
          className={classNames(projectcss.all, sty.backgrounds, {
            [sty.backgrounds__scene_scene5]: hasVariant(
              variants,
              "scene",
              "scene5"
            )
          })}
        >
          <p.PlasmicImg
            data-plasmic-name={"background1"}
            data-plasmic-override={overrides.background1}
            alt={""}
            className={classNames(sty.background1, {
              [sty.background1__scene_scene1]: hasVariant(
                variants,
                "scene",
                "scene1"
              ),
              [sty.background1__scene_scene2]: hasVariant(
                variants,
                "scene",
                "scene2"
              ),
              [sty.background1__scene_scene3]: hasVariant(
                variants,
                "scene",
                "scene3"
              ),
              [sty.background1__scene_scene4]: hasVariant(
                variants,
                "scene",
                "scene4"
              ),
              [sty.background1__scene_scene5]: hasVariant(
                variants,
                "scene",
                "scene5"
              )
            })}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"eager" as const}
            src={{
              src: "/plasmic/copy_of_cardless_com/images/_8H3A2823Compressedjpg.jpeg",
              fullWidth: 4096,
              fullHeight: 2730,
              aspectRatio: undefined
            }}
          />

          <p.PlasmicImg
            data-plasmic-name={"background2"}
            data-plasmic-override={overrides.background2}
            alt={""}
            className={classNames(sty.background2, {
              [sty.background2__scene_scene1]: hasVariant(
                variants,
                "scene",
                "scene1"
              ),
              [sty.background2__scene_scene2]: hasVariant(
                variants,
                "scene",
                "scene2"
              ),
              [sty.background2__scene_scene3]: hasVariant(
                variants,
                "scene",
                "scene3"
              )
            })}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"eager" as const}
            src={{
              src: "/plasmic/copy_of_cardless_com/images/_8H3A3142Compressedjpg.jpeg",
              fullWidth: 4096,
              fullHeight: 2730,
              aspectRatio: undefined
            }}
          />

          <p.PlasmicImg
            data-plasmic-name={"background3"}
            data-plasmic-override={overrides.background3}
            alt={""}
            className={classNames(sty.background3, {
              [sty.background3__scene_scene2]: hasVariant(
                variants,
                "scene",
                "scene2"
              ),
              [sty.background3__scene_scene3]: hasVariant(
                variants,
                "scene",
                "scene3"
              ),
              [sty.background3__scene_scene4]: hasVariant(
                variants,
                "scene",
                "scene4"
              )
            })}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"eager" as const}
            src={{
              src: "/plasmic/copy_of_cardless_com/images/_8H3A3730Compressedjpg.jpeg",
              fullWidth: 4096,
              fullHeight: 2730,
              aspectRatio: undefined
            }}
          />

          <p.PlasmicImg
            data-plasmic-name={"background4"}
            data-plasmic-override={overrides.background4}
            alt={""}
            className={classNames(sty.background4, {
              [sty.background4__scene_scene1]: hasVariant(
                variants,
                "scene",
                "scene1"
              ),
              [sty.background4__scene_scene2]: hasVariant(
                variants,
                "scene",
                "scene2"
              ),
              [sty.background4__scene_scene3]: hasVariant(
                variants,
                "scene",
                "scene3"
              ),
              [sty.background4__scene_scene4]: hasVariant(
                variants,
                "scene",
                "scene4"
              ),
              [sty.background4__scene_scene5]: hasVariant(
                variants,
                "scene",
                "scene5"
              )
            })}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"eager" as const}
            src={{
              src: "/plasmic/copy_of_cardless_com/images/_8H3A3903Compressedjpg.jpeg",
              fullWidth: 4096,
              fullHeight: 2730,
              aspectRatio: undefined
            }}
          />

          <p.PlasmicImg
            data-plasmic-name={"background5"}
            data-plasmic-override={overrides.background5}
            alt={""}
            className={classNames(sty.background5, {
              [sty.background5__scene_scene1]: hasVariant(
                variants,
                "scene",
                "scene1"
              ),
              [sty.background5__scene_scene2]: hasVariant(
                variants,
                "scene",
                "scene2"
              ),
              [sty.background5__scene_scene3]: hasVariant(
                variants,
                "scene",
                "scene3"
              ),
              [sty.background5__scene_scene4]: hasVariant(
                variants,
                "scene",
                "scene4"
              ),
              [sty.background5__scene_scene5]: hasVariant(
                variants,
                "scene",
                "scene5"
              )
            })}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"eager" as const}
            src={{
              src: "/plasmic/copy_of_cardless_com/images/_8H3A4119Compressedjpg.jpeg",
              fullWidth: 4096,
              fullHeight: 2730,
              aspectRatio: undefined
            }}
          />
        </div>
      ) : null}

      <HeroOverlay
        data-plasmic-name={"heroOverlay"}
        data-plasmic-override={overrides.heroOverlay}
        className={classNames("__wab_instance", sty.heroOverlay, {
          [sty.heroOverlay__scene_scene1]: hasVariant(
            variants,
            "scene",
            "scene1"
          ),
          [sty.heroOverlay__scene_scene2]: hasVariant(
            variants,
            "scene",
            "scene2"
          ),
          [sty.heroOverlay__scene_scene3]: hasVariant(
            variants,
            "scene",
            "scene3"
          ),
          [sty.heroOverlay__scene_scene4]: hasVariant(
            variants,
            "scene",
            "scene4"
          ),
          [sty.heroOverlay__scene_scene5]: hasVariant(
            variants,
            "scene",
            "scene5"
          )
        })}
        scene={
          hasVariant(variants, "scene", "scene5")
            ? ("scene5" as const)
            : hasVariant(variants, "scene", "scene4")
            ? ("scene4" as const)
            : hasVariant(variants, "scene", "scene3")
            ? ("scene3" as const)
            : hasVariant(variants, "scene", "scene2")
            ? ("scene2" as const)
            : hasVariant(variants, "scene", "scene1")
            ? ("scene1" as const)
            : hasVariant(globalVariants, "screen", "tabletSmall")
            ? ("scene4" as const)
            : hasVariant(globalVariants, "screen", "laptop")
            ? ("scene1" as const)
            : ("scene3" as const)
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "backgrounds",
    "background1",
    "background2",
    "background3",
    "background4",
    "background5",
    "heroOverlay"
  ],
  backgrounds: [
    "backgrounds",
    "background1",
    "background2",
    "background3",
    "background4",
    "background5"
  ],
  background1: ["background1"],
  background2: ["background2"],
  background3: ["background3"],
  background4: ["background4"],
  background5: ["background5"],
  heroOverlay: ["heroOverlay"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  backgrounds: "div";
  background1: typeof p.PlasmicImg;
  background2: typeof p.PlasmicImg;
  background3: typeof p.PlasmicImg;
  background4: typeof p.PlasmicImg;
  background5: typeof p.PlasmicImg;
  heroOverlay: typeof HeroOverlay;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroImage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroImage__VariantsArgs;
    args?: PlasmicHeroImage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeroImage__Fetches;
  } & Omit<PlasmicHeroImage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroImage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroImage__ArgProps,
      internalVariantPropNames: PlasmicHeroImage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeroImage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroImage";
  } else {
    func.displayName = `PlasmicHeroImage.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroImage = Object.assign(
  // Top-level PlasmicHeroImage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    backgrounds: makeNodeComponent("backgrounds"),
    background1: makeNodeComponent("background1"),
    background2: makeNodeComponent("background2"),
    background3: makeNodeComponent("background3"),
    background4: makeNodeComponent("background4"),
    background5: makeNodeComponent("background5"),
    heroOverlay: makeNodeComponent("heroOverlay"),

    // Metadata about props expected for PlasmicHeroImage
    internalVariantProps: PlasmicHeroImage__VariantProps,
    internalArgProps: PlasmicHeroImage__ArgProps
  }
);

export default PlasmicHeroImage;
/* prettier-ignore-end */
