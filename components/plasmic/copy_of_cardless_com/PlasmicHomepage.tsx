// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: qxnD-9-C2Ck
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavBar } from "../../layout/NavBar"; // plasmic-import: VpJrKbBamu0m/codeComponent
import NavButton from "../../NavButton"; // plasmic-import: s0OJmmocqt8k/component
import HeroImage from "../../HeroImage"; // plasmic-import: asankEkracjf/component
import PaddingWrapper from "../../PaddingWrapper"; // plasmic-import: 4i10JAkWDCTW/component
import TestimonialsScroller from "../../TestimonialsScroller"; // plasmic-import: FHr7s50SrNP8/component
import CardSelector from "../../CardSelector"; // plasmic-import: 0PjlvTKr4NOS/component
import BrandLogo from "../../BrandLogo"; // plasmic-import: Ih8CO7qIPWwS/component
import CardList2 from "../../CardList2"; // plasmic-import: uuQnBH6TBKAT/component
import HomePageRightCardForYouContent from "../../HomePageRightCardForYouContent"; // plasmic-import: dzOYVotBa55E/component
import ImageLeftScroll from "../../ImageLeftScroll"; // plasmic-import: pXF26myJL81n/component
import FauxUiTextwrapper from "../../FauxUiTextwrapper"; // plasmic-import: 2N7y0bNNIt8J/component
import FauxUi from "../../FauxUi"; // plasmic-import: Tj1OgYPQx9N9/component
import Testimonial from "../../Testimonial"; // plasmic-import: EOORFxZkoS_u/component
import LinkButton from "../../LinkButton"; // plasmic-import: exoHRHBB2Jd8/component
import Footer from "../../Footer"; // plasmic-import: 4TDmEKfWsWRr/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: qxnD-9-C2Ck/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navBarCodeComponent?: p.Flex<typeof NavBar>;
  exploreCards2?: p.Flex<"div">;
  copyDownloadButtons3?: p.Flex<"div">;
  copy6?: p.Flex<"div">;
  heroImage?: p.Flex<typeof HeroImage>;
  preloadImagesOffscreen?: p.Flex<"div">;
  preload1?: p.Flex<typeof HeroImage>;
  preload2?: p.Flex<typeof HeroImage>;
  preload3?: p.Flex<typeof HeroImage>;
  preload4?: p.Flex<typeof HeroImage>;
  preload5?: p.Flex<typeof HeroImage>;
  heroImage2?: p.Flex<typeof HeroImage>;
  cards?: p.Flex<"div">;
  heading?: p.Flex<"div">;
  exploreCardsBaseOnly?: p.Flex<"div">;
  copyDownloadButtons4?: p.Flex<"div">;
  copy7?: p.Flex<"div">;
  heading2?: p.Flex<"div">;
  cards2?: p.Flex<"div">;
  heading3?: p.Flex<"div">;
  wipNewSelector?: p.Flex<typeof TestimonialsScroller>;
  manUtd?: p.Flex<typeof CardSelector>;
  cavs?: p.Flex<typeof CardSelector>;
  celtics?: p.Flex<typeof CardSelector>;
  marlins?: p.Flex<typeof CardSelector>;
  cardOptions?: p.Flex<typeof CardList2>;
  cardOfferDisplay?: p.Flex<typeof HomePageRightCardForYouContent>;
  preloadImagesOffscreen2?: p.Flex<"div">;
  cardOfferDisplay2?: p.Flex<typeof HomePageRightCardForYouContent>;
  cardOfferDisplay3?: p.Flex<typeof HomePageRightCardForYouContent>;
  cardOfferDisplay4?: p.Flex<typeof HomePageRightCardForYouContent>;
  cardOfferDisplay5?: p.Flex<typeof HomePageRightCardForYouContent>;
  instantGratification?: p.Flex<"div">;
  heading5?: p.Flex<"div">;
  copyDownloadButtons12?: p.Flex<"div">;
  copy15?: p.Flex<"div">;
  heading12?: p.Flex<"div">;
  copyDownloadButtons11?: p.Flex<"div">;
  copy14?: p.Flex<"div">;
  heading11?: p.Flex<"div">;
  copyDownloadButtons9?: p.Flex<"div">;
  copy12?: p.Flex<"div">;
  heading9?: p.Flex<"div">;
  stickyScrollArea?: p.Flex<typeof ImageLeftScroll>;
  list?: p.Flex<"div">;
  featuresAreaMobileOnly?: p.Flex<typeof PaddingWrapper>;
  currentItem?: p.Flex<typeof FauxUi>;
  currentItem2?: p.Flex<typeof FauxUi>;
  currentItem3?: p.Flex<typeof FauxUi>;
  currentItem4?: p.Flex<typeof FauxUi>;
  currentItem5?: p.Flex<typeof FauxUi>;
  testimonialArea?: p.Flex<typeof PaddingWrapper>;
  heading6?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  label6?: p.Flex<"div">;
  label7?: p.Flex<"div">;
  label8?: p.Flex<"div">;
  label9?: p.Flex<"div">;
  testimonialsScroller?: p.Flex<typeof TestimonialsScroller>;
  label10?: p.Flex<"div">;
  label11?: p.Flex<"div">;
  label12?: p.Flex<"div">;
  label13?: p.Flex<"div">;
  dearBrands?: p.Flex<"div">;
  copyDownloadButtons6?: p.Flex<"div">;
  copy9?: p.Flex<"div">;
  heading4?: p.Flex<"div">;
  mobileImageUnderDearBrands?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {
  dataFetches: PlasmicHomepage__Fetches;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {"Cardless | Co-branded Credit Card Provider"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={"Cardless | Co-branded Credit Card Provider"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBarCodeComponent"}
            data-plasmic-override={overrides.navBarCodeComponent}
            className={classNames("__wab_instance", sty.navBarCodeComponent)}
            noCta={true}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wSTjr)}
          >
            {(
              hasVariant(globalVariants, "screen", "tabletSmall")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(globalVariants, "screen", "laptopSmall")
                ? true
                : hasVariant(globalVariants, "screen", "laptop")
                ? true
                : true
            ) ? (
              <div
                data-plasmic-name={"exploreCards2"}
                data-plasmic-override={overrides.exploreCards2}
                className={classNames(projectcss.all, sty.exploreCards2)}
              >
                {(
                  hasVariant(globalVariants, "screen", "tabletSmall")
                    ? true
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(globalVariants, "screen", "laptop")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jng3C)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "tabletSmall")
                        ? true
                        : hasVariant(globalVariants, "screen", "laptopSmall")
                        ? true
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ejgVa
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"copyDownloadButtons3"}
                          data-plasmic-override={overrides.copyDownloadButtons3}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.copyDownloadButtons3
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"copy6"}
                            data-plasmic-override={overrides.copy6}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.copy6)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ec2Vo
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? "Get rewarded by your favorite brands"
                                : "Get rewarded by your favorite brands"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__db5Lc
                              )}
                            >
                              {
                                "Our seamless, digital-first approach makes it easy to earn the rewards that matter to you most"
                              }
                            </div>
                          </p.Stack>

                          {true ? (
                            <NavButton
                              className={classNames(
                                "__wab_instance",
                                sty.navButton__c5900
                              )}
                              destination={"#rightCardOffer" as const}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uqfdK
                                )}
                              >
                                {"Explore cards"}
                              </div>
                            </NavButton>
                          ) : null}
                        </p.Stack>
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xHj57)}
                    >
                      {true ? (
                        <HeroImage
                          data-plasmic-name={"heroImage"}
                          data-plasmic-override={overrides.heroImage}
                          className={classNames(
                            "__wab_instance",
                            sty.heroImage
                          )}
                          scene={"scene1" as const}
                        />
                      ) : null}

                      <div
                        data-plasmic-name={"preloadImagesOffscreen"}
                        data-plasmic-override={overrides.preloadImagesOffscreen}
                        className={classNames(
                          projectcss.all,
                          sty.preloadImagesOffscreen
                        )}
                      >
                        {true ? (
                          <HeroImage
                            data-plasmic-name={"preload1"}
                            data-plasmic-override={overrides.preload1}
                            className={classNames(
                              "__wab_instance",
                              sty.preload1
                            )}
                            scene={"scene1" as const}
                          />
                        ) : null}
                        {true ? (
                          <HeroImage
                            data-plasmic-name={"preload2"}
                            data-plasmic-override={overrides.preload2}
                            className={classNames(
                              "__wab_instance",
                              sty.preload2
                            )}
                            scene={"scene2" as const}
                          />
                        ) : null}
                        {true ? (
                          <HeroImage
                            data-plasmic-name={"preload3"}
                            data-plasmic-override={overrides.preload3}
                            className={classNames(
                              "__wab_instance",
                              sty.preload3
                            )}
                            scene={"scene3" as const}
                          />
                        ) : null}
                        {true ? (
                          <HeroImage
                            data-plasmic-name={"preload4"}
                            data-plasmic-override={overrides.preload4}
                            className={classNames(
                              "__wab_instance",
                              sty.preload4
                            )}
                            scene={"scene4" as const}
                          />
                        ) : null}
                        {true ? (
                          <HeroImage
                            data-plasmic-name={"preload5"}
                            data-plasmic-override={overrides.preload5}
                            className={classNames(
                              "__wab_instance",
                              sty.preload5
                            )}
                            scene={"scene5" as const}
                          />
                        ) : null}
                      </div>

                      {true ? (
                        <HeroImage
                          data-plasmic-name={"heroImage2"}
                          data-plasmic-override={overrides.heroImage2}
                          className={classNames(
                            "__wab_instance",
                            sty.heroImage2
                          )}
                          scene={"scene1" as const}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iYs7R
              )}
            >
              {"Image for illustrative purposes"}
            </div>
          </p.Stack>

          {true ? (
            <div
              data-plasmic-name={"cards"}
              data-plasmic-override={overrides.cards}
              className={classNames(projectcss.all, sty.cards)}
            >
              <PaddingWrapper
                className={classNames(
                  "__wab_instance",
                  sty.paddingWrapper__sKtes
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"heading"}
                  data-plasmic-override={overrides.heading}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.heading)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mC9W
                    )}
                  >
                    {"The right card for you"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dtPoO
                    )}
                  >
                    {
                      "Get ready to be rewarded with amazing experiences, exclusive offers, merchandise and more"
                    }
                  </div>
                </p.Stack>
              </PaddingWrapper>

              {(
                hasVariant(globalVariants, "screen", "tabletSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"exploreCardsBaseOnly"}
                  data-plasmic-override={overrides.exploreCardsBaseOnly}
                  className={classNames(
                    projectcss.all,
                    sty.exploreCardsBaseOnly
                  )}
                >
                  {(
                    hasVariant(globalVariants, "screen", "tabletSmall")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___5NCs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rSZf
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__fAwO1)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "laptopSmall")
                              ? ("auto" as const)
                              : ("100%" as const)
                          }
                          displayMaxHeight={
                            hasVariant(globalVariants, "screen", "laptopSmall")
                              ? ("364px" as const)
                              : ("none" as const)
                          }
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "laptopSmall")
                              ? ("526px" as const)
                              : ("684px" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "laptopSmall")
                              ? ("auto" as const)
                              : ("100%" as const)
                          }
                          loading={
                            hasVariant(globalVariants, "screen", "laptopSmall")
                              ? ("lazy" as const)
                              : ("lazy" as const)
                          }
                          src={
                            hasVariant(globalVariants, "screen", "laptopSmall")
                              ? {
                                  src: "/plasmic/copy_of_cardless_com/images/image17.png",
                                  fullWidth: 1647,
                                  fullHeight: 1143,
                                  aspectRatio: undefined
                                }
                              : {
                                  src: "/plasmic/copy_of_cardless_com/images/manutdTranspNamepng.png",
                                  fullWidth: 2400,
                                  fullHeight: 2400,
                                  aspectRatio: undefined
                                }
                          }
                        />
                      </div>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copyDownloadButtons4"}
                        data-plasmic-override={overrides.copyDownloadButtons4}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.copyDownloadButtons4
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"copy7"}
                          data-plasmic-override={overrides.copy7}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.copy7)}
                        >
                          <div
                            data-plasmic-name={"heading2"}
                            data-plasmic-override={overrides.heading2}
                            className={classNames(projectcss.all, sty.heading2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__es4Nj
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "tabletSmall"
                              )
                                ? "Don't have a card yet?"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "Don't have a card yet?"
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "laptopSmall"
                                  )
                                ? "Don't have a card yet?"
                                : "Limited Time Offer"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pn4J
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "tabletSmall"
                              )
                                ? "Don't have a card yet?"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "Don't have a card yet?"
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "laptopSmall"
                                  )
                                ? "Don't have a card yet?"
                                : "Earn Double Points"}
                            </div>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kw4Ei
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "tabletSmall")
                              ? "Find one that's right for you."
                              : hasVariant(globalVariants, "screen", "tablet")
                              ? "Find one that's right for you."
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "laptopSmall"
                                )
                              ? "Find one that's right for you."
                              : hasVariant(globalVariants, "screen", "laptop")
                              ? "Find one that's right for you."
                              : "On Qualifying Purchases in your first year, up to 100,000 bonus points"}
                          </div>
                        </p.Stack>

                        <NavButton
                          className={classNames(
                            "__wab_instance",
                            sty.navButton__xpJz
                          )}
                          type={"secondary" as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__f5XHg
                            )}
                          >
                            {"Apply now"}
                          </div>
                        </NavButton>
                      </p.Stack>
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"cards2"}
              data-plasmic-override={overrides.cards2}
              hasGap={true}
              className={classNames(projectcss.all, sty.cards2)}
              id={"rightCardOffer" as const}
            >
              <PaddingWrapper
                className={classNames(
                  "__wab_instance",
                  sty.paddingWrapper__d6JiV
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"heading3"}
                  data-plasmic-override={overrides.heading3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.heading3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bQ0D
                    )}
                  >
                    {"The right card for you"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t5J3Y
                    )}
                  >
                    {
                      "Get ready to be rewarded with amazing experiences, exclusive offers, merchandise and more"
                    }
                  </div>
                </p.Stack>
              </PaddingWrapper>

              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : true
              ) ? (
                <TestimonialsScroller
                  data-plasmic-name={"wipNewSelector"}
                  data-plasmic-override={overrides.wipNewSelector}
                  className={classNames("__wab_instance", sty.wipNewSelector)}
                >
                  <CardSelector
                    data-plasmic-name={"manUtd"}
                    data-plasmic-override={overrides.manUtd}
                    className={classNames("__wab_instance", sty.manUtd)}
                    logo={
                      <BrandLogo
                        className={classNames(
                          "__wab_instance",
                          sty.brandLogo__vi8Sr
                        )}
                        logos={"manUtd" as const}
                      />
                    }
                    name={"Manchester United"}
                  />

                  <CardSelector
                    data-plasmic-name={"cavs"}
                    data-plasmic-override={overrides.cavs}
                    className={classNames("__wab_instance", sty.cavs)}
                    logo={
                      <BrandLogo
                        className={classNames(
                          "__wab_instance",
                          sty.brandLogo__draOw
                        )}
                        logos={
                          hasVariant(globalVariants, "screen", "tablet")
                            ? ("cavs" as const)
                            : ("cavs" as const)
                        }
                      />
                    }
                    name={"Cleveland Cavaliers"}
                  />

                  <CardSelector
                    data-plasmic-name={"celtics"}
                    data-plasmic-override={overrides.celtics}
                    className={classNames("__wab_instance", sty.celtics)}
                    logo={
                      <BrandLogo
                        className={classNames(
                          "__wab_instance",
                          sty.brandLogo__egoa
                        )}
                        logos={"celtics" as const}
                      />
                    }
                    name={"Boston Celtics"}
                  />

                  <CardSelector
                    data-plasmic-name={"marlins"}
                    data-plasmic-override={overrides.marlins}
                    className={classNames("__wab_instance", sty.marlins)}
                    logo={
                      <BrandLogo
                        className={classNames(
                          "__wab_instance",
                          sty.brandLogo__qraDl
                        )}
                        logos={"marlins" as const}
                      />
                    }
                    name={"Miami Marlins"}
                  />
                </TestimonialsScroller>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__kaYAy)}>
                <CardList2
                  data-plasmic-name={"cardOptions"}
                  data-plasmic-override={overrides.cardOptions}
                  className={classNames("__wab_instance", sty.cardOptions)}
                  fade={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? ("fade" as const)
                      : hasVariant(globalVariants, "screen", "laptopSmall")
                      ? ("fade" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("fade" as const)
                      : ("fade" as const)
                  }
                />
              </div>

              <HomePageRightCardForYouContent
                data-plasmic-name={"cardOfferDisplay"}
                data-plasmic-override={overrides.cardOfferDisplay}
                className={classNames("__wab_instance", sty.cardOfferDisplay)}
                slide={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? ("manUtd" as const)
                    : ("manUtd" as const)
                }
              />

              <div
                data-plasmic-name={"preloadImagesOffscreen2"}
                data-plasmic-override={overrides.preloadImagesOffscreen2}
                className={classNames(
                  projectcss.all,
                  sty.preloadImagesOffscreen2
                )}
              >
                <HomePageRightCardForYouContent
                  data-plasmic-name={"cardOfferDisplay2"}
                  data-plasmic-override={overrides.cardOfferDisplay2}
                  className={classNames(
                    "__wab_instance",
                    sty.cardOfferDisplay2
                  )}
                  slide={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? ("manUtd" as const)
                      : ("manUtd" as const)
                  }
                />

                <HomePageRightCardForYouContent
                  data-plasmic-name={"cardOfferDisplay3"}
                  data-plasmic-override={overrides.cardOfferDisplay3}
                  className={classNames(
                    "__wab_instance",
                    sty.cardOfferDisplay3
                  )}
                  slide={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? ("manUtd" as const)
                      : ("cavs" as const)
                  }
                />

                <HomePageRightCardForYouContent
                  data-plasmic-name={"cardOfferDisplay4"}
                  data-plasmic-override={overrides.cardOfferDisplay4}
                  className={classNames(
                    "__wab_instance",
                    sty.cardOfferDisplay4
                  )}
                  slide={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? ("manUtd" as const)
                      : ("celtics" as const)
                  }
                />

                <HomePageRightCardForYouContent
                  data-plasmic-name={"cardOfferDisplay5"}
                  data-plasmic-override={overrides.cardOfferDisplay5}
                  className={classNames(
                    "__wab_instance",
                    sty.cardOfferDisplay5
                  )}
                  slide={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? ("manUtd" as const)
                      : ("marlins" as const)
                  }
                />
              </div>
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"instantGratification"}
              data-plasmic-override={overrides.instantGratification}
              hasGap={true}
              className={classNames(projectcss.all, sty.instantGratification)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"heading5"}
                data-plasmic-override={overrides.heading5}
                hasGap={true}
                className={classNames(projectcss.all, sty.heading5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pr5Rd
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "Instant gratification"
                    : "Instant gratification"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oP5X9
                  )}
                >
                  {
                    "Use the Cardless app to track your earnings as you go, with valuable redemptions just a tap away"
                  }
                </div>
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "tabletSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3RP5)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "laptop") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copyDownloadButtons12"}
                      data-plasmic-override={overrides.copyDownloadButtons12}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.copyDownloadButtons12
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy15"}
                        data-plasmic-override={overrides.copy15}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy15)}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"heading12"}
                          data-plasmic-override={overrides.heading12}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.heading12)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__guvX
                            )}
                          >
                            {"Maximize earnings"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lShKu
                            )}
                          >
                            {
                              "You’ll earn extra rewards for spending with the brands you love"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__a2IQv)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__fm93J)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "tablet")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("320px" as const)
                          : ("100%" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletSmall")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "tablet")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("450px" as const)
                          : ("100%" as const)
                      }
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/_8H3A2870Compressedjpg.jpeg",
                        fullWidth: 4096,
                        fullHeight: 2730,
                        aspectRatio: undefined
                      }}
                    />
                  </p.Stack>
                </p.Stack>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "tabletSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__a25Xd)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copyDownloadButtons11"}
                    data-plasmic-override={overrides.copyDownloadButtons11}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.copyDownloadButtons11
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy14"}
                      data-plasmic-override={overrides.copy14}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy14)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"heading11"}
                        data-plasmic-override={overrides.heading11}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.heading11)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mozFc
                          )}
                        >
                          {"Reward yourself"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pphPl
                          )}
                        >
                          {
                            "Redeem points for cash, gift cards or unique items from your favorite brands"
                          }
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hb3HF)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__mpoD)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "tablet")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("320px" as const)
                          : ("100%" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletSmall")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "tablet")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("450px" as const)
                          : ("100%" as const)
                      }
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/_8H3A3380Compressedjpg.jpeg",
                        fullWidth: 4096,
                        fullHeight: 2730,
                        aspectRatio: undefined
                      }}
                    />
                  </p.Stack>
                </p.Stack>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "tabletSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__x3R)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copyDownloadButtons9"}
                    data-plasmic-override={overrides.copyDownloadButtons9}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.copyDownloadButtons9
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy12"}
                      data-plasmic-override={overrides.copy12}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy12)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"heading9"}
                        data-plasmic-override={overrides.heading9}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.heading9)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tq43J
                          )}
                        >
                          {"Embrace your inner superfan"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1PNu3
                          )}
                        >
                          {
                            "Earn memorabilia, VIP experiences, event tickets and much more"
                          }
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ny7Vn)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__eAh3H)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "tablet")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("320px" as const)
                          : ("100%" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "tabletSmall")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "tablet")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("450px" as const)
                          : ("100%" as const)
                      }
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/_8H3A4132Compressedjpg.jpeg",
                        fullWidth: 4096,
                        fullHeight: 2730,
                        aspectRatio: undefined
                      }}
                    />
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
            <ImageLeftScroll
              data-plasmic-name={"stickyScrollArea"}
              data-plasmic-override={overrides.stickyScrollArea}
              className={classNames("__wab_instance", sty.stickyScrollArea)}
              textItems={
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"list"}
                  data-plasmic-override={overrides.list}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.list)}
                >
                  <FauxUiTextwrapper
                    caption={"caption" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.fauxUiTextwrapper__yPqcp
                    )}
                    slot={
                      "We issue virtual cards immediately, letting you tap to pay and shop online right away"
                    }
                    slot2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__emtbm
                        )}
                      >
                        {
                          "And we’ll automatically send you a physical card for free"
                        }
                      </div>
                    }
                  >
                    {"No need to wait"}
                  </FauxUiTextwrapper>

                  <FauxUiTextwrapper
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v7Yxw
                        )}
                      >
                        {
                          "Redeem points for gift cards, cash, or something special"
                        }
                      </div>
                    }
                  >
                    {"Get rewarded"}
                  </FauxUiTextwrapper>

                  <FauxUiTextwrapper
                    className={classNames(
                      "__wab_instance",
                      sty.fauxUiTextwrapper__kX2If
                    )}
                    slot={
                      "There’s no need to call support to lock your card or request a new number"
                    }
                  >
                    {"Security on your schedule"}
                  </FauxUiTextwrapper>

                  <FauxUiTextwrapper
                    className={classNames(
                      "__wab_instance",
                      sty.fauxUiTextwrapper__gaoRf
                    )}
                    slot={
                      "Get notified of transactions with our simple, customized alerts"
                    }
                  >
                    {"Don’t miss a thing"}
                  </FauxUiTextwrapper>

                  <FauxUiTextwrapper
                    className={classNames(
                      "__wab_instance",
                      sty.fauxUiTextwrapper__nyYMu
                    )}
                    slot={
                      "With instant access to a digital card, it’s easier than ever to tap and pay"
                    }
                  >
                    {"Apple Pay support"}
                  </FauxUiTextwrapper>
                </p.Stack>
              }
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
            <PaddingWrapper
              data-plasmic-name={"featuresAreaMobileOnly"}
              data-plasmic-override={overrides.featuresAreaMobileOnly}
              className={classNames(
                "__wab_instance",
                sty.featuresAreaMobileOnly
              )}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oua7S)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mXrSw)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "tablet")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__k5NNj
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "laptopSmall")
                              ? true
                              : true
                          ) ? (
                            <FauxUi
                              data-plasmic-name={"currentItem"}
                              data-plasmic-override={overrides.currentItem}
                              className={classNames("__wab_instance")}
                              scene={
                                hasVariant(globalVariants, "screen", "tablet")
                                  ? ("scene1" as const)
                                  : undefined
                              }
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "tabletSmall")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__n0Ku2
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "Image for illustrative purposes"
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "tabletSmall"
                              )
                            ? "Image for illustrative purposes"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "Image for illustrative purposes"
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "laptopSmall"
                              )
                            ? "Image for illustrative purposes"
                            : hasVariant(globalVariants, "screen", "laptop")
                            ? "Image for illustrative purposes"
                            : "Image for illustrative purposes"}
                        </div>
                      ) : null}

                      <FauxUiTextwrapper
                        caption={"caption" as const}
                        className={classNames(
                          "__wab_instance",
                          sty.fauxUiTextwrapper__mmWDk
                        )}
                        slot={
                          "We issue virtual cards immediately, letting you tap to pay and shop online right away"
                        }
                        slot2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__osEwl
                            )}
                          >
                            {
                              "And we’ll automatically send you a physical card for free"
                            }
                          </div>
                        }
                      >
                        {"No need to wait"}
                      </FauxUiTextwrapper>
                    </p.Stack>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__t4ZP2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kbSaJ)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? true
                          : true
                      ) ? (
                        <FauxUi
                          data-plasmic-name={"currentItem2"}
                          data-plasmic-override={overrides.currentItem2}
                          className={classNames("__wab_instance")}
                          scene={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("scene2" as const)
                              : undefined
                          }
                        />
                      ) : null}
                    </div>

                    <FauxUiTextwrapper
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w3SY
                          )}
                        >
                          {
                            "Redeem points for gift cards, cash, or something special"
                          }
                        </div>
                      }
                    >
                      {"Get rewarded"}
                    </FauxUiTextwrapper>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__n65Tm)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__f6D9)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? true
                          : true
                      ) ? (
                        <FauxUi
                          data-plasmic-name={"currentItem3"}
                          data-plasmic-override={overrides.currentItem3}
                          className={classNames("__wab_instance")}
                          scene={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("scene3" as const)
                              : undefined
                          }
                        />
                      ) : null}
                    </div>

                    <FauxUiTextwrapper
                      slot={
                        "There’s no need to call support to lock your card or request a new number"
                      }
                    >
                      {"Security on your schedule"}
                    </FauxUiTextwrapper>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pfRXw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox___1ZhM)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? true
                          : true
                      ) ? (
                        <FauxUi
                          data-plasmic-name={"currentItem4"}
                          data-plasmic-override={overrides.currentItem4}
                          className={classNames("__wab_instance")}
                          scene={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("scene4" as const)
                              : undefined
                          }
                        />
                      ) : null}
                    </div>

                    <FauxUiTextwrapper
                      slot={
                        "Get notified of transactions with our simple, customized alerts"
                      }
                    >
                      {"Don’t miss a thing"}
                    </FauxUiTextwrapper>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__r2JOa)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gkfJ)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? true
                          : true
                      ) ? (
                        <FauxUi
                          data-plasmic-name={"currentItem5"}
                          data-plasmic-override={overrides.currentItem5}
                          className={classNames("__wab_instance")}
                          scene={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("scene5" as const)
                              : undefined
                          }
                        />
                      ) : null}
                    </div>

                    <FauxUiTextwrapper
                      slot={
                        "With instant access to a digital card, it’s easier than ever to tap and pay"
                      }
                    >
                      {"Apple Pay support"}
                    </FauxUiTextwrapper>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </PaddingWrapper>
          ) : null}
          {true ? (
            <PaddingWrapper
              data-plasmic-name={"testimonialArea"}
              data-plasmic-override={overrides.testimonialArea}
              className={classNames("__wab_instance", sty.testimonialArea)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"heading6"}
                data-plasmic-override={overrides.heading6}
                hasGap={true}
                className={classNames(projectcss.all, sty.heading6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__turvQ
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "There's a lot to love"
                    : "There's a lot to love"}
                </div>

                {(
                  hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(globalVariants, "screen", "laptopSmall")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "laptopSmall")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__tp6CR
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uDi4N
                          )}
                        >
                          <Testimonial
                            avatar={
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__ylCm1)}
                                displayHeight={"40px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"40px" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_cardless_com/images/profilePicturepng.png",
                                  fullWidth: 160,
                                  fullHeight: 160,
                                  aspectRatio: undefined
                                }}
                              />
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.testimonial__mya2L
                            )}
                            content={
                              true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__pg4Yk
                                  )}
                                >
                                  {
                                    "“This is the last vertical in banking that hasn’t really been disrupted.”"
                                  }
                                </div>
                              ) : null
                            }
                            name={"Bloomberg"}
                            readMore={"readMore" as const}
                            username={
                              true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t5Ao
                                  )}
                                >
                                  {"@username"}
                                </div>
                              ) : null
                            }
                          >
                            <LinkButton
                              className={classNames(
                                "__wab_instance",
                                sty.linkButton___1GpzP
                              )}
                              color={["red"]}
                              destination={
                                "https://www.bloomberg.com/news/articles/2020-11-18/forget-free-flights-this-card-could-make-you-an-nba-benchwarmer" as const
                              }
                              icon2={"right" as const}
                              label={
                                <div
                                  data-plasmic-name={"label6"}
                                  data-plasmic-override={overrides.label6}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.label6
                                  )}
                                >
                                  {"Read more"}
                                </div>
                              }
                              noPadding={"noPadding" as const}
                              openNewTab={"_blank" as const}
                              type={[]}
                            >
                              <ArrowRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ijAgU
                                )}
                                role={"img"}
                              />
                            </LinkButton>
                          </Testimonial>

                          <Testimonial
                            avatar={
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__etTZg)}
                                displayHeight={"40px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"40px" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/copy_of_cardless_com/images/profilePicture1Png.png",
                                  fullWidth: 160,
                                  fullHeight: 160,
                                  aspectRatio: undefined
                                }}
                              />
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.testimonial__sEpPl
                            )}
                            content={
                              "“Manchester United has inked a deal with fintech startup Cardless to create a U.S. credit card that offers more than the typical range of rewards.”"
                            }
                            name={"Sportico"}
                            readMore={"readMore" as const}
                            username={
                              true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__j2XGb
                                  )}
                                >
                                  {"@username"}
                                </div>
                              ) : null
                            }
                          >
                            <LinkButton
                              className={classNames(
                                "__wab_instance",
                                sty.linkButton__gqo7U
                              )}
                              color={["red"]}
                              destination={
                                "https://www.sportico.com/business/finance/2021/manchester-united-credit-card-cardless-1234627406/" as const
                              }
                              icon2={"right" as const}
                              label={
                                <div
                                  data-plasmic-name={"label7"}
                                  data-plasmic-override={overrides.label7}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.label7
                                  )}
                                >
                                  {"Read more"}
                                </div>
                              }
                              noPadding={"noPadding" as const}
                              openNewTab={"_blank" as const}
                            >
                              <ArrowRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uGkVe
                                )}
                                role={"img"}
                              />
                            </LinkButton>
                          </Testimonial>
                        </p.Stack>
                      </div>
                    ) : null}

                    <div
                      className={classNames(projectcss.all, sty.column__xXz76)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rval8
                        )}
                      >
                        <Testimonial
                          avatar={
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__x84OJ)}
                              displayHeight={"40px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"40px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_cardless_com/images/profilePicture2Png.png",
                                fullWidth: 161,
                                fullHeight: 160,
                                aspectRatio: undefined
                              }}
                            />
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.testimonial__vh4Z8
                          )}
                          content={
                            "“Cardless is attempting to shake up a massive market. Consumer credit cards yielded an estimated $150 billion in revenue for traditional banks in 2019, but startups only captured a small fraction of the value.”"
                          }
                          name={"TechCrunch"}
                          readMore={"readMore" as const}
                          username={
                            true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__v4ZSz
                                )}
                              >
                                {"@username"}
                              </div>
                            ) : null
                          }
                        >
                          <LinkButton
                            className={classNames(
                              "__wab_instance",
                              sty.linkButton__bR2Wa
                            )}
                            color={["red"]}
                            destination={
                              "https://techcrunch.com/2021/07/14/cardless-raises-40m/" as const
                            }
                            icon2={"right" as const}
                            label={
                              <div
                                data-plasmic-name={"label8"}
                                data-plasmic-override={overrides.label8}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.label8
                                )}
                              >
                                {"Read more"}
                              </div>
                            }
                            noPadding={"noPadding" as const}
                            openNewTab={"_blank" as const}
                          >
                            <ArrowRightIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___5RYRt
                              )}
                              role={"img"}
                            />
                          </LinkButton>
                        </Testimonial>

                        <Testimonial
                          avatar={
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__t4TuS)}
                              displayHeight={"40px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"40px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_cardless_com/images/profilePicture3Png.png",
                                fullWidth: 161,
                                fullHeight: 160,
                                aspectRatio: undefined
                              }}
                            />
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.testimonial__qBaox
                          )}
                          content={
                            '“Marlins Chief Revenue Officer Adam Jones: "The real significance is continuing to find ways to extend and deepen our engagement with Marlins fans."'
                          }
                          name={"Sports Business Journal"}
                          readMore={"readMore" as const}
                          username={
                            true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tANr1
                                )}
                              >
                                {"@username"}
                              </div>
                            ) : null
                          }
                        >
                          <LinkButton
                            className={classNames(
                              "__wab_instance",
                              sty.linkButton__xv7XJ
                            )}
                            color={["red"]}
                            destination={
                              "https://www.sportsbusinessjournal.com/Daily/Morning-Buzz/2021/06/28/Marlins.aspx" as const
                            }
                            icon2={"right" as const}
                            label={
                              <div
                                data-plasmic-name={"label9"}
                                data-plasmic-override={overrides.label9}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.label9
                                )}
                              >
                                {"Read more"}
                              </div>
                            }
                            noPadding={"noPadding" as const}
                            openNewTab={"_blank" as const}
                          >
                            <ArrowRightIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wrUgs
                              )}
                              role={"img"}
                            />
                          </LinkButton>
                        </Testimonial>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__imnba)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qmhRp
                        )}
                      >
                        <Testimonial
                          avatar={
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__uXp)}
                              displayHeight={"40px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"40px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_cardless_com/images/profilePicture4Png.png",
                                fullWidth: 161,
                                fullHeight: 160,
                                aspectRatio: undefined
                              }}
                            />
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.testimonial__zjU8R
                          )}
                          content={
                            "Score from all over the court with \n@Cardless. The @Cavs have partnered to bring fans a new, innovative credit card that provides unique rewards like being up close and personal to live games or receiving autographs from yours truly!!! #CardlessPartner #ad https://bit.ly/3h94O5q"
                          }
                          image={
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img___0Vkx0)}
                              displayHeight={"100%" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"100%" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_cardless_com/images/kevinLovejpg.jpeg",
                                fullWidth: 614,
                                fullHeight: 384,
                                aspectRatio: undefined
                              }}
                            />
                          }
                          image2={"image2" as const}
                          name={"Kevin Love"}
                          username={"@kevinlove"}
                        />
                      </p.Stack>
                    </div>
                  </p.Stack>
                ) : null}
              </p.Stack>
            </PaddingWrapper>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "laptopSmall")
              ? true
              : hasVariant(globalVariants, "screen", "laptop")
              ? true
              : true
          ) ? (
            <TestimonialsScroller
              data-plasmic-name={"testimonialsScroller"}
              data-plasmic-override={overrides.testimonialsScroller}
              className={classNames("__wab_instance", sty.testimonialsScroller)}
            >
              <Testimonial
                avatar={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__uoS54)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"40px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_cardless_com/images/profilePicturepng.png",
                      fullWidth: 160,
                      fullHeight: 160,
                      aspectRatio: undefined
                    }}
                  />
                }
                className={classNames("__wab_instance", sty.testimonial__pmm1O)}
                content={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v9Wu
                    )}
                  >
                    {
                      "“This is the last vertical in banking that hasn’t really been disrupted.”"
                    }
                  </div>
                }
                name={"Bloomberg"}
                readMore={"readMore" as const}
                username={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eheId
                    )}
                  >
                    {"@username"}
                  </div>
                }
              >
                <LinkButton
                  className={classNames("__wab_instance", sty.linkButton__clt6)}
                  destination={
                    "https://www.bloomberg.com/news/articles/2020-11-18/forget-free-flights-this-card-could-make-you-an-nba-benchwarmer" as const
                  }
                  icon2={"right" as const}
                  label={
                    <div
                      data-plasmic-name={"label10"}
                      data-plasmic-override={overrides.label10}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label10
                      )}
                    >
                      {"Read more"}
                    </div>
                  }
                  noPadding={"noPadding" as const}
                >
                  <ArrowRightIcon
                    className={classNames(projectcss.all, sty.svg__cdOGg)}
                    role={"img"}
                  />
                </LinkButton>
              </Testimonial>

              <Testimonial
                avatar={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__wVjY2)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"40px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_cardless_com/images/profilePicture1Png.png",
                      fullWidth: 160,
                      fullHeight: 160,
                      aspectRatio: undefined
                    }}
                  />
                }
                className={classNames("__wab_instance", sty.testimonial__tUpT)}
                content={
                  "“Manchester United has inked a deal with fintech startup Cardless to create a U.S. credit card that offers more than the typical range of rewards.”"
                }
                name={"Sportico"}
                readMore={"readMore" as const}
                username={
                  true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__atJaw
                      )}
                    >
                      {"@username"}
                    </div>
                  ) : null
                }
              >
                <LinkButton
                  className={classNames(
                    "__wab_instance",
                    sty.linkButton__uoPHh
                  )}
                  destination={
                    "https://www.sportico.com/business/finance/2021/manchester-united-credit-card-cardless-1234627406/" as const
                  }
                  icon2={"right" as const}
                  label={
                    <div
                      data-plasmic-name={"label11"}
                      data-plasmic-override={overrides.label11}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label11
                      )}
                    >
                      {"Read more"}
                    </div>
                  }
                  noPadding={"noPadding" as const}
                >
                  <ArrowRightIcon
                    className={classNames(projectcss.all, sty.svg__kaJh0)}
                    role={"img"}
                  />
                </LinkButton>
              </Testimonial>

              <Testimonial
                avatar={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__cnnuo)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"40px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_cardless_com/images/profilePicture2Png.png",
                      fullWidth: 161,
                      fullHeight: 160,
                      aspectRatio: undefined
                    }}
                  />
                }
                className={classNames("__wab_instance", sty.testimonial__pebfh)}
                content={
                  "“Cardless is attempting to shake up a massive market. Consumer credit cards yielded an estimated $150 billion in revenue for traditional banks in 2019, but startups only captured a small fraction of the value.”"
                }
                name={"TechCrunch"}
                readMore={"readMore" as const}
                username={
                  true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__buG0S
                      )}
                    >
                      {"@username"}
                    </div>
                  ) : null
                }
              >
                <LinkButton
                  className={classNames(
                    "__wab_instance",
                    sty.linkButton__qrsXl
                  )}
                  destination={
                    "https://techcrunch.com/2021/07/14/cardless-raises-40m/" as const
                  }
                  icon2={"right" as const}
                  label={
                    <div
                      data-plasmic-name={"label12"}
                      data-plasmic-override={overrides.label12}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label12
                      )}
                    >
                      {"Read more"}
                    </div>
                  }
                  noPadding={"noPadding" as const}
                >
                  <ArrowRightIcon
                    className={classNames(projectcss.all, sty.svg__lvjLm)}
                    role={"img"}
                  />
                </LinkButton>
              </Testimonial>

              <Testimonial
                avatar={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ily4)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"40px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_cardless_com/images/profilePicture3Png.png",
                      fullWidth: 161,
                      fullHeight: 160,
                      aspectRatio: undefined
                    }}
                  />
                }
                className={classNames("__wab_instance", sty.testimonial___6Rri)}
                content={
                  '“Marlins Chief Revenue Officer Adam Jones: "The real significance is continuing to find ways to extend and deepen our engagement with Marlins fans."'
                }
                name={"Sports Business Journal"}
                readMore={"readMore" as const}
                username={
                  true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vdiEg
                      )}
                    >
                      {"@username"}
                    </div>
                  ) : null
                }
              >
                <LinkButton
                  className={classNames(
                    "__wab_instance",
                    sty.linkButton__pf12Y
                  )}
                  destination={
                    "https://www.sportsbusinessjournal.com/Daily/Morning-Buzz/2021/06/28/Marlins.aspx" as const
                  }
                  icon2={"right" as const}
                  label={
                    <div
                      data-plasmic-name={"label13"}
                      data-plasmic-override={overrides.label13}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label13
                      )}
                    >
                      {"Read more"}
                    </div>
                  }
                  noPadding={"noPadding" as const}
                >
                  <ArrowRightIcon
                    className={classNames(projectcss.all, sty.svg___6MkMh)}
                    role={"img"}
                  />
                </LinkButton>
              </Testimonial>
            </TestimonialsScroller>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "tabletSmall")
              ? true
              : hasVariant(globalVariants, "screen", "tablet")
              ? true
              : hasVariant(globalVariants, "screen", "laptopSmall")
              ? true
              : hasVariant(globalVariants, "screen", "laptop")
              ? true
              : true
          ) ? (
            <div
              data-plasmic-name={"dearBrands"}
              data-plasmic-override={overrides.dearBrands}
              className={classNames(projectcss.all, sty.dearBrands)}
            >
              {(
                hasVariant(globalVariants, "screen", "tabletSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hj0Ud)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copyDownloadButtons6"}
                    data-plasmic-override={overrides.copyDownloadButtons6}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.copyDownloadButtons6
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy9"}
                      data-plasmic-override={overrides.copy9}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy9)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"heading4"}
                        data-plasmic-override={overrides.heading4}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.heading4)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__caz0D
                          )}
                        >
                          {"Dear brands,"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aoqvv
                          )}
                        >
                          {"Are your superfans missing out?"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0QRx
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptop")
                          ? "Launch your own co-branded credit card quickly and easily with Cardless"
                          : "Launch your own co-branded credit card quickly and easily with Cardless"}
                      </div>
                    </p.Stack>

                    <NavButton
                      className={classNames(
                        "__wab_instance",
                        sty.navButton__skIgb
                      )}
                      destination={"/for-brands" as const}
                      type={"primary" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f6Mr
                        )}
                      >
                        {"Learn more"}
                      </div>
                    </NavButton>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "tabletSmall")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___32Nzs
                      )}
                    />
                  ) : null}
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "tabletSmall") ? true : false
          ) ? (
            <div
              data-plasmic-name={"mobileImageUnderDearBrands"}
              data-plasmic-override={overrides.mobileImageUnderDearBrands}
              className={classNames(
                projectcss.all,
                sty.mobileImageUnderDearBrands
              )}
            />
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBarCodeComponent",
    "exploreCards2",
    "copyDownloadButtons3",
    "copy6",
    "heroImage",
    "preloadImagesOffscreen",
    "preload1",
    "preload2",
    "preload3",
    "preload4",
    "preload5",
    "heroImage2",
    "cards",
    "heading",
    "exploreCardsBaseOnly",
    "copyDownloadButtons4",
    "copy7",
    "heading2",
    "cards2",
    "heading3",
    "wipNewSelector",
    "manUtd",
    "cavs",
    "celtics",
    "marlins",
    "cardOptions",
    "cardOfferDisplay",
    "preloadImagesOffscreen2",
    "cardOfferDisplay2",
    "cardOfferDisplay3",
    "cardOfferDisplay4",
    "cardOfferDisplay5",
    "instantGratification",
    "heading5",
    "copyDownloadButtons12",
    "copy15",
    "heading12",
    "copyDownloadButtons11",
    "copy14",
    "heading11",
    "copyDownloadButtons9",
    "copy12",
    "heading9",
    "stickyScrollArea",
    "list",
    "featuresAreaMobileOnly",
    "currentItem",
    "currentItem2",
    "currentItem3",
    "currentItem4",
    "currentItem5",
    "testimonialArea",
    "heading6",
    "columns",
    "label6",
    "label7",
    "label8",
    "label9",
    "testimonialsScroller",
    "label10",
    "label11",
    "label12",
    "label13",
    "dearBrands",
    "copyDownloadButtons6",
    "copy9",
    "heading4",
    "mobileImageUnderDearBrands",
    "footer"
  ],
  navBarCodeComponent: ["navBarCodeComponent"],
  exploreCards2: [
    "exploreCards2",
    "copyDownloadButtons3",
    "copy6",
    "heroImage",
    "preloadImagesOffscreen",
    "preload1",
    "preload2",
    "preload3",
    "preload4",
    "preload5",
    "heroImage2"
  ],
  copyDownloadButtons3: ["copyDownloadButtons3", "copy6"],
  copy6: ["copy6"],
  heroImage: ["heroImage"],
  preloadImagesOffscreen: [
    "preloadImagesOffscreen",
    "preload1",
    "preload2",
    "preload3",
    "preload4",
    "preload5"
  ],
  preload1: ["preload1"],
  preload2: ["preload2"],
  preload3: ["preload3"],
  preload4: ["preload4"],
  preload5: ["preload5"],
  heroImage2: ["heroImage2"],
  cards: [
    "cards",
    "heading",
    "exploreCardsBaseOnly",
    "copyDownloadButtons4",
    "copy7",
    "heading2"
  ],
  heading: ["heading"],
  exploreCardsBaseOnly: [
    "exploreCardsBaseOnly",
    "copyDownloadButtons4",
    "copy7",
    "heading2"
  ],
  copyDownloadButtons4: ["copyDownloadButtons4", "copy7", "heading2"],
  copy7: ["copy7", "heading2"],
  heading2: ["heading2"],
  cards2: [
    "cards2",
    "heading3",
    "wipNewSelector",
    "manUtd",
    "cavs",
    "celtics",
    "marlins",
    "cardOptions",
    "cardOfferDisplay",
    "preloadImagesOffscreen2",
    "cardOfferDisplay2",
    "cardOfferDisplay3",
    "cardOfferDisplay4",
    "cardOfferDisplay5"
  ],
  heading3: ["heading3"],
  wipNewSelector: ["wipNewSelector", "manUtd", "cavs", "celtics", "marlins"],
  manUtd: ["manUtd"],
  cavs: ["cavs"],
  celtics: ["celtics"],
  marlins: ["marlins"],
  cardOptions: ["cardOptions"],
  cardOfferDisplay: ["cardOfferDisplay"],
  preloadImagesOffscreen2: [
    "preloadImagesOffscreen2",
    "cardOfferDisplay2",
    "cardOfferDisplay3",
    "cardOfferDisplay4",
    "cardOfferDisplay5"
  ],
  cardOfferDisplay2: ["cardOfferDisplay2"],
  cardOfferDisplay3: ["cardOfferDisplay3"],
  cardOfferDisplay4: ["cardOfferDisplay4"],
  cardOfferDisplay5: ["cardOfferDisplay5"],
  instantGratification: [
    "instantGratification",
    "heading5",
    "copyDownloadButtons12",
    "copy15",
    "heading12",
    "copyDownloadButtons11",
    "copy14",
    "heading11",
    "copyDownloadButtons9",
    "copy12",
    "heading9"
  ],
  heading5: ["heading5"],
  copyDownloadButtons12: ["copyDownloadButtons12", "copy15", "heading12"],
  copy15: ["copy15", "heading12"],
  heading12: ["heading12"],
  copyDownloadButtons11: ["copyDownloadButtons11", "copy14", "heading11"],
  copy14: ["copy14", "heading11"],
  heading11: ["heading11"],
  copyDownloadButtons9: ["copyDownloadButtons9", "copy12", "heading9"],
  copy12: ["copy12", "heading9"],
  heading9: ["heading9"],
  stickyScrollArea: ["stickyScrollArea", "list"],
  list: ["list"],
  featuresAreaMobileOnly: [
    "featuresAreaMobileOnly",
    "currentItem",
    "currentItem2",
    "currentItem3",
    "currentItem4",
    "currentItem5"
  ],
  currentItem: ["currentItem"],
  currentItem2: ["currentItem2"],
  currentItem3: ["currentItem3"],
  currentItem4: ["currentItem4"],
  currentItem5: ["currentItem5"],
  testimonialArea: [
    "testimonialArea",
    "heading6",
    "columns",
    "label6",
    "label7",
    "label8",
    "label9"
  ],
  heading6: ["heading6", "columns", "label6", "label7", "label8", "label9"],
  columns: ["columns", "label6", "label7", "label8", "label9"],
  label6: ["label6"],
  label7: ["label7"],
  label8: ["label8"],
  label9: ["label9"],
  testimonialsScroller: [
    "testimonialsScroller",
    "label10",
    "label11",
    "label12",
    "label13"
  ],
  label10: ["label10"],
  label11: ["label11"],
  label12: ["label12"],
  label13: ["label13"],
  dearBrands: ["dearBrands", "copyDownloadButtons6", "copy9", "heading4"],
  copyDownloadButtons6: ["copyDownloadButtons6", "copy9", "heading4"],
  copy9: ["copy9", "heading4"],
  heading4: ["heading4"],
  mobileImageUnderDearBrands: ["mobileImageUnderDearBrands"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBarCodeComponent: typeof NavBar;
  exploreCards2: "div";
  copyDownloadButtons3: "div";
  copy6: "div";
  heroImage: typeof HeroImage;
  preloadImagesOffscreen: "div";
  preload1: typeof HeroImage;
  preload2: typeof HeroImage;
  preload3: typeof HeroImage;
  preload4: typeof HeroImage;
  preload5: typeof HeroImage;
  heroImage2: typeof HeroImage;
  cards: "div";
  heading: "div";
  exploreCardsBaseOnly: "div";
  copyDownloadButtons4: "div";
  copy7: "div";
  heading2: "div";
  cards2: "div";
  heading3: "div";
  wipNewSelector: typeof TestimonialsScroller;
  manUtd: typeof CardSelector;
  cavs: typeof CardSelector;
  celtics: typeof CardSelector;
  marlins: typeof CardSelector;
  cardOptions: typeof CardList2;
  cardOfferDisplay: typeof HomePageRightCardForYouContent;
  preloadImagesOffscreen2: "div";
  cardOfferDisplay2: typeof HomePageRightCardForYouContent;
  cardOfferDisplay3: typeof HomePageRightCardForYouContent;
  cardOfferDisplay4: typeof HomePageRightCardForYouContent;
  cardOfferDisplay5: typeof HomePageRightCardForYouContent;
  instantGratification: "div";
  heading5: "div";
  copyDownloadButtons12: "div";
  copy15: "div";
  heading12: "div";
  copyDownloadButtons11: "div";
  copy14: "div";
  heading11: "div";
  copyDownloadButtons9: "div";
  copy12: "div";
  heading9: "div";
  stickyScrollArea: typeof ImageLeftScroll;
  list: "div";
  featuresAreaMobileOnly: typeof PaddingWrapper;
  currentItem: typeof FauxUi;
  currentItem2: typeof FauxUi;
  currentItem3: typeof FauxUi;
  currentItem4: typeof FauxUi;
  currentItem5: typeof FauxUi;
  testimonialArea: typeof PaddingWrapper;
  heading6: "div";
  columns: "div";
  label6: "div";
  label7: "div";
  label8: "div";
  label9: "div";
  testimonialsScroller: typeof TestimonialsScroller;
  label10: "div";
  label11: "div";
  label12: "div";
  label13: "div";
  dearBrands: "div";
  copyDownloadButtons6: "div";
  copy9: "div";
  heading4: "div";
  mobileImageUnderDearBrands: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBarCodeComponent: makeNodeComponent("navBarCodeComponent"),
    exploreCards2: makeNodeComponent("exploreCards2"),
    copyDownloadButtons3: makeNodeComponent("copyDownloadButtons3"),
    copy6: makeNodeComponent("copy6"),
    heroImage: makeNodeComponent("heroImage"),
    preloadImagesOffscreen: makeNodeComponent("preloadImagesOffscreen"),
    preload1: makeNodeComponent("preload1"),
    preload2: makeNodeComponent("preload2"),
    preload3: makeNodeComponent("preload3"),
    preload4: makeNodeComponent("preload4"),
    preload5: makeNodeComponent("preload5"),
    heroImage2: makeNodeComponent("heroImage2"),
    cards: makeNodeComponent("cards"),
    heading: makeNodeComponent("heading"),
    exploreCardsBaseOnly: makeNodeComponent("exploreCardsBaseOnly"),
    copyDownloadButtons4: makeNodeComponent("copyDownloadButtons4"),
    copy7: makeNodeComponent("copy7"),
    heading2: makeNodeComponent("heading2"),
    cards2: makeNodeComponent("cards2"),
    heading3: makeNodeComponent("heading3"),
    wipNewSelector: makeNodeComponent("wipNewSelector"),
    manUtd: makeNodeComponent("manUtd"),
    cavs: makeNodeComponent("cavs"),
    celtics: makeNodeComponent("celtics"),
    marlins: makeNodeComponent("marlins"),
    cardOptions: makeNodeComponent("cardOptions"),
    cardOfferDisplay: makeNodeComponent("cardOfferDisplay"),
    preloadImagesOffscreen2: makeNodeComponent("preloadImagesOffscreen2"),
    cardOfferDisplay2: makeNodeComponent("cardOfferDisplay2"),
    cardOfferDisplay3: makeNodeComponent("cardOfferDisplay3"),
    cardOfferDisplay4: makeNodeComponent("cardOfferDisplay4"),
    cardOfferDisplay5: makeNodeComponent("cardOfferDisplay5"),
    instantGratification: makeNodeComponent("instantGratification"),
    heading5: makeNodeComponent("heading5"),
    copyDownloadButtons12: makeNodeComponent("copyDownloadButtons12"),
    copy15: makeNodeComponent("copy15"),
    heading12: makeNodeComponent("heading12"),
    copyDownloadButtons11: makeNodeComponent("copyDownloadButtons11"),
    copy14: makeNodeComponent("copy14"),
    heading11: makeNodeComponent("heading11"),
    copyDownloadButtons9: makeNodeComponent("copyDownloadButtons9"),
    copy12: makeNodeComponent("copy12"),
    heading9: makeNodeComponent("heading9"),
    stickyScrollArea: makeNodeComponent("stickyScrollArea"),
    list: makeNodeComponent("list"),
    featuresAreaMobileOnly: makeNodeComponent("featuresAreaMobileOnly"),
    currentItem: makeNodeComponent("currentItem"),
    currentItem2: makeNodeComponent("currentItem2"),
    currentItem3: makeNodeComponent("currentItem3"),
    currentItem4: makeNodeComponent("currentItem4"),
    currentItem5: makeNodeComponent("currentItem5"),
    testimonialArea: makeNodeComponent("testimonialArea"),
    heading6: makeNodeComponent("heading6"),
    columns: makeNodeComponent("columns"),
    label6: makeNodeComponent("label6"),
    label7: makeNodeComponent("label7"),
    label8: makeNodeComponent("label8"),
    label9: makeNodeComponent("label9"),
    testimonialsScroller: makeNodeComponent("testimonialsScroller"),
    label10: makeNodeComponent("label10"),
    label11: makeNodeComponent("label11"),
    label12: makeNodeComponent("label12"),
    label13: makeNodeComponent("label13"),
    dearBrands: makeNodeComponent("dearBrands"),
    copyDownloadButtons6: makeNodeComponent("copyDownloadButtons6"),
    copy9: makeNodeComponent("copy9"),
    heading4: makeNodeComponent("heading4"),
    mobileImageUnderDearBrands: makeNodeComponent("mobileImageUnderDearBrands"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
