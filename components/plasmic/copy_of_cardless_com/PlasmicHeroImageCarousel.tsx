// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: dhdHGgK5WGkB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ArrowButton from "../../ArrowButton"; // plasmic-import: LVNvmxA1SLWB/component
import HeroImageCarouseltem from "../../HeroImageCarouseltem"; // plasmic-import: MMV2NaMzNI6o/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicHeroImageCarousel.module.css"; // plasmic-import: dhdHGgK5WGkB/css

export type PlasmicHeroImageCarousel__VariantMembers = {};

export type PlasmicHeroImageCarousel__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeroImageCarousel__VariantsArgs;
export const PlasmicHeroImageCarousel__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHeroImageCarousel__ArgsType = {
  items?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeroImageCarousel__ArgsType;
export const PlasmicHeroImageCarousel__ArgProps = new Array<ArgPropType>(
  "items"
);

export type PlasmicHeroImageCarousel__OverridesType = {
  root?: p.Flex<"div">;
  emptySpace?: p.Flex<"div">;
  carouselNavigation2?: p.Flex<"div">;
  buttonWrapper?: p.Flex<"div">;
  leftButton?: p.Flex<typeof ArrowButton>;
  buttonWrapper2?: p.Flex<"div">;
  rightButton?: p.Flex<typeof ArrowButton>;
  itemsScroll?: p.Flex<"div">;
};

export interface DefaultHeroImageCarouselProps {
  items?: React.ReactNode;
  className?: string;
}

function PlasmicHeroImageCarousel__RenderFunc(props: {
  variants: PlasmicHeroImageCarousel__VariantsArgs;
  args: PlasmicHeroImageCarousel__ArgsType;
  overrides: PlasmicHeroImageCarousel__OverridesType;
  dataFetches?: PlasmicHeroImageCarousel__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"emptySpace"}
          data-plasmic-override={overrides.emptySpace}
          hasGap={true}
          className={classNames(projectcss.all, sty.emptySpace)}
        />
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"carouselNavigation2"}
        data-plasmic-override={overrides.carouselNavigation2}
        hasGap={true}
        className={classNames(projectcss.all, sty.carouselNavigation2)}
      >
        {(hasVariant(globalVariants, "screen", "tabletSmall") ? true : true) ? (
          <div
            data-plasmic-name={"buttonWrapper"}
            data-plasmic-override={overrides.buttonWrapper}
            className={classNames(projectcss.all, sty.buttonWrapper)}
          >
            <ArrowButton
              data-plasmic-name={"leftButton"}
              data-plasmic-override={overrides.leftButton}
              className={classNames("__wab_instance")}
              dark={
                hasVariant(globalVariants, "screen", "mobile")
                  ? ("dark" as const)
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? ("dark" as const)
                  : hasVariant(globalVariants, "screen", "laptopSmall")
                  ? ("dark" as const)
                  : ("dark" as const)
              }
            />
          </div>
        ) : null}
        {(hasVariant(globalVariants, "screen", "tabletSmall") ? true : true) ? (
          <div
            data-plasmic-name={"buttonWrapper2"}
            data-plasmic-override={overrides.buttonWrapper2}
            className={classNames(projectcss.all, sty.buttonWrapper2)}
          >
            <ArrowButton
              data-plasmic-name={"rightButton"}
              data-plasmic-override={overrides.rightButton}
              dark={
                hasVariant(globalVariants, "screen", "tabletSmall")
                  ? ("dark" as const)
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? ("dark" as const)
                  : ("dark" as const)
              }
              right={
                hasVariant(globalVariants, "screen", "tabletSmall")
                  ? ("right" as const)
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? ("right" as const)
                  : ("right" as const)
              }
            />
          </div>
        ) : null}
      </p.Stack>

      <div
        data-plasmic-name={"itemsScroll"}
        data-plasmic-override={overrides.itemsScroll}
        className={classNames(projectcss.all, sty.itemsScroll)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <HeroImageCarouseltem
                centerImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fqyda)}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.heroImageCarouseltem__uuH4W
                )}
                title={"Retail"}
              />

              <HeroImageCarouseltem
                body={
                  "Our cards keep consumers engaged, with a strong incentive to transact directly with your brand"
                }
                centerImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ejfqN)}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.heroImageCarouseltem__uiwxE
                )}
                leftImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nzPig)}
                  />
                }
                rightImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ofyeR)}
                  />
                }
                title={"Direct to consumer"}
              />

              <HeroImageCarouseltem
                body={
                  "Lucrative earning and redemption opportunities will have your diners coming back again and again"
                }
                centerImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___20M4G)}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.heroImageCarouseltem__keMbK
                )}
                leftImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__asLyu)}
                  />
                }
                rightImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__v9Zjt)}
                  />
                }
                title={"Dining"}
              />

              <HeroImageCarouseltem
                body={
                  "Keep your customers engaged even when they arenâ€™t traveling, with added perks for frequent flyers and regular guests"
                }
                centerImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__n2Wc3)}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.heroImageCarouseltem__f67Ee
                )}
                leftImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a0183)}
                  />
                }
                rightImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Hb1V)}
                  />
                }
                title={"Travel"}
              />

              <HeroImageCarouseltem
                body={
                  "Connect with your players on and off-screen with a card that rewards their purchases"
                }
                centerImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5IL4W)}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.heroImageCarouseltem__xh4Zk
                )}
                leftImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cmvaO)}
                  />
                }
                rightImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7M9Jg)}
                  />
                }
                title={"Travel"}
              />

              <HeroImageCarouseltem
                body={
                  "Connect with your players on and off-screen with a card that rewards their purchases"
                }
                centerImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uoXhi)}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.heroImageCarouseltem___75WV
                )}
                leftImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lOhX3)}
                  />
                }
                rightImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dh8Xb)}
                  />
                }
                title={"Gaming"}
              />

              <HeroImageCarouseltem
                body={
                  "Enable your members to bring fitness goals within reach through discounts and rewards"
                }
                centerImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__r4Mtb)}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.heroImageCarouseltem__wyERp
                )}
                leftImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__koWjL)}
                  />
                }
                rightImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fNHc)}
                  />
                }
                title={"Health & Fitness"}
              />

              <HeroImageCarouseltem
                body={
                  "Reward customers for their purchases, no matter how big or small"
                }
                centerImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fwLaI)}
                  />
                }
                className={classNames(
                  "__wab_instance",
                  sty.heroImageCarouseltem__uJJa
                )}
                leftImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tkl6C)}
                  />
                }
                rightImage={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mJXvW)}
                  />
                }
                title={"Social Marketplace"}
              />
            </React.Fragment>
          ),
          value: args.items
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "emptySpace",
    "carouselNavigation2",
    "buttonWrapper",
    "leftButton",
    "buttonWrapper2",
    "rightButton",
    "itemsScroll"
  ],
  emptySpace: ["emptySpace"],
  carouselNavigation2: [
    "carouselNavigation2",
    "buttonWrapper",
    "leftButton",
    "buttonWrapper2",
    "rightButton"
  ],
  buttonWrapper: ["buttonWrapper", "leftButton"],
  leftButton: ["leftButton"],
  buttonWrapper2: ["buttonWrapper2", "rightButton"],
  rightButton: ["rightButton"],
  itemsScroll: ["itemsScroll"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  emptySpace: "div";
  carouselNavigation2: "div";
  buttonWrapper: "div";
  leftButton: typeof ArrowButton;
  buttonWrapper2: "div";
  rightButton: typeof ArrowButton;
  itemsScroll: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroImageCarousel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroImageCarousel__VariantsArgs;
    args?: PlasmicHeroImageCarousel__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeroImageCarousel__Fetches;
  } & Omit<PlasmicHeroImageCarousel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroImageCarousel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroImageCarousel__ArgProps,
      internalVariantPropNames: PlasmicHeroImageCarousel__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeroImageCarousel__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroImageCarousel";
  } else {
    func.displayName = `PlasmicHeroImageCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroImageCarousel = Object.assign(
  // Top-level PlasmicHeroImageCarousel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    emptySpace: makeNodeComponent("emptySpace"),
    carouselNavigation2: makeNodeComponent("carouselNavigation2"),
    buttonWrapper: makeNodeComponent("buttonWrapper"),
    leftButton: makeNodeComponent("leftButton"),
    buttonWrapper2: makeNodeComponent("buttonWrapper2"),
    rightButton: makeNodeComponent("rightButton"),
    itemsScroll: makeNodeComponent("itemsScroll"),

    // Metadata about props expected for PlasmicHeroImageCarousel
    internalVariantProps: PlasmicHeroImageCarousel__VariantProps,
    internalArgProps: PlasmicHeroImageCarousel__ArgProps
  }
);

export default PlasmicHeroImageCarousel;
/* prettier-ignore-end */
