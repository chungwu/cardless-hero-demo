// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: u4knHUDTWZ35
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicBigCallOut.module.css"; // plasmic-import: u4knHUDTWZ35/css

export type PlasmicBigCallOut__VariantMembers = {
  brandColors: "cavs" | "marlins" | "manu" | "celtics";
  doublePoints: "doublePoints";
};

export type PlasmicBigCallOut__VariantsArgs = {
  brandColors?: MultiChoiceArg<"cavs" | "marlins" | "manu" | "celtics">;
  doublePoints?: SingleBooleanChoiceArg<"doublePoints">;
};

type VariantPropType = keyof PlasmicBigCallOut__VariantsArgs;
export const PlasmicBigCallOut__VariantProps = new Array<VariantPropType>(
  "brandColors",
  "doublePoints"
);

export type PlasmicBigCallOut__ArgsType = {
  title?: React.ReactNode;
  body?: React.ReactNode;
  title2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBigCallOut__ArgsType;
export const PlasmicBigCallOut__ArgProps = new Array<ArgPropType>(
  "title",
  "body",
  "title2"
);

export type PlasmicBigCallOut__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultBigCallOutProps {
  title?: React.ReactNode;
  body?: React.ReactNode;
  title2?: React.ReactNode;
  brandColors?: MultiChoiceArg<"cavs" | "marlins" | "manu" | "celtics">;
  doublePoints?: SingleBooleanChoiceArg<"doublePoints">;
  className?: string;
}

function PlasmicBigCallOut__RenderFunc(props: {
  variants: PlasmicBigCallOut__VariantsArgs;
  args: PlasmicBigCallOut__ArgsType;
  overrides: PlasmicBigCallOut__OverridesType;
  dataFetches?: PlasmicBigCallOut__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__brandColors_cavs]: hasVariant(
          variants,
          "brandColors",
          "cavs"
        ),
        [sty.root__brandColors_celtics]: hasVariant(
          variants,
          "brandColors",
          "celtics"
        ),
        [sty.root__brandColors_manu]: hasVariant(
          variants,
          "brandColors",
          "manu"
        ),
        [sty.root__brandColors_marlins]: hasVariant(
          variants,
          "brandColors",
          "marlins"
        )
      })}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zyFw)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qyaZw, {
            [sty.freeBox__brandColors_cavs__qyaZWrzAoi]: hasVariant(
              variants,
              "brandColors",
              "cavs"
            ),
            [sty.freeBox__brandColors_manu__qyaZWuVQhB]: hasVariant(
              variants,
              "brandColors",
              "manu"
            ),
            [sty.freeBox__doublePoints__qyaZWj2VJ]: hasVariant(
              variants,
              "doublePoints",
              "doublePoints"
            )
          })}
        >
          {(hasVariant(variants, "doublePoints", "doublePoints") ? true : false)
            ? p.renderPlasmicSlot({
                defaultContents: "10x",
                value: args.title2,
                className: classNames(sty.slotTargetTitle2, {
                  [sty.slotTargetTitle2__brandColors_cavs]: hasVariant(
                    variants,
                    "brandColors",
                    "cavs"
                  ),
                  [sty.slotTargetTitle2__brandColors_celtics]: hasVariant(
                    variants,
                    "brandColors",
                    "celtics"
                  ),
                  [sty.slotTargetTitle2__brandColors_manu]: hasVariant(
                    variants,
                    "brandColors",
                    "manu"
                  ),
                  [sty.slotTargetTitle2__brandColors_marlins]: hasVariant(
                    variants,
                    "brandColors",
                    "marlins"
                  ),
                  [sty.slotTargetTitle2__doublePoints]: hasVariant(
                    variants,
                    "doublePoints",
                    "doublePoints"
                  )
                })
              })
            : null}
          {(hasVariant(variants, "doublePoints", "doublePoints") ? true : true)
            ? p.renderPlasmicSlot({
                defaultContents: "10x",
                value: args.title,
                className: classNames(sty.slotTargetTitle, {
                  [sty.slotTargetTitle__brandColors_cavs]: hasVariant(
                    variants,
                    "brandColors",
                    "cavs"
                  ),
                  [sty.slotTargetTitle__brandColors_celtics]: hasVariant(
                    variants,
                    "brandColors",
                    "celtics"
                  ),
                  [sty.slotTargetTitle__brandColors_manu]: hasVariant(
                    variants,
                    "brandColors",
                    "manu"
                  ),
                  [sty.slotTargetTitle__brandColors_marlins]: hasVariant(
                    variants,
                    "brandColors",
                    "marlins"
                  ),
                  [sty.slotTargetTitle__doublePoints]: hasVariant(
                    variants,
                    "doublePoints",
                    "doublePoints"
                  )
                })
              })
            : null}
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__dYj25)}>
          {p.renderPlasmicSlot({
            defaultContents: "Points on rideshare and streaming services*",
            value: args.body,
            className: classNames(sty.slotTargetBody, {
              [sty.slotTargetBody__brandColors_cavs]: hasVariant(
                variants,
                "brandColors",
                "cavs"
              ),
              [sty.slotTargetBody__brandColors_celtics]: hasVariant(
                variants,
                "brandColors",
                "celtics"
              ),
              [sty.slotTargetBody__brandColors_manu]: hasVariant(
                variants,
                "brandColors",
                "manu"
              ),
              [sty.slotTargetBody__brandColors_marlins]: hasVariant(
                variants,
                "brandColors",
                "marlins"
              )
            })
          })}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBigCallOut__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBigCallOut__VariantsArgs;
    args?: PlasmicBigCallOut__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicBigCallOut__Fetches;
  } & Omit<PlasmicBigCallOut__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBigCallOut__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBigCallOut__ArgProps,
      internalVariantPropNames: PlasmicBigCallOut__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicBigCallOut__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBigCallOut";
  } else {
    func.displayName = `PlasmicBigCallOut.${nodeName}`;
  }
  return func;
}

export const PlasmicBigCallOut = Object.assign(
  // Top-level PlasmicBigCallOut renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicBigCallOut
    internalVariantProps: PlasmicBigCallOut__VariantProps,
    internalArgProps: PlasmicBigCallOut__ArgProps
  }
);

export default PlasmicBigCallOut;
/* prettier-ignore-end */
