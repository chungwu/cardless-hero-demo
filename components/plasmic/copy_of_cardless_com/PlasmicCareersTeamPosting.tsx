// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: e5FE6Mc6mLjK
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicCareersTeamPosting.module.css"; // plasmic-import: e5FE6Mc6mLjK/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon

export type PlasmicCareersTeamPosting__VariantMembers = {};

export type PlasmicCareersTeamPosting__VariantsArgs = {};
type VariantPropType = keyof PlasmicCareersTeamPosting__VariantsArgs;
export const PlasmicCareersTeamPosting__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCareersTeamPosting__ArgsType = {
  roleTitle?: React.ReactNode;
  roleLocation?: React.ReactNode;
  roleType?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCareersTeamPosting__ArgsType;
export const PlasmicCareersTeamPosting__ArgProps = new Array<ArgPropType>(
  "roleTitle",
  "roleLocation",
  "roleType"
);

export type PlasmicCareersTeamPosting__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultCareersTeamPostingProps {
  roleTitle?: React.ReactNode;
  roleLocation?: React.ReactNode;
  roleType?: React.ReactNode;
  className?: string;
}

function PlasmicCareersTeamPosting__RenderFunc(props: {
  variants: PlasmicCareersTeamPosting__VariantsArgs;
  args: PlasmicCareersTeamPosting__ArgsType;
  overrides: PlasmicCareersTeamPosting__OverridesType;
  dataFetches?: PlasmicCareersTeamPosting__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__tP876)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__cCy6G)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Role Title",
            value: args.roleTitle,
            className: classNames(sty.slotTargetRoleTitle)
          })}

          <div className={classNames(projectcss.all, sty.freeBox__sa3Kh)}>
            {p.renderPlasmicSlot({
              defaultContents: "Full-Time",
              value: args.roleType,
              className: classNames(sty.slotTargetRoleType)
            })}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oPmz0
              )}
            >
              {" / "}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "Location",
              value: args.roleLocation,
              className: classNames(sty.slotTargetRoleLocation)
            })}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hlP9)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cuKc0
            )}
          >
            {"Learn more"}
          </div>

          <ArrowRightIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </p.Stack>
      </p.Stack>

      {(triggers.hover_root ? true : true) ? (
        <div className={classNames(projectcss.all, sty.freeBox___003ES)} />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCareersTeamPosting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCareersTeamPosting__VariantsArgs;
    args?: PlasmicCareersTeamPosting__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCareersTeamPosting__Fetches;
  } & Omit<PlasmicCareersTeamPosting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCareersTeamPosting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCareersTeamPosting__ArgProps,
      internalVariantPropNames: PlasmicCareersTeamPosting__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCareersTeamPosting__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCareersTeamPosting";
  } else {
    func.displayName = `PlasmicCareersTeamPosting.${nodeName}`;
  }
  return func;
}

export const PlasmicCareersTeamPosting = Object.assign(
  // Top-level PlasmicCareersTeamPosting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicCareersTeamPosting
    internalVariantProps: PlasmicCareersTeamPosting__VariantProps,
    internalArgProps: PlasmicCareersTeamPosting__ArgProps
  }
);

export default PlasmicCareersTeamPosting;
/* prettier-ignore-end */
