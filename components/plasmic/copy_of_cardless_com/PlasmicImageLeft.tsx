// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: i5UR_SxBMe0v
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicImageLeft.module.css"; // plasmic-import: i5UR_SxBMe0v/css

export type PlasmicImageLeft__VariantMembers = {
  flipSections: "flipSections";
};

export type PlasmicImageLeft__VariantsArgs = {
  flipSections?: SingleBooleanChoiceArg<"flipSections">;
};

type VariantPropType = keyof PlasmicImageLeft__VariantsArgs;
export const PlasmicImageLeft__VariantProps = new Array<VariantPropType>(
  "flipSections"
);

export type PlasmicImageLeft__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicImageLeft__ArgsType;
export const PlasmicImageLeft__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicImageLeft__OverridesType = {
  root?: p.Flex<"div">;
  exploreCards2?: p.Flex<"div">;
};

export interface DefaultImageLeftProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  flipSections?: SingleBooleanChoiceArg<"flipSections">;
  className?: string;
}

function PlasmicImageLeft__RenderFunc(props: {
  variants: PlasmicImageLeft__VariantsArgs;
  args: PlasmicImageLeft__ArgsType;
  overrides: PlasmicImageLeft__OverridesType;
  dataFetches?: PlasmicImageLeft__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__flipSections]: hasVariant(
          variants,
          "flipSections",
          "flipSections"
        )
      })}
    >
      {(
        hasVariant(globalVariants, "screen", "mobile")
          ? true
          : hasVariant(globalVariants, "screen", "tabletSmall")
          ? true
          : hasVariant(globalVariants, "screen", "tablet")
          ? true
          : hasVariant(globalVariants, "screen", "laptopSmall")
          ? true
          : hasVariant(globalVariants, "screen", "laptop")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"exploreCards2"}
          data-plasmic-override={overrides.exploreCards2}
          className={classNames(projectcss.all, sty.exploreCards2, {
            [sty.exploreCards2__flipSections]: hasVariant(
              variants,
              "flipSections",
              "flipSections"
            )
          })}
        >
          {(
            hasVariant(globalVariants, "screen", "tabletSmall")
              ? true
              : hasVariant(globalVariants, "screen", "tablet")
              ? true
              : hasVariant(globalVariants, "screen", "laptopSmall")
              ? true
              : hasVariant(globalVariants, "screen", "laptop")
              ? true
              : true
          ) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mYstZ, {
                [sty.freeBox__flipSections__mYstZh1K6J]: hasVariant(
                  variants,
                  "flipSections",
                  "flipSections"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__q6RIz, {
                  [sty.freeBox__flipSections__q6RIzh1K6J]: hasVariant(
                    variants,
                    "flipSections",
                    "flipSections"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.slot
                })}
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : hasVariant(globalVariants, "screen", "tabletSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__cr2Ee)}>
                  {p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.children
                  })}
                </div>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "exploreCards2"],
  exploreCards2: ["exploreCards2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  exploreCards2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImageLeft__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImageLeft__VariantsArgs;
    args?: PlasmicImageLeft__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicImageLeft__Fetches;
  } & Omit<PlasmicImageLeft__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicImageLeft__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicImageLeft__ArgProps,
      internalVariantPropNames: PlasmicImageLeft__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicImageLeft__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicImageLeft";
  } else {
    func.displayName = `PlasmicImageLeft.${nodeName}`;
  }
  return func;
}

export const PlasmicImageLeft = Object.assign(
  // Top-level PlasmicImageLeft renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    exploreCards2: makeNodeComponent("exploreCards2"),

    // Metadata about props expected for PlasmicImageLeft
    internalVariantProps: PlasmicImageLeft__VariantProps,
    internalArgProps: PlasmicImageLeft__ArgProps
  }
);

export default PlasmicImageLeft;
/* prettier-ignore-end */
