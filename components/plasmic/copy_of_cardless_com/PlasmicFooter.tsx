// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: 4TDmEKfWsWRr
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AppStoreCta from "../../AppStoreCta"; // plasmic-import: ufZvdJ_v0tDv/component
import PlayStoreCta from "../../PlayStoreCta"; // plasmic-import: krLHVnGMVKE8/component
import FooterLink from "../../FooterLink"; // plasmic-import: LiTSzl8qMi-t/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicFooter.module.css"; // plasmic-import: 4TDmEKfWsWRr/css

import Layer1Icon from "./icons/PlasmicIcon__Layer1"; // plasmic-import: xfD2OPoVZLchG/icon
import FacebookNegativeIcon from "./icons/PlasmicIcon__FacebookNegative"; // plasmic-import: cEmwCvAMx53Gt/icon
import TwitterNegativeIcon from "./icons/PlasmicIcon__TwitterNegative"; // plasmic-import: FOaL6HbCHCvvE/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: rePQFkfOwMOk5/icon

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {
  destination?: string;
};

type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>("destination");

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  footerDesktop?: p.Flex<"div">;
  row1?: p.Flex<"div">;
  column1?: p.Flex<"div">;
  cardlessLogoLight?: p.Flex<"div">;
  layer2?: p.Flex<"div">;
  downloadButtons?: p.Flex<"div">;
  appStoreCta?: p.Flex<typeof AppStoreCta>;
  playStoreCta?: p.Flex<typeof PlayStoreCta>;
  column24?: p.Flex<"div">;
  cards?: p.Flex<"div">;
  company?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  support?: p.Flex<"div">;
  support2?: p.Flex<"div">;
  downloadButtons3?: p.Flex<"div">;
  downloadButtons2?: p.Flex<"div">;
  row2?: p.Flex<"div">;
  socialMediaLinks?: p.Flex<"div">;
  instagramNegative?: p.Flex<"a"> & Partial<LinkProps>;
  divider?: p.Flex<"div">;
  miscText?: p.Flex<"div">;
  column?: p.Flex<"div">;
  content?: p.Flex<"div">;
  regulatory?: p.Flex<"div">;
  regulatory2?: p.Flex<"div">;
  tc?: p.Flex<"div">;
  privacyPolicy?: p.Flex<"div">;
  privacyNotice?: p.Flex<"div">;
  optionalFinePrint?: p.Flex<"div">;
};

export interface DefaultFooterProps {
  destination?: string;
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  dataFetches?: PlasmicFooter__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"footerDesktop"}
        data-plasmic-override={overrides.footerDesktop}
        hasGap={true}
        className={classNames(projectcss.all, sty.footerDesktop)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"row1"}
          data-plasmic-override={overrides.row1}
          hasGap={true}
          className={classNames(projectcss.all, sty.row1)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"column1"}
            data-plasmic-override={overrides.column1}
            hasGap={true}
            className={classNames(projectcss.all, sty.column1)}
          >
            <div
              data-plasmic-name={"cardlessLogoLight"}
              data-plasmic-override={overrides.cardlessLogoLight}
              className={classNames(projectcss.all, sty.cardlessLogoLight)}
            >
              <div
                data-plasmic-name={"layer2"}
                data-plasmic-override={overrides.layer2}
                className={classNames(projectcss.all, sty.layer2)}
              >
                {(
                  hasVariant(globalVariants, "screen", "tablet") ? true : true
                ) ? (
                  <Layer1Icon
                    className={classNames(projectcss.all, sty.svg__jZ5El)}
                    role={"img"}
                  />
                ) : null}
              </div>
            </div>

            {(
              hasVariant(globalVariants, "screen", "tabletSmall")
                ? true
                : hasVariant(globalVariants, "screen", "laptopSmall")
                ? true
                : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"downloadButtons"}
                data-plasmic-override={overrides.downloadButtons}
                hasGap={true}
                className={classNames(projectcss.all, sty.downloadButtons)}
              >
                <AppStoreCta
                  data-plasmic-name={"appStoreCta"}
                  data-plasmic-override={overrides.appStoreCta}
                  className={classNames("__wab_instance", sty.appStoreCta)}
                />

                <PlayStoreCta
                  data-plasmic-name={"playStoreCta"}
                  data-plasmic-override={overrides.playStoreCta}
                  className={classNames("__wab_instance", sty.playStoreCta)}
                />
              </p.Stack>
            ) : null}
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column24"}
            data-plasmic-override={overrides.column24}
            hasGap={true}
            className={classNames(projectcss.all, sty.column24)}
          >
            {(
              hasVariant(globalVariants, "screen", "laptopSmall") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"cards"}
                data-plasmic-override={overrides.cards}
                hasGap={true}
                className={classNames(projectcss.all, sty.cards)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ueCvn
                  )}
                >
                  {"Cards"}
                </div>

                <FooterLink
                  className={classNames(
                    "__wab_instance",
                    sty.footerLink__qqD4S
                  )}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__zTXf9
                    )}
                    component={Link}
                    href={"/manutd" as const}
                    platform={"nextjs"}
                  >
                    {"Manchester United"}
                  </p.PlasmicLink>
                </FooterLink>

                <FooterLink
                  className={classNames("__wab_instance", sty.footerLink__x4Fo)}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__rbOsE
                    )}
                    component={Link}
                    href={"/cavs" as const}
                    platform={"nextjs"}
                  >
                    {"Cleveland Cavaliers"}
                  </p.PlasmicLink>
                </FooterLink>

                <FooterLink
                  className={classNames(
                    "__wab_instance",
                    sty.footerLink___2Syxv
                  )}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ywEyh
                    )}
                    component={Link}
                    href={"/marlins" as const}
                    platform={"nextjs"}
                  >
                    {"Miami Marlins"}
                  </p.PlasmicLink>
                </FooterLink>

                <FooterLink
                  className={classNames(
                    "__wab_instance",
                    sty.footerLink__gZjlu
                  )}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__q2Do6
                    )}
                    component={Link}
                    href={"/celtics" as const}
                    platform={"nextjs"}
                  >
                    {"Boston Celtics"}
                  </p.PlasmicLink>
                </FooterLink>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"company"}
              data-plasmic-override={overrides.company}
              hasGap={true}
              className={classNames(projectcss.all, sty.company)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__db2LA
                )}
              >
                {"Company"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <FooterLink
                  className={classNames(
                    "__wab_instance",
                    sty.footerLink___0J4F1
                  )}
                  destination={"/careers" as const}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___4KFoG
                    )}
                    component={Link}
                    href={"/careers" as const}
                    platform={"nextjs"}
                  >
                    {"Careers"}
                  </p.PlasmicLink>
                </FooterLink>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2SZng
                  )}
                >
                  {"We are hiring!"}
                </div>
              </p.Stack>

              <FooterLink
                className={classNames("__wab_instance", sty.footerLink__fSkr1)}
              >
                <FooterLink
                  className={classNames(
                    "__wab_instance",
                    sty.footerLink___8LKC
                  )}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__yCtnF
                    )}
                    component={Link}
                    href={"https://medium.com/cardlesseng" as const}
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    {"Blog"}
                  </p.PlasmicLink>
                </FooterLink>
              </FooterLink>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"support"}
              data-plasmic-override={overrides.support}
              hasGap={true}
              className={classNames(projectcss.all, sty.support)}
            >
              {(
                hasVariant(globalVariants, "screen", "laptopSmall")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jcVc
                  )}
                >
                  {"Support"}
                </div>
              ) : null}

              <FooterLink
                className={classNames("__wab_instance", sty.footerLink___0Zss7)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__tiFcQ
                  )}
                  component={Link}
                  href={"/faq" as const}
                  platform={"nextjs"}
                >
                  {"FAQs"}
                </p.PlasmicLink>
              </FooterLink>

              <FooterLink
                className={classNames("__wab_instance", sty.footerLink__jPex)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__bfWJj
                  )}
                  component={Link}
                  href={"/refer-a-friend" as const}
                  platform={"nextjs"}
                >
                  {"Refer a friend"}
                </p.PlasmicLink>
              </FooterLink>

              <FooterLink
                className={classNames("__wab_instance", sty.footerLink__t3Zlz)}
                destination={"mailto:support@cardless.com" as const}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__biRqd
                  )}
                  component={Link}
                  href={"mailto:support@cardless.com" as const}
                  platform={"nextjs"}
                >
                  {"support@cardless.com"}
                </p.PlasmicLink>
              </FooterLink>

              {(
                hasVariant(globalVariants, "screen", "laptopSmall")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"support2"}
                  data-plasmic-override={overrides.support2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.support2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__icdUl
                    )}
                  >
                    {"+1 (888) 227-3537"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ntey
                    )}
                  >
                    {"Monday-Friday 8:00AM-9:30PM ET"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x4Wen
                    )}
                  >
                    {"Saturday-Sunday 8AM-5PM ET"}
                  </div>
                </p.Stack>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopSmall")
                  ? true
                  : false
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"downloadButtons3"}
                  data-plasmic-override={overrides.downloadButtons3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.downloadButtons3)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : hasVariant(globalVariants, "screen", "laptopSmall")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__jvTS)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("auto" as const)
                          : ("36px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("97px" as const)
                          : ("125px" as const)
                      }
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/image2.svg",
                        fullWidth: 300,
                        fullHeight: 86,
                        aspectRatio: 3.472222
                      }}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : hasVariant(globalVariants, "screen", "laptopSmall")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__euXda)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("28px" as const)
                          : ("36px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("97px" as const)
                          : ("125px" as const)
                      }
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/image.svg",
                        fullWidth: 300,
                        fullHeight: 86,
                        aspectRatio: 3.472222
                      }}
                    />
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>

          {(
            hasVariant(globalVariants, "screen", "tabletSmall")
              ? true
              : hasVariant(globalVariants, "screen", "laptopSmall")
              ? true
              : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"downloadButtons2"}
              data-plasmic-override={overrides.downloadButtons2}
              hasGap={true}
              className={classNames(projectcss.all, sty.downloadButtons2)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ifNou)}
                displayHeight={"36px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"125px" as const}
                src={{
                  src: "/plasmic/copy_of_cardless_com/images/image2.svg",
                  fullWidth: 300,
                  fullHeight: 86,
                  aspectRatio: 3.472222
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__jiV9V)}
                displayHeight={"36px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"125px" as const}
                src={{
                  src: "/plasmic/copy_of_cardless_com/images/image.svg",
                  fullWidth: 300,
                  fullHeight: 86,
                  aspectRatio: 3.472222
                }}
              />
            </p.Stack>
          ) : null}
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"row2"}
          data-plasmic-override={overrides.row2}
          hasGap={true}
          className={classNames(projectcss.all, sty.row2)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"socialMediaLinks"}
              data-plasmic-override={overrides.socialMediaLinks}
              hasGap={true}
              className={classNames(projectcss.all, sty.socialMediaLinks)}
            >
              <p.PlasmicLink
                className={classNames(projectcss.a, sty.link___2Muit)}
                component={Link}
                href={"https://www.facebook.com/cardlesshq/" as const}
                platform={"nextjs"}
                target={"_blank" as const}
              >
                <FacebookNegativeIcon
                  className={classNames(projectcss.all, sty.svg__n7ETa)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(projectcss.a, sty.link__mc0R)}
                component={Link}
                href={"https://twitter.com/cardless" as const}
                platform={"nextjs"}
                target={"_blank" as const}
              >
                <TwitterNegativeIcon
                  className={classNames(projectcss.all, sty.svg__zem4P)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"instagramNegative"}
                data-plasmic-override={overrides.instagramNegative}
                className={classNames(projectcss.a, sty.instagramNegative)}
                component={Link}
                href={"https://www.instagram.com/cardlesshq" as const}
                platform={"nextjs"}
                target={"_blank" as const}
              >
                <Group4Icon
                  className={classNames(projectcss.all, sty.svg__teUr6)}
                  role={"img"}
                />
              </p.PlasmicLink>
            </p.Stack>
          ) : null}

          <div
            data-plasmic-name={"divider"}
            data-plasmic-override={overrides.divider}
            className={classNames(projectcss.all, sty.divider)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"miscText"}
            data-plasmic-override={overrides.miscText}
            hasGap={true}
            className={classNames(projectcss.all, sty.miscText)}
          >
            {true ? (
              <div
                data-plasmic-name={"column"}
                data-plasmic-override={overrides.column}
                className={classNames(projectcss.all, sty.column)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"regulatory"}
                    data-plasmic-override={overrides.regulatory}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.regulatory)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"regulatory2"}
                      data-plasmic-override={overrides.regulatory2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.regulatory2)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tc"}
                        data-plasmic-override={overrides.tc}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tc)}
                      >
                        <p.PlasmicLink
                          className={classNames(projectcss.a, sty.link__adhLq)}
                          component={Link}
                          href={"/privacy-policy" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={"privacyPolicy"}
                            data-plasmic-override={overrides.privacyPolicy}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.privacyPolicy
                            )}
                          >
                            {"Privacy Policy "}
                          </div>
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(projectcss.a, sty.link___3NvHt)}
                          component={Link}
                          href={"/privacy-notice" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            data-plasmic-name={"privacyNotice"}
                            data-plasmic-override={overrides.privacyNotice}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.privacyNotice
                            )}
                          >
                            {"Privacy Notice "}
                          </div>
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(projectcss.a, sty.link__idq3G)}
                          component={Link}
                          href={"/terms-of-service" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nZqD
                            )}
                          >
                            {"Terms of Service"}
                          </div>
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(projectcss.a, sty.link__pbu5O)}
                          component={Link}
                          href={"/cardholder-agreement" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qrhjL
                            )}
                          >
                            {"Cardholder Agreement"}
                          </div>
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(projectcss.a, sty.link__vIhNw)}
                          component={Link}
                          href={"/rewards-terms-and-conditions" as const}
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uGSlU
                            )}
                          >
                            {"Rewards Terms and Conditions"}
                          </div>
                        </p.PlasmicLink>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5OoTi
                        )}
                      >
                        {
                          "© 2021 Cardless, Inc., all rights reserved.\n\nIssued by First Electronic Bank, Member FDIC. Offers subject to credit approval.\n\nCardless, Inc. 350 Townsend St., #610 San Francisco, CA 94107"
                        }
                      </div>

                      <div
                        data-plasmic-name={"optionalFinePrint"}
                        data-plasmic-override={overrides.optionalFinePrint}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.optionalFinePrint
                        )}
                      >
                        {
                          "Cardless reserves the right to terminate or modify these offers at any time. For promotional purposes only.\nMastercard is a registered trademark, and the circles design is a trademark of Mastercard International Incorporated. \nApple, Apple Pay, and the Apple logo are trademarks of Apple Inc., registered in the U.S. and other countries. App Store is a service mark of Apple Inc., registered in the U.S. and other countries.\nGoogle Play and the Google Play logo are trademarks of Google Inc."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            ) : null}
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "footerDesktop",
    "row1",
    "column1",
    "cardlessLogoLight",
    "layer2",
    "downloadButtons",
    "appStoreCta",
    "playStoreCta",
    "column24",
    "cards",
    "company",
    "freeBox",
    "support",
    "support2",
    "downloadButtons3",
    "downloadButtons2",
    "row2",
    "socialMediaLinks",
    "instagramNegative",
    "divider",
    "miscText",
    "column",
    "content",
    "regulatory",
    "regulatory2",
    "tc",
    "privacyPolicy",
    "privacyNotice",
    "optionalFinePrint"
  ],
  footerDesktop: [
    "footerDesktop",
    "row1",
    "column1",
    "cardlessLogoLight",
    "layer2",
    "downloadButtons",
    "appStoreCta",
    "playStoreCta",
    "column24",
    "cards",
    "company",
    "freeBox",
    "support",
    "support2",
    "downloadButtons3",
    "downloadButtons2",
    "row2",
    "socialMediaLinks",
    "instagramNegative",
    "divider",
    "miscText",
    "column",
    "content",
    "regulatory",
    "regulatory2",
    "tc",
    "privacyPolicy",
    "privacyNotice",
    "optionalFinePrint"
  ],
  row1: [
    "row1",
    "column1",
    "cardlessLogoLight",
    "layer2",
    "downloadButtons",
    "appStoreCta",
    "playStoreCta",
    "column24",
    "cards",
    "company",
    "freeBox",
    "support",
    "support2",
    "downloadButtons3",
    "downloadButtons2"
  ],
  column1: [
    "column1",
    "cardlessLogoLight",
    "layer2",
    "downloadButtons",
    "appStoreCta",
    "playStoreCta"
  ],
  cardlessLogoLight: ["cardlessLogoLight", "layer2"],
  layer2: ["layer2"],
  downloadButtons: ["downloadButtons", "appStoreCta", "playStoreCta"],
  appStoreCta: ["appStoreCta"],
  playStoreCta: ["playStoreCta"],
  column24: [
    "column24",
    "cards",
    "company",
    "freeBox",
    "support",
    "support2",
    "downloadButtons3"
  ],
  cards: ["cards"],
  company: ["company", "freeBox"],
  freeBox: ["freeBox"],
  support: ["support", "support2", "downloadButtons3"],
  support2: ["support2"],
  downloadButtons3: ["downloadButtons3"],
  downloadButtons2: ["downloadButtons2"],
  row2: [
    "row2",
    "socialMediaLinks",
    "instagramNegative",
    "divider",
    "miscText",
    "column",
    "content",
    "regulatory",
    "regulatory2",
    "tc",
    "privacyPolicy",
    "privacyNotice",
    "optionalFinePrint"
  ],
  socialMediaLinks: ["socialMediaLinks", "instagramNegative"],
  instagramNegative: ["instagramNegative"],
  divider: ["divider"],
  miscText: [
    "miscText",
    "column",
    "content",
    "regulatory",
    "regulatory2",
    "tc",
    "privacyPolicy",
    "privacyNotice",
    "optionalFinePrint"
  ],
  column: [
    "column",
    "content",
    "regulatory",
    "regulatory2",
    "tc",
    "privacyPolicy",
    "privacyNotice",
    "optionalFinePrint"
  ],
  content: [
    "content",
    "regulatory",
    "regulatory2",
    "tc",
    "privacyPolicy",
    "privacyNotice",
    "optionalFinePrint"
  ],
  regulatory: [
    "regulatory",
    "regulatory2",
    "tc",
    "privacyPolicy",
    "privacyNotice",
    "optionalFinePrint"
  ],
  regulatory2: [
    "regulatory2",
    "tc",
    "privacyPolicy",
    "privacyNotice",
    "optionalFinePrint"
  ],
  tc: ["tc", "privacyPolicy", "privacyNotice"],
  privacyPolicy: ["privacyPolicy"],
  privacyNotice: ["privacyNotice"],
  optionalFinePrint: ["optionalFinePrint"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  footerDesktop: "div";
  row1: "div";
  column1: "div";
  cardlessLogoLight: "div";
  layer2: "div";
  downloadButtons: "div";
  appStoreCta: typeof AppStoreCta;
  playStoreCta: typeof PlayStoreCta;
  column24: "div";
  cards: "div";
  company: "div";
  freeBox: "div";
  support: "div";
  support2: "div";
  downloadButtons3: "div";
  downloadButtons2: "div";
  row2: "div";
  socialMediaLinks: "div";
  instagramNegative: "a";
  divider: "div";
  miscText: "div";
  column: "div";
  content: "div";
  regulatory: "div";
  regulatory2: "div";
  tc: "div";
  privacyPolicy: "div";
  privacyNotice: "div";
  optionalFinePrint: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooter__Fetches;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    footerDesktop: makeNodeComponent("footerDesktop"),
    row1: makeNodeComponent("row1"),
    column1: makeNodeComponent("column1"),
    cardlessLogoLight: makeNodeComponent("cardlessLogoLight"),
    layer2: makeNodeComponent("layer2"),
    downloadButtons: makeNodeComponent("downloadButtons"),
    appStoreCta: makeNodeComponent("appStoreCta"),
    playStoreCta: makeNodeComponent("playStoreCta"),
    column24: makeNodeComponent("column24"),
    cards: makeNodeComponent("cards"),
    company: makeNodeComponent("company"),
    freeBox: makeNodeComponent("freeBox"),
    support: makeNodeComponent("support"),
    support2: makeNodeComponent("support2"),
    downloadButtons3: makeNodeComponent("downloadButtons3"),
    downloadButtons2: makeNodeComponent("downloadButtons2"),
    row2: makeNodeComponent("row2"),
    socialMediaLinks: makeNodeComponent("socialMediaLinks"),
    instagramNegative: makeNodeComponent("instagramNegative"),
    divider: makeNodeComponent("divider"),
    miscText: makeNodeComponent("miscText"),
    column: makeNodeComponent("column"),
    content: makeNodeComponent("content"),
    regulatory: makeNodeComponent("regulatory"),
    regulatory2: makeNodeComponent("regulatory2"),
    tc: makeNodeComponent("tc"),
    privacyPolicy: makeNodeComponent("privacyPolicy"),
    privacyNotice: makeNodeComponent("privacyNotice"),
    optionalFinePrint: makeNodeComponent("optionalFinePrint"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
