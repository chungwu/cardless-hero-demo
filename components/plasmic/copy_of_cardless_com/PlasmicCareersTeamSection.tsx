// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: akLG14lb0Udy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CareersTeamPosting from "../../CareersTeamPosting"; // plasmic-import: e5FE6Mc6mLjK/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicCareersTeamSection.module.css"; // plasmic-import: akLG14lb0Udy/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon

export type PlasmicCareersTeamSection__VariantMembers = {
  open: "open";
  pluralListings: "pluralListings";
  hideOpenings: "hideOpenings";
};

export type PlasmicCareersTeamSection__VariantsArgs = {
  open?: SingleBooleanChoiceArg<"open">;
  pluralListings?: SingleBooleanChoiceArg<"pluralListings">;
  hideOpenings?: SingleBooleanChoiceArg<"hideOpenings">;
};

type VariantPropType = keyof PlasmicCareersTeamSection__VariantsArgs;
export const PlasmicCareersTeamSection__VariantProps =
  new Array<VariantPropType>("open", "pluralListings", "hideOpenings");

export type PlasmicCareersTeamSection__ArgsType = {
  children?: React.ReactNode;
  teamName?: React.ReactNode;
  numOpenings?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCareersTeamSection__ArgsType;
export const PlasmicCareersTeamSection__ArgProps = new Array<ArgPropType>(
  "children",
  "teamName",
  "numOpenings"
);

export type PlasmicCareersTeamSection__OverridesType = {
  root?: p.Flex<"div">;
  clickableHeader?: p.Flex<"div">;
  title?: p.Flex<"div">;
  text?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  border?: p.Flex<"div">;
};

export interface DefaultCareersTeamSectionProps {
  children?: React.ReactNode;
  teamName?: React.ReactNode;
  numOpenings?: React.ReactNode;
  open?: SingleBooleanChoiceArg<"open">;
  pluralListings?: SingleBooleanChoiceArg<"pluralListings">;
  hideOpenings?: SingleBooleanChoiceArg<"hideOpenings">;
  className?: string;
}

function PlasmicCareersTeamSection__RenderFunc(props: {
  variants: PlasmicCareersTeamSection__VariantsArgs;
  args: PlasmicCareersTeamSection__ArgsType;
  overrides: PlasmicCareersTeamSection__OverridesType;
  dataFetches?: PlasmicCareersTeamSection__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__open]: hasVariant(variants, "open", "open")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"clickableHeader"}
        data-plasmic-override={overrides.clickableHeader}
        hasGap={true}
        className={classNames(
          projectcss.all,
          sty.clickableHeader,
          "clickableHeader" as const,
          { [sty.clickableHeader__open]: hasVariant(variants, "open", "open") }
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          hasGap={true}
          className={classNames(projectcss.all, sty.title, {
            [sty.title__open]: hasVariant(variants, "open", "open")
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.freeBox__gMiPz,
              "clickableHeader" as const,
              {
                [sty.freeBox__open__gMiPz8WuZf]: hasVariant(
                  variants,
                  "open",
                  "open"
                )
              }
            )}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1Dpf2, {
                [sty.freeBox__pluralListings___1Dpf201Ip]: hasVariant(
                  variants,
                  "pluralListings",
                  "pluralListings"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__lNfNf, {
                  [sty.freeBox__hideOpenings__lNfNf529Fq]: hasVariant(
                    variants,
                    "hideOpenings",
                    "hideOpenings"
                  ),
                  [sty.freeBox__open__lNfNf8WuZf]: hasVariant(
                    variants,
                    "open",
                    "open"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Team name",
                  value: args.teamName,
                  className: classNames(sty.slotTargetTeamName, {
                    [sty.slotTargetTeamName__open]: hasVariant(
                      variants,
                      "open",
                      "open"
                    )
                  })
                })}
              </div>

              {(
                hasVariant(variants, "hideOpenings", "hideOpenings")
                  ? false
                  : true
              )
                ? p.renderPlasmicSlot({
                    defaultContents: "#",
                    value: args.numOpenings,
                    className: classNames(sty.slotTargetNumOpenings, {
                      [sty.slotTargetNumOpenings__hideOpenings]: hasVariant(
                        variants,
                        "hideOpenings",
                        "hideOpenings"
                      ),
                      [sty.slotTargetNumOpenings__open]: hasVariant(
                        variants,
                        "open",
                        "open"
                      )
                    })
                  })
                : null}
              {(
                hasVariant(variants, "hideOpenings", "hideOpenings")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text,
                    {
                      [sty.text__hideOpenings]: hasVariant(
                        variants,
                        "hideOpenings",
                        "hideOpenings"
                      ),
                      [sty.text__open]: hasVariant(variants, "open", "open"),
                      [sty.text__pluralListings]: hasVariant(
                        variants,
                        "pluralListings",
                        "pluralListings"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "pluralListings", "pluralListings")
                    ? "openings"
                    : "opening"}
                </div>
              ) : null}
            </p.Stack>

            <div
              className={classNames(projectcss.all, sty.freeBox___1TdLl, {
                [sty.freeBox__open___1TdLl8WuZf]: hasVariant(
                  variants,
                  "open",
                  "open"
                )
              })}
            >
              <ArrowRightIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg, {
                  [sty.svg__open]: hasVariant(variants, "open", "open")
                })}
                role={"img"}
              />
            </div>
          </p.Stack>
        </p.Stack>

        <div
          data-plasmic-name={"border"}
          data-plasmic-override={overrides.border}
          className={classNames(projectcss.all, sty.border, {
            [sty.border__open]: hasVariant(variants, "open", "open")
          })}
        />
      </p.Stack>

      {(hasVariant(variants, "open", "open") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vZmOu, {
            [sty.freeBox__open__vZmOu8WuZf]: hasVariant(
              variants,
              "open",
              "open"
            )
          })}
        >
          {(hasVariant(variants, "open", "open") ? true : true)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    {true ? (
                      <CareersTeamPosting
                        className={classNames(
                          "__wab_instance",
                          sty.careersTeamPosting__dtDXb
                        )}
                      />
                    ) : null}
                    {true ? (
                      <CareersTeamPosting
                        className={classNames(
                          "__wab_instance",
                          sty.careersTeamPosting__anI4B
                        )}
                      />
                    ) : null}
                    {true ? (
                      <CareersTeamPosting
                        className={classNames(
                          "__wab_instance",
                          sty.careersTeamPosting__hz1Sl
                        )}
                      />
                    ) : null}
                  </React.Fragment>
                ),
                value: args.children
              })
            : null}
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "clickableHeader", "title", "text", "svg", "border"],
  clickableHeader: ["clickableHeader", "title", "text", "svg", "border"],
  title: ["title", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  border: ["border"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  clickableHeader: "div";
  title: "div";
  text: "div";
  svg: "svg";
  border: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCareersTeamSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCareersTeamSection__VariantsArgs;
    args?: PlasmicCareersTeamSection__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCareersTeamSection__Fetches;
  } & Omit<PlasmicCareersTeamSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCareersTeamSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCareersTeamSection__ArgProps,
      internalVariantPropNames: PlasmicCareersTeamSection__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCareersTeamSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCareersTeamSection";
  } else {
    func.displayName = `PlasmicCareersTeamSection.${nodeName}`;
  }
  return func;
}

export const PlasmicCareersTeamSection = Object.assign(
  // Top-level PlasmicCareersTeamSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    clickableHeader: makeNodeComponent("clickableHeader"),
    title: makeNodeComponent("title"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    border: makeNodeComponent("border"),

    // Metadata about props expected for PlasmicCareersTeamSection
    internalVariantProps: PlasmicCareersTeamSection__VariantProps,
    internalArgProps: PlasmicCareersTeamSection__ArgProps
  }
);

export default PlasmicCareersTeamSection;
/* prettier-ignore-end */
