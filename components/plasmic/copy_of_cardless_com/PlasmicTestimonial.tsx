// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: EOORFxZkoS_u
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LinkButton from "../../LinkButton"; // plasmic-import: exoHRHBB2Jd8/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicTestimonial.module.css"; // plasmic-import: EOORFxZkoS_u/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon

export type PlasmicTestimonial__VariantMembers = {
  image2: "image2";
  readMore: "readMore";
};

export type PlasmicTestimonial__VariantsArgs = {
  image2?: SingleBooleanChoiceArg<"image2">;
  readMore?: SingleBooleanChoiceArg<"readMore">;
};

type VariantPropType = keyof PlasmicTestimonial__VariantsArgs;
export const PlasmicTestimonial__VariantProps = new Array<VariantPropType>(
  "image2",
  "readMore"
);

export type PlasmicTestimonial__ArgsType = {
  name?: React.ReactNode;
  username?: React.ReactNode;
  avatar?: React.ReactNode;
  content?: React.ReactNode;
  image?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTestimonial__ArgsType;
export const PlasmicTestimonial__ArgProps = new Array<ArgPropType>(
  "name",
  "username",
  "avatar",
  "content",
  "image",
  "children"
);

export type PlasmicTestimonial__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  socialMediaPost?: p.Flex<"div">;
  heading?: p.Flex<"div">;
  text?: p.Flex<"div">;
  image?: p.Flex<"div">;
};

export interface DefaultTestimonialProps {
  name?: React.ReactNode;
  username?: React.ReactNode;
  avatar?: React.ReactNode;
  content?: React.ReactNode;
  image?: React.ReactNode;
  children?: React.ReactNode;
  image2?: SingleBooleanChoiceArg<"image2">;
  readMore?: SingleBooleanChoiceArg<"readMore">;
  className?: string;
}

function PlasmicTestimonial__RenderFunc(props: {
  variants: PlasmicTestimonial__VariantsArgs;
  args: PlasmicTestimonial__ArgsType;
  overrides: PlasmicTestimonial__OverridesType;
  dataFetches?: PlasmicTestimonial__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__readMore]: hasVariant(variants, "readMore", "readMore")
      })}
    >
      {true ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"socialMediaPost"}
            data-plasmic-override={overrides.socialMediaPost}
            hasGap={true}
            className={classNames(projectcss.all, sty.socialMediaPost, {
              [sty.socialMediaPost__readMore]: hasVariant(
                variants,
                "readMore",
                "readMore"
              )
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"heading"}
              data-plasmic-override={overrides.heading}
              hasGap={true}
              className={classNames(projectcss.all, sty.heading)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__hBA1)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"40px" as const}
                    loading={"lazy" as const}
                  />
                ),

                value: args.avatar
              })}

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(projectcss.all, sty.text, {
                  [sty.text__image2]: hasVariant(variants, "image2", "image2")
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Name",
                  value: args.name,
                  className: classNames(sty.slotTargetName)
                })}

                {p.renderPlasmicSlot({
                  defaultContents: "@username",
                  value: args.username,
                  className: classNames(sty.slotTargetUsername)
                })}
              </div>
            </p.Stack>

            {p.renderPlasmicSlot({
              defaultContents:
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor‚Äù",
              value: args.content,
              className: classNames(sty.slotTargetContent)
            })}

            {(hasVariant(variants, "image2", "image2") ? true : true) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"image"}
                data-plasmic-override={overrides.image}
                hasGap={true}
                className={classNames(projectcss.all, sty.image, {
                  [sty.image__image2]: hasVariant(variants, "image2", "image2")
                })}
              >
                {(hasVariant(variants, "image2", "image2") ? true : false)
                  ? p.renderPlasmicSlot({
                      defaultContents: null,
                      value: args.image
                    })
                  : null}
              </p.Stack>
            ) : null}
            {(hasVariant(variants, "readMore", "readMore") ? true : false)
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <p.PlasmicLink
                      className={classNames(projectcss.a, sty.link__kmT0X)}
                      component={Link}
                      href={"test" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <LinkButton
                        className={classNames(
                          "__wab_instance",
                          sty.linkButton__oJ1E
                        )}
                        icon2={"right" as const}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__guiwr
                            )}
                          >
                            {"Read more"}
                          </div>
                        }
                        noPadding={"noPadding" as const}
                      >
                        <ArrowRightIcon
                          className={classNames(projectcss.all, sty.svg___04NW)}
                          role={"img"}
                        />
                      </LinkButton>
                    </p.PlasmicLink>
                  ),

                  value: args.children
                })
              : null}
          </p.Stack>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "socialMediaPost", "heading", "text", "image"],
  freeBox: ["freeBox", "socialMediaPost", "heading", "text", "image"],
  socialMediaPost: ["socialMediaPost", "heading", "text", "image"],
  heading: ["heading", "text"],
  text: ["text"],
  image: ["image"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  socialMediaPost: "div";
  heading: "div";
  text: "div";
  image: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestimonial__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestimonial__VariantsArgs;
    args?: PlasmicTestimonial__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTestimonial__Fetches;
  } & Omit<PlasmicTestimonial__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestimonial__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTestimonial__ArgProps,
      internalVariantPropNames: PlasmicTestimonial__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTestimonial__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonial";
  } else {
    func.displayName = `PlasmicTestimonial.${nodeName}`;
  }
  return func;
}

export const PlasmicTestimonial = Object.assign(
  // Top-level PlasmicTestimonial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    socialMediaPost: makeNodeComponent("socialMediaPost"),
    heading: makeNodeComponent("heading"),
    text: makeNodeComponent("text"),
    image: makeNodeComponent("image"),

    // Metadata about props expected for PlasmicTestimonial
    internalVariantProps: PlasmicTestimonial__VariantProps,
    internalArgProps: PlasmicTestimonial__ArgProps
  }
);

export default PlasmicTestimonial;
/* prettier-ignore-end */
