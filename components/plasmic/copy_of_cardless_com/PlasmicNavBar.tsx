// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: dmUvLjuuRu2k
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PaddingWrapper from "../../PaddingWrapper"; // plasmic-import: 4i10JAkWDCTW/component
import BrandLogo from "../../BrandLogo"; // plasmic-import: Ih8CO7qIPWwS/component
import LinkButton from "../../LinkButton"; // plasmic-import: exoHRHBB2Jd8/component
import CardMenu from "../../CardMenu"; // plasmic-import: G3VsH9kXpX86/component
import NavButton from "../../NavButton"; // plasmic-import: s0OJmmocqt8k/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicNavBar.module.css"; // plasmic-import: dmUvLjuuRu2k/css

import Layer2Icon from "./icons/PlasmicIcon__Layer2"; // plasmic-import: lVtrwuoOsRsie/icon
import Layer5Icon from "./icons/PlasmicIcon__Layer5"; // plasmic-import: Luogki9oRANaD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: G6TAXD3Tu3z00/icon
import Close3Icon from "./icons/PlasmicIcon__Close3"; // plasmic-import: ukpz4oFAJU_qY/icon
import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon
import ArrowLeftsvgIcon from "./icons/PlasmicIcon__ArrowLeftsvg"; // plasmic-import: HFKzTRvY984S4/icon

export type PlasmicNavBar__VariantMembers = {
  dark: "dark";
  noCta: "noCta";
  mobileMenuOpen: "mobileMenuOpen";
  branded: "branded";
  cardMenuOpen: "cardMenuOpen";
};

export type PlasmicNavBar__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
  noCta?: SingleBooleanChoiceArg<"noCta">;
  mobileMenuOpen?: SingleBooleanChoiceArg<"mobileMenuOpen">;
  branded?: SingleBooleanChoiceArg<"branded">;
  cardMenuOpen?: SingleBooleanChoiceArg<"cardMenuOpen">;
};

type VariantPropType = keyof PlasmicNavBar__VariantsArgs;
export const PlasmicNavBar__VariantProps = new Array<VariantPropType>(
  "dark",
  "noCta",
  "mobileMenuOpen",
  "branded",
  "cardMenuOpen"
);

export type PlasmicNavBar__ArgsType = {
  brandName?: React.ReactNode;
  ctaDestiination?: string | PageHref;
  brandLogo?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavBar__ArgsType;
export const PlasmicNavBar__ArgProps = new Array<ArgPropType>(
  "brandName",
  "ctaDestiination",
  "brandLogo"
);

export type PlasmicNavBar__OverridesType = {
  navBar?: p.Flex<"nav">;
  paddingWrapper?: p.Flex<typeof PaddingWrapper>;
  wrapper?: p.Flex<"div">;
  logos?: p.Flex<"div">;
  standard?: p.Flex<"a"> & Partial<LinkProps>;
  standardLogo?: p.Flex<"svg">;
  branded?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  miniCardlessLogo2?: p.Flex<"svg">;
  openMenuButton?: p.Flex<"svg">;
  closeMenuButton?: p.Flex<"svg">;
  links?: p.Flex<"div">;
  homeButton?: p.Flex<typeof LinkButton>;
  rewardsButton?: p.Flex<typeof LinkButton>;
  label3?: p.Flex<"div">;
  aboutButton?: p.Flex<typeof LinkButton>;
  label4?: p.Flex<"div">;
  cardsButton?: p.Flex<typeof LinkButton>;
  label5?: p.Flex<"div">;
  cardMenu?: p.Flex<typeof CardMenu>;
  forBrandsButton?: p.Flex<typeof LinkButton>;
  careersButton?: p.Flex<typeof LinkButton>;
  cta?: p.Flex<"div">;
  ctaButton?: p.Flex<typeof NavButton>;
  text?: p.Flex<"div">;
};

export interface DefaultNavBarProps {
  brandName?: React.ReactNode;
  ctaDestiination?: string | PageHref;
  brandLogo?: React.ReactNode;
  dark?: SingleBooleanChoiceArg<"dark">;
  noCta?: SingleBooleanChoiceArg<"noCta">;
  mobileMenuOpen?: SingleBooleanChoiceArg<"mobileMenuOpen">;
  branded?: SingleBooleanChoiceArg<"branded">;
  cardMenuOpen?: SingleBooleanChoiceArg<"cardMenuOpen">;
  className?: string;
}

function PlasmicNavBar__RenderFunc(props: {
  variants: PlasmicNavBar__VariantsArgs;
  args: PlasmicNavBar__ArgsType;
  overrides: PlasmicNavBar__OverridesType;
  dataFetches?: PlasmicNavBar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.Stack
      as={"nav"}
      data-plasmic-name={"navBar"}
      data-plasmic-override={overrides.navBar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.navBar, {
        [sty.navBar__branded]: hasVariant(variants, "branded", "branded"),
        [sty.navBar__cardMenuOpen]: hasVariant(
          variants,
          "cardMenuOpen",
          "cardMenuOpen"
        ),
        [sty.navBar__cardMenuOpen_dark]:
          hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
          hasVariant(variants, "dark", "dark"),
        [sty.navBar__dark]: hasVariant(variants, "dark", "dark"),
        [sty.navBar__dark_branded]:
          hasVariant(variants, "dark", "dark") &&
          hasVariant(variants, "branded", "branded"),
        [sty.navBar__dark_mobileMenuOpen]:
          hasVariant(variants, "dark", "dark") &&
          hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen"),
        [sty.navBar__dark_mobileMenuOpen_branded]:
          hasVariant(variants, "dark", "dark") &&
          hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
          hasVariant(variants, "branded", "branded"),
        [sty.navBar__mobileMenuOpen]: hasVariant(
          variants,
          "mobileMenuOpen",
          "mobileMenuOpen"
        ),
        [sty.navBar__noCta]: hasVariant(variants, "noCta", "noCta"),
        [sty.navBar__noCta_dark]:
          hasVariant(variants, "noCta", "noCta") &&
          hasVariant(variants, "dark", "dark"),
        [sty.navBar__noCta_dark_mobileMenuOpen]:
          hasVariant(variants, "noCta", "noCta") &&
          hasVariant(variants, "dark", "dark") &&
          hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen")
      })}
    >
      <PaddingWrapper
        data-plasmic-name={"paddingWrapper"}
        data-plasmic-override={overrides.paddingWrapper}
        className={classNames("__wab_instance", sty.paddingWrapper, {
          [sty.paddingWrapper__branded]: hasVariant(
            variants,
            "branded",
            "branded"
          ),
          [sty.paddingWrapper__cardMenuOpen]: hasVariant(
            variants,
            "cardMenuOpen",
            "cardMenuOpen"
          ),
          [sty.paddingWrapper__cardMenuOpen_dark]:
            hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
            hasVariant(variants, "dark", "dark"),
          [sty.paddingWrapper__dark]: hasVariant(variants, "dark", "dark"),
          [sty.paddingWrapper__dark_branded]:
            hasVariant(variants, "dark", "dark") &&
            hasVariant(variants, "branded", "branded"),
          [sty.paddingWrapper__mobileMenuOpen_dark]:
            hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
            hasVariant(variants, "dark", "dark"),
          [sty.paddingWrapper__noCta_dark_mobileMenuOpen]:
            hasVariant(variants, "noCta", "noCta") &&
            hasVariant(variants, "dark", "dark") &&
            hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen")
        })}
      >
        {(
          hasVariant(variants, "dark", "dark") &&
          hasVariant(globalVariants, "screen", "tablet")
            ? true
            : true
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            hasGap={true}
            className={classNames(projectcss.all, sty.wrapper, {
              [sty.wrapper__cardMenuOpen]: hasVariant(
                variants,
                "cardMenuOpen",
                "cardMenuOpen"
              ),
              [sty.wrapper__cardMenuOpen_dark]:
                hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                hasVariant(variants, "dark", "dark"),
              [sty.wrapper__dark]: hasVariant(variants, "dark", "dark"),
              [sty.wrapper__dark_branded]:
                hasVariant(variants, "dark", "dark") &&
                hasVariant(variants, "branded", "branded"),
              [sty.wrapper__dark_mobileMenuOpen]:
                hasVariant(variants, "dark", "dark") &&
                hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen"),
              [sty.wrapper__dark_mobileMenuOpen_branded]:
                hasVariant(variants, "dark", "dark") &&
                hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                hasVariant(variants, "branded", "branded"),
              [sty.wrapper__mobileMenuOpen]: hasVariant(
                variants,
                "mobileMenuOpen",
                "mobileMenuOpen"
              )
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"logos"}
              data-plasmic-override={overrides.logos}
              hasGap={true}
              className={classNames(projectcss.all, sty.logos, "" as const, {
                [sty.logos__branded]: hasVariant(
                  variants,
                  "branded",
                  "branded"
                ),
                [sty.logos__cardMenuOpen]: hasVariant(
                  variants,
                  "cardMenuOpen",
                  "cardMenuOpen"
                ),
                [sty.logos__dark]: hasVariant(variants, "dark", "dark"),
                [sty.logos__dark_branded]:
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "branded", "branded"),
                [sty.logos__dark_mobileMenuOpen]:
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen"),
                [sty.logos__dark_noCta]:
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "noCta", "noCta"),
                [sty.logos__mobileMenuOpen]: hasVariant(
                  variants,
                  "mobileMenuOpen",
                  "mobileMenuOpen"
                ),
                [sty.logos__noCta]: hasVariant(variants, "noCta", "noCta")
              })}
            >
              {(hasVariant(variants, "branded", "branded") ? true : true) ? (
                <p.PlasmicLink
                  data-plasmic-name={"standard"}
                  data-plasmic-override={overrides.standard}
                  className={classNames(projectcss.a, sty.standard, {
                    [sty.standard__branded]: hasVariant(
                      variants,
                      "branded",
                      "branded"
                    ),
                    [sty.standard__dark]: hasVariant(variants, "dark", "dark")
                  })}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {(
                    hasVariant(variants, "branded", "branded") ? true : true
                  ) ? (
                    <Layer2Icon
                      data-plasmic-name={"standardLogo"}
                      data-plasmic-override={overrides.standardLogo}
                      className={classNames(projectcss.all, sty.standardLogo, {
                        [sty.standardLogo__branded]: hasVariant(
                          variants,
                          "branded",
                          "branded"
                        ),
                        [sty.standardLogo__dark]: hasVariant(
                          variants,
                          "dark",
                          "dark"
                        ),
                        [sty.standardLogo__dark_mobileMenuOpen]:
                          hasVariant(variants, "dark", "dark") &&
                          hasVariant(
                            variants,
                            "mobileMenuOpen",
                            "mobileMenuOpen"
                          ),
                        [sty.standardLogo__dark_noCta]:
                          hasVariant(variants, "dark", "dark") &&
                          hasVariant(variants, "noCta", "noCta"),
                        [sty.standardLogo__mobileMenuOpen]: hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        )
                      })}
                      role={"img"}
                    />
                  ) : null}
                </p.PlasmicLink>
              ) : null}
              {(
                hasVariant(variants, "branded", "branded")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopSmall")
                  ? true
                  : false
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"branded"}
                  data-plasmic-override={overrides.branded}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.branded, {
                    [sty.branded__branded]: hasVariant(
                      variants,
                      "branded",
                      "branded"
                    ),
                    [sty.branded__cardMenuOpen]: hasVariant(
                      variants,
                      "cardMenuOpen",
                      "cardMenuOpen"
                    ),
                    [sty.branded__dark_branded]:
                      hasVariant(variants, "dark", "dark") &&
                      hasVariant(variants, "branded", "branded"),
                    [sty.branded__dark_mobileMenuOpen_branded]:
                      hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(variants, "branded", "branded")
                  })}
                >
                  {(
                    hasVariant(variants, "branded", "branded") ? true : true
                  ) ? (
                    <p.PlasmicLink
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(projectcss.a, sty.link, {
                        [sty.link__branded]: hasVariant(
                          variants,
                          "branded",
                          "branded"
                        )
                      })}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {(
                        hasVariant(variants, "branded", "branded") ? true : true
                      ) ? (
                        <Layer5Icon
                          data-plasmic-name={"miniCardlessLogo2"}
                          data-plasmic-override={overrides.miniCardlessLogo2}
                          className={classNames(
                            projectcss.all,
                            sty.miniCardlessLogo2,
                            {
                              [sty.miniCardlessLogo2__branded]: hasVariant(
                                variants,
                                "branded",
                                "branded"
                              ),
                              [sty.miniCardlessLogo2__dark_branded]:
                                hasVariant(variants, "dark", "dark") &&
                                hasVariant(variants, "branded", "branded")
                            }
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.PlasmicLink>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox__owZd, {
                      [sty.freeBox__branded__owZdy3KTh]: hasVariant(
                        variants,
                        "branded",
                        "branded"
                      ),
                      [sty.freeBox__dark_branded__owZdCe6MeY3KTh]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(variants, "branded", "branded")
                    })}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__m79Ay, {
                      [sty.freeBox__branded__m79AYy3KTh]: hasVariant(
                        variants,
                        "branded",
                        "branded"
                      ),
                      [sty.freeBox__dark__m79AyCe6Me]: hasVariant(
                        variants,
                        "dark",
                        "dark"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <BrandLogo
                          className={classNames(
                            "__wab_instance",
                            sty.brandLogo__uVhC8
                          )}
                          logos={"cavs" as const}
                        />
                      ),

                      value: args.brandLogo
                    })}
                  </div>

                  {(
                    hasVariant(variants, "dark", "dark") &&
                    hasVariant(variants, "branded", "branded") &&
                    hasVariant(globalVariants, "screen", "laptopSmall")
                      ? false
                      : true
                  )
                    ? p.renderPlasmicSlot({
                        defaultContents: "Manchester United",
                        value: args.brandName,
                        className: classNames(sty.slotTargetBrandName, {
                          [sty.slotTargetBrandName__branded]: hasVariant(
                            variants,
                            "branded",
                            "branded"
                          ),
                          [sty.slotTargetBrandName__dark_branded]:
                            hasVariant(variants, "dark", "dark") &&
                            hasVariant(variants, "branded", "branded")
                        })
                      })
                    : null}
                </p.Stack>
              ) : null}
              {(
                hasVariant(variants, "dark", "dark") &&
                hasVariant(variants, "branded", "branded") &&
                hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                    hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen")
                  ? true
                  : hasVariant(variants, "dark", "dark") &&
                    hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : hasVariant(variants, "dark", "dark")
                  ? true
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___8Ip9A, {
                    [sty.freeBox__branded___8Ip9Ay3KTh]: hasVariant(
                      variants,
                      "branded",
                      "branded"
                    ),
                    [sty.freeBox__branded_dark___8Ip9Ay3KThCe6Me]:
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(variants, "dark", "dark"),
                    [sty.freeBox__cardMenuOpen___8Ip9AHjXsn]: hasVariant(
                      variants,
                      "cardMenuOpen",
                      "cardMenuOpen"
                    ),
                    [sty.freeBox__dark___8Ip9ACe6Me]: hasVariant(
                      variants,
                      "dark",
                      "dark"
                    ),
                    [sty.freeBox__dark_mobileMenuOpen___8Ip9ACe6Me79BhA]:
                      hasVariant(variants, "dark", "dark") &&
                      hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen"),
                    [sty.freeBox__dark_mobileMenuOpen_branded___8Ip9ACe6Me79BhAY3KTh]:
                      hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(variants, "branded", "branded"),
                    [sty.freeBox__dark_noCta___8Ip9ACe6MeU22J1]:
                      hasVariant(variants, "dark", "dark") &&
                      hasVariant(variants, "noCta", "noCta"),
                    [sty.freeBox__mobileMenuOpen___8Ip9A79BhA]: hasVariant(
                      variants,
                      "mobileMenuOpen",
                      "mobileMenuOpen"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "dark", "dark") &&
                    hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                    hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ) && hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen")
                      ? true
                      : hasVariant(variants, "dark", "dark") &&
                        hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicIcon
                      data-plasmic-name={"openMenuButton"}
                      data-plasmic-override={overrides.openMenuButton}
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "tabletSmall")
                          ? IconIcon
                          : hasVariant(globalVariants, "screen", "tablet")
                          ? IconIcon
                          : IconIcon
                      }
                      className={classNames(
                        projectcss.all,
                        sty.openMenuButton,
                        hasVariant(globalVariants, "screen", "tablet")
                          ? ("navOpen" as const)
                          : ("navOpen" as const),
                        {
                          [sty.openMenuButton__branded]: hasVariant(
                            variants,
                            "branded",
                            "branded"
                          ),
                          [sty.openMenuButton__dark]: hasVariant(
                            variants,
                            "dark",
                            "dark"
                          ),
                          [sty.openMenuButton__dark_branded]:
                            hasVariant(variants, "dark", "dark") &&
                            hasVariant(variants, "branded", "branded"),
                          [sty.openMenuButton__dark_noCta]:
                            hasVariant(variants, "dark", "dark") &&
                            hasVariant(variants, "noCta", "noCta"),
                          [sty.openMenuButton__mobileMenuOpen]: hasVariant(
                            variants,
                            "mobileMenuOpen",
                            "mobileMenuOpen"
                          )
                        }
                      )}
                      role={"img"}
                    />
                  ) : null}
                  {(
                    hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                    hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={Close3Icon}
                      data-plasmic-name={"closeMenuButton"}
                      data-plasmic-override={overrides.closeMenuButton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.closeMenuButton,
                        "navClose" as const,
                        {
                          [sty.closeMenuButton__dark]: hasVariant(
                            variants,
                            "dark",
                            "dark"
                          ),
                          [sty.closeMenuButton__dark_mobileMenuOpen]:
                            hasVariant(variants, "dark", "dark") &&
                            hasVariant(
                              variants,
                              "mobileMenuOpen",
                              "mobileMenuOpen"
                            ),
                          [sty.closeMenuButton__mobileMenuOpen]: hasVariant(
                            variants,
                            "mobileMenuOpen",
                            "mobileMenuOpen"
                          )
                        }
                      )}
                      role={"img"}
                    />
                  ) : null}
                </div>
              ) : null}
            </p.Stack>

            {(
              hasVariant(variants, "dark", "dark") &&
              hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
              hasVariant(variants, "branded", "branded") &&
              hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "branded", "branded") &&
                  hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                  hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(variants, "dark", "dark") &&
                  hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"links"}
                data-plasmic-override={overrides.links}
                hasGap={true}
                className={classNames(projectcss.all, sty.links, {
                  [sty.links__branded]: hasVariant(
                    variants,
                    "branded",
                    "branded"
                  ),
                  [sty.links__cardMenuOpen]: hasVariant(
                    variants,
                    "cardMenuOpen",
                    "cardMenuOpen"
                  ),
                  [sty.links__cardMenuOpen_dark]:
                    hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                    hasVariant(variants, "dark", "dark"),
                  [sty.links__dark]: hasVariant(variants, "dark", "dark"),
                  [sty.links__dark_branded]:
                    hasVariant(variants, "dark", "dark") &&
                    hasVariant(variants, "branded", "branded"),
                  [sty.links__dark_mobileMenuOpen]:
                    hasVariant(variants, "dark", "dark") &&
                    hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen"),
                  [sty.links__dark_mobileMenuOpen_branded]:
                    hasVariant(variants, "dark", "dark") &&
                    hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                    hasVariant(variants, "branded", "branded"),
                  [sty.links__mobileMenuOpen]: hasVariant(
                    variants,
                    "mobileMenuOpen",
                    "mobileMenuOpen"
                  ),
                  [sty.links__noCta]: hasVariant(variants, "noCta", "noCta"),
                  [sty.links__noCta_dark_mobileMenuOpen]:
                    hasVariant(variants, "noCta", "noCta") &&
                    hasVariant(variants, "dark", "dark") &&
                    hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen")
                })}
              >
                {(
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(variants, "branded", "branded") &&
                  hasVariant(globalVariants, "screen", "mobile")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(globalVariants, "screen", "tabletSmall")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "branded", "branded")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                ) ? (
                  <LinkButton
                    data-plasmic-name={"homeButton"}
                    data-plasmic-override={overrides.homeButton}
                    className={classNames("__wab_instance", sty.homeButton, {
                      [sty.homeButton__branded]: hasVariant(
                        variants,
                        "branded",
                        "branded"
                      ),
                      [sty.homeButton__branded_dark]:
                        hasVariant(variants, "branded", "branded") &&
                        hasVariant(variants, "dark", "dark"),
                      [sty.homeButton__dark]: hasVariant(
                        variants,
                        "dark",
                        "dark"
                      ),
                      [sty.homeButton__dark_mobileMenuOpen]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ),
                      [sty.homeButton__dark_mobileMenuOpen_branded]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ) &&
                        hasVariant(variants, "branded", "branded"),
                      [sty.homeButton__mobileMenuOpen]: hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      )
                    })}
                    dark={
                      hasVariant(variants, "dark", "dark")
                        ? ("dark" as const)
                        : undefined
                    }
                    destination={"/" as const}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__szTte,
                          {
                            [sty.text__dark_mobileMenuOpen__szTteCe6Me79BhA]:
                              hasVariant(variants, "dark", "dark") &&
                              hasVariant(
                                variants,
                                "mobileMenuOpen",
                                "mobileMenuOpen"
                              )
                          }
                        )}
                      >
                        {"Home"}
                      </div>
                    }
                  >
                    {(
                      hasVariant(variants, "dark", "dark") &&
                      hasVariant(globalVariants, "screen", "tablet")
                        ? true
                        : true
                    ) ? (
                      <ArrowRightIcon
                        className={classNames(projectcss.all, sty.svg__roDxt)}
                        role={"img"}
                      />
                    ) : null}
                  </LinkButton>
                ) : null}
                {(
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(variants, "branded", "branded") &&
                  hasVariant(globalVariants, "screen", "mobile")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(globalVariants, "screen", "tabletSmall")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "branded", "branded")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                ) ? (
                  <LinkButton
                    data-plasmic-name={"rewardsButton"}
                    data-plasmic-override={overrides.rewardsButton}
                    className={classNames("__wab_instance", sty.rewardsButton, {
                      [sty.rewardsButton__branded]: hasVariant(
                        variants,
                        "branded",
                        "branded"
                      ),
                      [sty.rewardsButton__dark]: hasVariant(
                        variants,
                        "dark",
                        "dark"
                      ),
                      [sty.rewardsButton__dark_mobileMenuOpen]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ),
                      [sty.rewardsButton__mobileMenuOpen]: hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      )
                    })}
                    dark={
                      hasVariant(variants, "dark", "dark")
                        ? ("dark" as const)
                        : undefined
                    }
                    destination={"#rewards" as const}
                    label={
                      <div
                        data-plasmic-name={"label3"}
                        data-plasmic-override={overrides.label3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.label3,
                          {
                            [sty.label3__dark_mobileMenuOpen]:
                              hasVariant(variants, "dark", "dark") &&
                              hasVariant(
                                variants,
                                "mobileMenuOpen",
                                "mobileMenuOpen"
                              )
                          }
                        )}
                      >
                        {"Rewards"}
                      </div>
                    }
                  />
                ) : null}
                {(
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(variants, "branded", "branded") &&
                  hasVariant(globalVariants, "screen", "mobile")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(globalVariants, "screen", "tabletSmall")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(variants, "branded", "branded") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "branded", "branded")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                ) ? (
                  <LinkButton
                    data-plasmic-name={"aboutButton"}
                    data-plasmic-override={overrides.aboutButton}
                    className={classNames("__wab_instance", sty.aboutButton, {
                      [sty.aboutButton__branded]: hasVariant(
                        variants,
                        "branded",
                        "branded"
                      ),
                      [sty.aboutButton__dark]: hasVariant(
                        variants,
                        "dark",
                        "dark"
                      ),
                      [sty.aboutButton__dark_branded]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(variants, "branded", "branded"),
                      [sty.aboutButton__dark_mobileMenuOpen]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ),
                      [sty.aboutButton__dark_mobileMenuOpen_branded]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ) &&
                        hasVariant(variants, "branded", "branded"),
                      [sty.aboutButton__mobileMenuOpen]: hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      )
                    })}
                    dark={
                      hasVariant(variants, "dark", "dark")
                        ? ("dark" as const)
                        : undefined
                    }
                    destination={"#about" as const}
                    label={
                      <div
                        data-plasmic-name={"label4"}
                        data-plasmic-override={overrides.label4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.label4,
                          {
                            [sty.label4__dark_branded]:
                              hasVariant(variants, "dark", "dark") &&
                              hasVariant(variants, "branded", "branded"),
                            [sty.label4__dark_mobileMenuOpen]:
                              hasVariant(variants, "dark", "dark") &&
                              hasVariant(
                                variants,
                                "mobileMenuOpen",
                                "mobileMenuOpen"
                              )
                          }
                        )}
                      >
                        {"About"}
                      </div>
                    }
                  />
                ) : null}
                {(
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(variants, "branded", "branded") &&
                  hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "noCta", "noCta") &&
                      hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "branded", "branded")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                ) ? (
                  <LinkButton
                    data-plasmic-name={"cardsButton"}
                    data-plasmic-override={overrides.cardsButton}
                    className={classNames("__wab_instance", sty.cardsButton, {
                      [sty.cardsButton__branded]: hasVariant(
                        variants,
                        "branded",
                        "branded"
                      ),
                      [sty.cardsButton__cardMenuOpen]: hasVariant(
                        variants,
                        "cardMenuOpen",
                        "cardMenuOpen"
                      ),
                      [sty.cardsButton__cardMenuOpen_dark]:
                        hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                        hasVariant(variants, "dark", "dark"),
                      [sty.cardsButton__dark]: hasVariant(
                        variants,
                        "dark",
                        "dark"
                      ),
                      [sty.cardsButton__dark_mobileMenuOpen]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ),
                      [sty.cardsButton__dark_mobileMenuOpen_branded]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ) &&
                        hasVariant(variants, "branded", "branded"),
                      [sty.cardsButton__mobileMenuOpen]: hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ),
                      [sty.cardsButton__noCta_dark]:
                        hasVariant(variants, "noCta", "noCta") &&
                        hasVariant(variants, "dark", "dark"),
                      [sty.cardsButton__noCta_dark_mobileMenuOpen]:
                        hasVariant(variants, "noCta", "noCta") &&
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen")
                    })}
                    dark={
                      hasVariant(variants, "dark", "dark")
                        ? ("dark" as const)
                        : undefined
                    }
                    icon2={
                      hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                      hasVariant(globalVariants, "screen", "tablet")
                        ? ("left" as const)
                        : hasVariant(
                            variants,
                            "mobileMenuOpen",
                            "mobileMenuOpen"
                          ) && hasVariant(globalVariants, "screen", "tablet")
                        ? ("right" as const)
                        : undefined
                    }
                    id={"cards" as const}
                    label={
                      <div
                        data-plasmic-name={"label5"}
                        data-plasmic-override={overrides.label5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.label5,
                          hasVariant(variants, "cardMenuOpen", "cardMenuOpen")
                            ? ("" as const)
                            : undefined,
                          {
                            [sty.label5__cardMenuOpen]: hasVariant(
                              variants,
                              "cardMenuOpen",
                              "cardMenuOpen"
                            ),
                            [sty.label5__cardMenuOpen_dark]:
                              hasVariant(
                                variants,
                                "cardMenuOpen",
                                "cardMenuOpen"
                              ) && hasVariant(variants, "dark", "dark"),
                            [sty.label5__dark]: hasVariant(
                              variants,
                              "dark",
                              "dark"
                            ),
                            [sty.label5__dark_mobileMenuOpen]:
                              hasVariant(variants, "dark", "dark") &&
                              hasVariant(
                                variants,
                                "mobileMenuOpen",
                                "mobileMenuOpen"
                              ),
                            [sty.label5__mobileMenuOpen]: hasVariant(
                              variants,
                              "mobileMenuOpen",
                              "mobileMenuOpen"
                            )
                          }
                        )}
                      >
                        {"Cards"}
                      </div>
                    }
                  >
                    <p.PlasmicIcon
                      PlasmicIconType={
                        hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                        hasVariant(globalVariants, "screen", "tablet")
                          ? ArrowLeftsvgIcon
                          : hasVariant(
                              variants,
                              "mobileMenuOpen",
                              "mobileMenuOpen"
                            ) && hasVariant(globalVariants, "screen", "tablet")
                          ? ArrowRightIcon
                          : ArrowRightIcon
                      }
                      className={classNames(projectcss.all, sty.svg__n4HKe, {
                        [sty.svg__cardMenuOpen__n4HKeHjXsn]: hasVariant(
                          variants,
                          "cardMenuOpen",
                          "cardMenuOpen"
                        ),
                        [sty.svg__cardMenuOpen_dark__n4HKeHjXsnCe6Me]:
                          hasVariant(
                            variants,
                            "cardMenuOpen",
                            "cardMenuOpen"
                          ) && hasVariant(variants, "dark", "dark"),
                        [sty.svg__mobileMenuOpen__n4HKe79BhA]: hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        )
                      })}
                      role={"img"}
                    />
                  </LinkButton>
                ) : null}
                {(
                  hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                  hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "cardMenuOpen", "cardMenuOpen")
                    ? true
                    : hasVariant(variants, "dark", "dark")
                    ? true
                    : true
                ) ? (
                  <CardMenu
                    data-plasmic-name={"cardMenu"}
                    data-plasmic-override={overrides.cardMenu}
                    className={classNames("__wab_instance", sty.cardMenu, {
                      [sty.cardMenu__cardMenuOpen]: hasVariant(
                        variants,
                        "cardMenuOpen",
                        "cardMenuOpen"
                      ),
                      [sty.cardMenu__cardMenuOpen_dark]:
                        hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                        hasVariant(variants, "dark", "dark"),
                      [sty.cardMenu__dark]: hasVariant(variants, "dark", "dark")
                    })}
                    darkMode={
                      hasVariant(variants, "dark", "dark")
                        ? ("darkMode" as const)
                        : undefined
                    }
                  />
                ) : null}
                {(
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(variants, "branded", "branded") &&
                  hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "noCta", "noCta") &&
                      hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "branded", "branded")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                ) ? (
                  <LinkButton
                    data-plasmic-name={"forBrandsButton"}
                    data-plasmic-override={overrides.forBrandsButton}
                    className={classNames(
                      "__wab_instance",
                      sty.forBrandsButton,
                      {
                        [sty.forBrandsButton__branded]: hasVariant(
                          variants,
                          "branded",
                          "branded"
                        ),
                        [sty.forBrandsButton__cardMenuOpen]: hasVariant(
                          variants,
                          "cardMenuOpen",
                          "cardMenuOpen"
                        ),
                        [sty.forBrandsButton__dark]: hasVariant(
                          variants,
                          "dark",
                          "dark"
                        ),
                        [sty.forBrandsButton__dark_mobileMenuOpen_branded]:
                          hasVariant(variants, "dark", "dark") &&
                          hasVariant(
                            variants,
                            "mobileMenuOpen",
                            "mobileMenuOpen"
                          ) &&
                          hasVariant(variants, "branded", "branded"),
                        [sty.forBrandsButton__mobileMenuOpen]: hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ),
                        [sty.forBrandsButton__noCta_dark]:
                          hasVariant(variants, "noCta", "noCta") &&
                          hasVariant(variants, "dark", "dark"),
                        [sty.forBrandsButton__noCta_dark_mobileMenuOpen]:
                          hasVariant(variants, "noCta", "noCta") &&
                          hasVariant(variants, "dark", "dark") &&
                          hasVariant(
                            variants,
                            "mobileMenuOpen",
                            "mobileMenuOpen"
                          )
                      }
                    )}
                    dark={
                      hasVariant(variants, "dark", "dark")
                        ? ("dark" as const)
                        : undefined
                    }
                    destination={"/for-brands" as const}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nbdjp,
                          {
                            [sty.text__dark_mobileMenuOpen__nbdjpCe6Me79BhA]:
                              hasVariant(variants, "dark", "dark") &&
                              hasVariant(
                                variants,
                                "mobileMenuOpen",
                                "mobileMenuOpen"
                              ),
                            [sty.text__mobileMenuOpen__nbdjp79BhA]: hasVariant(
                              variants,
                              "mobileMenuOpen",
                              "mobileMenuOpen"
                            )
                          }
                        )}
                      >
                        {"For Brands"}
                      </div>
                    }
                  />
                ) : null}
                {(
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(variants, "branded", "branded") &&
                  hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "noCta", "noCta") &&
                      hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ) &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "branded", "branded")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                ) ? (
                  <LinkButton
                    data-plasmic-name={"careersButton"}
                    data-plasmic-override={overrides.careersButton}
                    className={classNames("__wab_instance", sty.careersButton, {
                      [sty.careersButton__branded]: hasVariant(
                        variants,
                        "branded",
                        "branded"
                      ),
                      [sty.careersButton__dark]: hasVariant(
                        variants,
                        "dark",
                        "dark"
                      ),
                      [sty.careersButton__dark_mobileMenuOpen_branded]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(
                          variants,
                          "mobileMenuOpen",
                          "mobileMenuOpen"
                        ) &&
                        hasVariant(variants, "branded", "branded"),
                      [sty.careersButton__mobileMenuOpen]: hasVariant(
                        variants,
                        "mobileMenuOpen",
                        "mobileMenuOpen"
                      ),
                      [sty.careersButton__noCta_dark]:
                        hasVariant(variants, "noCta", "noCta") &&
                        hasVariant(variants, "dark", "dark"),
                      [sty.careersButton__noCta_dark_mobileMenuOpen]:
                        hasVariant(variants, "noCta", "noCta") &&
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen")
                    })}
                    dark={
                      hasVariant(variants, "dark", "dark")
                        ? ("dark" as const)
                        : undefined
                    }
                    destination={"/careers" as const}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cf5Jw,
                          {
                            [sty.text__dark__cf5JwCe6Me]: hasVariant(
                              variants,
                              "dark",
                              "dark"
                            ),
                            [sty.text__mobileMenuOpen__cf5Jw79BhA]: hasVariant(
                              variants,
                              "mobileMenuOpen",
                              "mobileMenuOpen"
                            )
                          }
                        )}
                      >
                        {"Careers"}
                      </div>
                    }
                  />
                ) : null}
              </p.Stack>
            ) : null}
            {(
              hasVariant(variants, "dark", "dark") &&
              hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
              hasVariant(variants, "branded", "branded") &&
              hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "branded", "branded") &&
                  hasVariant(globalVariants, "screen", "tablet")
                ? false
                : hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(variants, "cardMenuOpen", "cardMenuOpen") &&
                  hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(variants, "noCta", "noCta")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? false
                : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"cta"}
                data-plasmic-override={overrides.cta}
                hasGap={true}
                className={classNames(projectcss.all, sty.cta, {
                  [sty.cta__dark]: hasVariant(variants, "dark", "dark"),
                  [sty.cta__dark_mobileMenuOpen]:
                    hasVariant(variants, "dark", "dark") &&
                    hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen"),
                  [sty.cta__noCta]: hasVariant(variants, "noCta", "noCta")
                })}
              >
                {(
                  hasVariant(variants, "dark", "dark") &&
                  hasVariant(variants, "mobileMenuOpen", "mobileMenuOpen") &&
                  hasVariant(variants, "branded", "branded") &&
                  hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(variants, "dark", "dark") &&
                      hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                ) ? (
                  <NavButton
                    data-plasmic-name={"ctaButton"}
                    data-plasmic-override={overrides.ctaButton}
                    className={classNames("__wab_instance", sty.ctaButton, {
                      [sty.ctaButton__branded]: hasVariant(
                        variants,
                        "branded",
                        "branded"
                      ),
                      [sty.ctaButton__dark]: hasVariant(
                        variants,
                        "dark",
                        "dark"
                      ),
                      [sty.ctaButton__dark_branded]:
                        hasVariant(variants, "dark", "dark") &&
                        hasVariant(variants, "branded", "branded")
                    })}
                    destination={
                      args.ctaDestiination !== undefined
                        ? args.ctaDestiination
                        : ("/login" as const)
                    }
                    labelIcon={
                      hasVariant(variants, "branded", "branded")
                        ? undefined
                        : hasVariant(variants, "dark", "dark")
                        ? ("labelIcon" as const)
                        : ("labelIcon" as const)
                    }
                    slot={
                      true ? (
                        <ArrowRightIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg__etXet,
                            {
                              [sty.svg__dark__etXetCe6Me]: hasVariant(
                                variants,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                          role={"img"}
                        />
                      ) : null
                    }
                    small={"small" as const}
                    type={
                      hasVariant(variants, "dark", "dark")
                        ? ("darkMode" as const)
                        : ("primary" as const)
                    }
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text,
                        {
                          [sty.text__branded]: hasVariant(
                            variants,
                            "branded",
                            "branded"
                          ),
                          [sty.text__dark]: hasVariant(variants, "dark", "dark")
                        }
                      )}
                    >
                      {hasVariant(variants, "branded", "branded")
                        ? "Apply"
                        : hasVariant(variants, "dark", "dark")
                        ? "Sign In"
                        : "Sign in"}
                    </div>
                  </NavButton>
                ) : null}
              </p.Stack>
            ) : null}
          </p.Stack>
        ) : null}
      </PaddingWrapper>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navBar: [
    "navBar",
    "paddingWrapper",
    "wrapper",
    "logos",
    "standard",
    "standardLogo",
    "branded",
    "link",
    "miniCardlessLogo2",
    "openMenuButton",
    "closeMenuButton",
    "links",
    "homeButton",
    "rewardsButton",
    "label3",
    "aboutButton",
    "label4",
    "cardsButton",
    "label5",
    "cardMenu",
    "forBrandsButton",
    "careersButton",
    "cta",
    "ctaButton",
    "text"
  ],
  paddingWrapper: [
    "paddingWrapper",
    "wrapper",
    "logos",
    "standard",
    "standardLogo",
    "branded",
    "link",
    "miniCardlessLogo2",
    "openMenuButton",
    "closeMenuButton",
    "links",
    "homeButton",
    "rewardsButton",
    "label3",
    "aboutButton",
    "label4",
    "cardsButton",
    "label5",
    "cardMenu",
    "forBrandsButton",
    "careersButton",
    "cta",
    "ctaButton",
    "text"
  ],
  wrapper: [
    "wrapper",
    "logos",
    "standard",
    "standardLogo",
    "branded",
    "link",
    "miniCardlessLogo2",
    "openMenuButton",
    "closeMenuButton",
    "links",
    "homeButton",
    "rewardsButton",
    "label3",
    "aboutButton",
    "label4",
    "cardsButton",
    "label5",
    "cardMenu",
    "forBrandsButton",
    "careersButton",
    "cta",
    "ctaButton",
    "text"
  ],
  logos: [
    "logos",
    "standard",
    "standardLogo",
    "branded",
    "link",
    "miniCardlessLogo2",
    "openMenuButton",
    "closeMenuButton"
  ],
  standard: ["standard", "standardLogo"],
  standardLogo: ["standardLogo"],
  branded: ["branded", "link", "miniCardlessLogo2"],
  link: ["link", "miniCardlessLogo2"],
  miniCardlessLogo2: ["miniCardlessLogo2"],
  openMenuButton: ["openMenuButton"],
  closeMenuButton: ["closeMenuButton"],
  links: [
    "links",
    "homeButton",
    "rewardsButton",
    "label3",
    "aboutButton",
    "label4",
    "cardsButton",
    "label5",
    "cardMenu",
    "forBrandsButton",
    "careersButton"
  ],
  homeButton: ["homeButton"],
  rewardsButton: ["rewardsButton", "label3"],
  label3: ["label3"],
  aboutButton: ["aboutButton", "label4"],
  label4: ["label4"],
  cardsButton: ["cardsButton", "label5"],
  label5: ["label5"],
  cardMenu: ["cardMenu"],
  forBrandsButton: ["forBrandsButton"],
  careersButton: ["careersButton"],
  cta: ["cta", "ctaButton", "text"],
  ctaButton: ["ctaButton", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  navBar: "nav";
  paddingWrapper: typeof PaddingWrapper;
  wrapper: "div";
  logos: "div";
  standard: "a";
  standardLogo: "svg";
  branded: "div";
  link: "a";
  miniCardlessLogo2: "svg";
  openMenuButton: "svg";
  closeMenuButton: "svg";
  links: "div";
  homeButton: typeof LinkButton;
  rewardsButton: typeof LinkButton;
  label3: "div";
  aboutButton: typeof LinkButton;
  label4: "div";
  cardsButton: typeof LinkButton;
  label5: "div";
  cardMenu: typeof CardMenu;
  forBrandsButton: typeof LinkButton;
  careersButton: typeof LinkButton;
  cta: "div";
  ctaButton: typeof NavButton;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar__VariantsArgs;
    args?: PlasmicNavBar__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavBar__Fetches;
  } & Omit<PlasmicNavBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBar__ArgProps,
      internalVariantPropNames: PlasmicNavBar__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "navBar") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("navBar"),
  {
    // Helper components rendering sub-elements
    paddingWrapper: makeNodeComponent("paddingWrapper"),
    wrapper: makeNodeComponent("wrapper"),
    logos: makeNodeComponent("logos"),
    standard: makeNodeComponent("standard"),
    standardLogo: makeNodeComponent("standardLogo"),
    branded: makeNodeComponent("branded"),
    link: makeNodeComponent("link"),
    miniCardlessLogo2: makeNodeComponent("miniCardlessLogo2"),
    openMenuButton: makeNodeComponent("openMenuButton"),
    closeMenuButton: makeNodeComponent("closeMenuButton"),
    links: makeNodeComponent("links"),
    homeButton: makeNodeComponent("homeButton"),
    rewardsButton: makeNodeComponent("rewardsButton"),
    label3: makeNodeComponent("label3"),
    aboutButton: makeNodeComponent("aboutButton"),
    label4: makeNodeComponent("label4"),
    cardsButton: makeNodeComponent("cardsButton"),
    label5: makeNodeComponent("label5"),
    cardMenu: makeNodeComponent("cardMenu"),
    forBrandsButton: makeNodeComponent("forBrandsButton"),
    careersButton: makeNodeComponent("careersButton"),
    cta: makeNodeComponent("cta"),
    ctaButton: makeNodeComponent("ctaButton"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
