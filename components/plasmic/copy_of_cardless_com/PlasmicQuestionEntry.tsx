// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: 2kml7f9QHlfS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicQuestionEntry.module.css"; // plasmic-import: 2kml7f9QHlfS/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon
import CellDivider2Icon from "./icons/PlasmicIcon__CellDivider2"; // plasmic-import: 0yDRGxa6QUnuo/icon

export type PlasmicQuestionEntry__VariantMembers = {
  showAnswer: "showAnswer";
};

export type PlasmicQuestionEntry__VariantsArgs = {
  showAnswer?: SingleBooleanChoiceArg<"showAnswer">;
};

type VariantPropType = keyof PlasmicQuestionEntry__VariantsArgs;
export const PlasmicQuestionEntry__VariantProps = new Array<VariantPropType>(
  "showAnswer"
);

export type PlasmicQuestionEntry__ArgsType = {
  q?: React.ReactNode;
  a?: React.ReactNode;
};

type ArgPropType = keyof PlasmicQuestionEntry__ArgsType;
export const PlasmicQuestionEntry__ArgProps = new Array<ArgPropType>("q", "a");

export type PlasmicQuestionEntry__OverridesType = {
  root?: p.Flex<"div">;
  box?: p.Flex<"div">;
  qa?: p.Flex<"div">;
  clickableHeader?: p.Flex<"div">;
  answerBox?: p.Flex<"div">;
  emptySpace?: p.Flex<"div">;
};

export interface DefaultQuestionEntryProps {
  q?: React.ReactNode;
  a?: React.ReactNode;
  showAnswer?: SingleBooleanChoiceArg<"showAnswer">;
  className?: string;
}

function PlasmicQuestionEntry__RenderFunc(props: {
  variants: PlasmicQuestionEntry__VariantsArgs;
  args: PlasmicQuestionEntry__ArgsType;
  overrides: PlasmicQuestionEntry__OverridesType;
  dataFetches?: PlasmicQuestionEntry__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__showAnswer]: hasVariant(variants, "showAnswer", "showAnswer")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        hasGap={true}
        className={classNames(projectcss.all, sty.box, {
          [sty.box__showAnswer]: hasVariant(
            variants,
            "showAnswer",
            "showAnswer"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"qa"}
          data-plasmic-override={overrides.qa}
          hasGap={true}
          className={classNames(projectcss.all, sty.qa, {
            [sty.qa__showAnswer]: hasVariant(
              variants,
              "showAnswer",
              "showAnswer"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"clickableHeader"}
            data-plasmic-override={overrides.clickableHeader}
            hasGap={true}
            className={classNames(projectcss.all, sty.clickableHeader, {
              [sty.clickableHeader__showAnswer]: hasVariant(
                variants,
                "showAnswer",
                "showAnswer"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__j7DY4, {
                [sty.freeBox__showAnswer__j7DY466UYv]: hasVariant(
                  variants,
                  "showAnswer",
                  "showAnswer"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Question",
                value: args.q,
                className: classNames(sty.slotTargetQ, {
                  [sty.slotTargetQ__showAnswer]: hasVariant(
                    variants,
                    "showAnswer",
                    "showAnswer"
                  )
                })
              })}
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__znn6, {
                [sty.freeBox__showAnswer__znn666UYv]: hasVariant(
                  variants,
                  "showAnswer",
                  "showAnswer"
                )
              })}
            >
              <ArrowRightIcon
                className={classNames(projectcss.all, sty.svg__i7Vzf, {
                  [sty.svg__showAnswer__i7Vzf66UYv]: hasVariant(
                    variants,
                    "showAnswer",
                    "showAnswer"
                  )
                })}
                role={"img"}
              />
            </div>
          </p.Stack>

          {(hasVariant(variants, "showAnswer", "showAnswer") ? true : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"answerBox"}
              data-plasmic-override={overrides.answerBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.answerBox, {
                [sty.answerBox__showAnswer]: hasVariant(
                  variants,
                  "showAnswer",
                  "showAnswer"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Answer",
                value: args.a,
                className: classNames(sty.slotTargetA, {
                  [sty.slotTargetA__showAnswer]: hasVariant(
                    variants,
                    "showAnswer",
                    "showAnswer"
                  )
                })
              })}

              <div className={classNames(projectcss.all, sty.freeBox__zgxxB)}>
                <div
                  data-plasmic-name={"emptySpace"}
                  data-plasmic-override={overrides.emptySpace}
                  className={classNames(projectcss.all, sty.emptySpace)}
                />
              </div>
            </p.Stack>
          ) : null}
        </p.Stack>

        <div
          className={classNames(projectcss.all, sty.freeBox__sQuuj, {
            [sty.freeBox__showAnswer__sQuuj66UYv]: hasVariant(
              variants,
              "showAnswer",
              "showAnswer"
            )
          })}
        >
          <CellDivider2Icon
            className={classNames(projectcss.all, sty.svg___4VuNj)}
            role={"img"}
          />
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "box", "qa", "clickableHeader", "answerBox", "emptySpace"],
  box: ["box", "qa", "clickableHeader", "answerBox", "emptySpace"],
  qa: ["qa", "clickableHeader", "answerBox", "emptySpace"],
  clickableHeader: ["clickableHeader"],
  answerBox: ["answerBox", "emptySpace"],
  emptySpace: ["emptySpace"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  box: "div";
  qa: "div";
  clickableHeader: "div";
  answerBox: "div";
  emptySpace: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuestionEntry__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuestionEntry__VariantsArgs;
    args?: PlasmicQuestionEntry__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicQuestionEntry__Fetches;
  } & Omit<PlasmicQuestionEntry__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicQuestionEntry__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicQuestionEntry__ArgProps,
      internalVariantPropNames: PlasmicQuestionEntry__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicQuestionEntry__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestionEntry";
  } else {
    func.displayName = `PlasmicQuestionEntry.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestionEntry = Object.assign(
  // Top-level PlasmicQuestionEntry renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    qa: makeNodeComponent("qa"),
    clickableHeader: makeNodeComponent("clickableHeader"),
    answerBox: makeNodeComponent("answerBox"),
    emptySpace: makeNodeComponent("emptySpace"),

    // Metadata about props expected for PlasmicQuestionEntry
    internalVariantProps: PlasmicQuestionEntry__VariantProps,
    internalArgProps: PlasmicQuestionEntry__ArgProps
  }
);

export default PlasmicQuestionEntry;
/* prettier-ignore-end */
