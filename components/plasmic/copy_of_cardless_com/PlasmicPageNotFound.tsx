// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: 74ZrtlAwnJgB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavBar } from "../../layout/NavBar"; // plasmic-import: VpJrKbBamu0m/codeComponent
import PaddingWrapper from "../../PaddingWrapper"; // plasmic-import: 4i10JAkWDCTW/component
import NavButton from "../../NavButton"; // plasmic-import: s0OJmmocqt8k/component
import Footer from "../../Footer"; // plasmic-import: 4TDmEKfWsWRr/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicPageNotFound.module.css"; // plasmic-import: 74ZrtlAwnJgB/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon

export type PlasmicPageNotFound__VariantMembers = {};

export type PlasmicPageNotFound__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageNotFound__VariantsArgs;
export const PlasmicPageNotFound__VariantProps = new Array<VariantPropType>();

export type PlasmicPageNotFound__ArgsType = {};
type ArgPropType = keyof PlasmicPageNotFound__ArgsType;
export const PlasmicPageNotFound__ArgProps = new Array<ArgPropType>();

export type PlasmicPageNotFound__OverridesType = {
  root?: p.Flex<"div">;
  navBarCodeComponent?: p.Flex<typeof NavBar>;
  paddingWrapper?: p.Flex<typeof PaddingWrapper>;
  copyDownloadButtons10?: p.Flex<"div">;
  copy13?: p.Flex<"div">;
  heading10?: p.Flex<"div">;
  navButton?: p.Flex<typeof NavButton>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPageNotFoundProps {
  dataFetches: PlasmicPageNotFound__Fetches;
}

function PlasmicPageNotFound__RenderFunc(props: {
  variants: PlasmicPageNotFound__VariantsArgs;
  args: PlasmicPageNotFound__ArgsType;
  overrides: PlasmicPageNotFound__OverridesType;
  dataFetches?: PlasmicPageNotFound__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"404 - Page not found"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"404 - Page not found"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__svkYb)}>
            <NavBar
              data-plasmic-name={"navBarCodeComponent"}
              data-plasmic-override={overrides.navBarCodeComponent}
              className={classNames("__wab_instance", sty.navBarCodeComponent)}
              noCta={true}
            />

            <PaddingWrapper
              data-plasmic-name={"paddingWrapper"}
              data-plasmic-override={overrides.paddingWrapper}
              className={classNames("__wab_instance", sty.paddingWrapper)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ls5CR)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"copyDownloadButtons10"}
                  data-plasmic-override={overrides.copyDownloadButtons10}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.copyDownloadButtons10
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copy13"}
                    data-plasmic-override={overrides.copy13}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.copy13)}
                  >
                    <div
                      data-plasmic-name={"heading10"}
                      data-plasmic-override={overrides.heading10}
                      className={classNames(projectcss.all, sty.heading10)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__keLSs
                        )}
                      >
                        {"404 error"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bhrmX
                        )}
                      >
                        {"Page not found"}
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wQ8Rb
                      )}
                    >
                      {"Looks like the page you're looking for does not exist"}
                    </div>
                  </p.Stack>

                  <NavButton
                    data-plasmic-name={"navButton"}
                    data-plasmic-override={overrides.navButton}
                    className={classNames("__wab_instance", sty.navButton)}
                    destination={"/" as const}
                    type={
                      hasVariant(globalVariants, "screen", "laptopSmall")
                        ? ("secondary" as const)
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? ("secondary" as const)
                        : ("secondary" as const)
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bwAtm
                      )}
                    >
                      {"Home"}
                    </div>
                  </NavButton>
                </p.Stack>
              </div>
            </PaddingWrapper>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBarCodeComponent",
    "paddingWrapper",
    "copyDownloadButtons10",
    "copy13",
    "heading10",
    "navButton",
    "footer"
  ],
  navBarCodeComponent: ["navBarCodeComponent"],
  paddingWrapper: [
    "paddingWrapper",
    "copyDownloadButtons10",
    "copy13",
    "heading10",
    "navButton"
  ],
  copyDownloadButtons10: [
    "copyDownloadButtons10",
    "copy13",
    "heading10",
    "navButton"
  ],
  copy13: ["copy13", "heading10"],
  heading10: ["heading10"],
  navButton: ["navButton"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBarCodeComponent: typeof NavBar;
  paddingWrapper: typeof PaddingWrapper;
  copyDownloadButtons10: "div";
  copy13: "div";
  heading10: "div";
  navButton: typeof NavButton;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageNotFound__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageNotFound__VariantsArgs;
    args?: PlasmicPageNotFound__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPageNotFound__Fetches;
  } & Omit<PlasmicPageNotFound__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPageNotFound__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPageNotFound__ArgProps,
      internalVariantPropNames: PlasmicPageNotFound__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPageNotFound__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageNotFound";
  } else {
    func.displayName = `PlasmicPageNotFound.${nodeName}`;
  }
  return func;
}

export const PlasmicPageNotFound = Object.assign(
  // Top-level PlasmicPageNotFound renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBarCodeComponent: makeNodeComponent("navBarCodeComponent"),
    paddingWrapper: makeNodeComponent("paddingWrapper"),
    copyDownloadButtons10: makeNodeComponent("copyDownloadButtons10"),
    copy13: makeNodeComponent("copy13"),
    heading10: makeNodeComponent("heading10"),
    navButton: makeNodeComponent("navButton"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPageNotFound
    internalVariantProps: PlasmicPageNotFound__VariantProps,
    internalArgProps: PlasmicPageNotFound__ArgProps
  }
);

export default PlasmicPageNotFound;
/* prettier-ignore-end */
