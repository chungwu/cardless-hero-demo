// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: vA0fonNBN-GL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FaqLink from "../../FaqLink"; // plasmic-import: EHxtyqyRMHbY/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicFaqNavigation.module.css"; // plasmic-import: vA0fonNBN-GL/css

export type PlasmicFaqNavigation__VariantMembers = {
  mobileMenu: "open" | "closed";
};

export type PlasmicFaqNavigation__VariantsArgs = {
  mobileMenu?: MultiChoiceArg<"open" | "closed">;
};

type VariantPropType = keyof PlasmicFaqNavigation__VariantsArgs;
export const PlasmicFaqNavigation__VariantProps = new Array<VariantPropType>(
  "mobileMenu"
);

export type PlasmicFaqNavigation__ArgsType = {};
type ArgPropType = keyof PlasmicFaqNavigation__ArgsType;
export const PlasmicFaqNavigation__ArgProps = new Array<ArgPropType>();

export type PlasmicFaqNavigation__OverridesType = {
  navigationMenu?: p.Flex<"div">;
  selectedItem?: p.Flex<"div">;
  otherItems?: p.Flex<"div">;
};

export interface DefaultFaqNavigationProps {
  mobileMenu?: MultiChoiceArg<"open" | "closed">;
  className?: string;
}

function PlasmicFaqNavigation__RenderFunc(props: {
  variants: PlasmicFaqNavigation__VariantsArgs;
  args: PlasmicFaqNavigation__ArgsType;
  overrides: PlasmicFaqNavigation__OverridesType;
  dataFetches?: PlasmicFaqNavigation__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"navigationMenu"}
      data-plasmic-override={overrides.navigationMenu}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        sty.navigationMenu,
        {
          [sty.navigationMenu__mobileMenu_closed]: hasVariant(
            variants,
            "mobileMenu",
            "closed"
          ),
          [sty.navigationMenu__mobileMenu_open]: hasVariant(
            variants,
            "mobileMenu",
            "open"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"selectedItem"}
        data-plasmic-override={overrides.selectedItem}
        className={classNames(projectcss.all, sty.selectedItem)}
      >
        <FaqLink
          className={classNames("__wab_instance", sty.faqLink__w8Yki, {
            [sty.faqLink__mobileMenu_closed__w8Yki1CRgT]: hasVariant(
              variants,
              "mobileMenu",
              "closed"
            ),
            [sty.faqLink__mobileMenu_open__w8YkiBq2Kd]: hasVariant(
              variants,
              "mobileMenu",
              "open"
            )
          })}
          selected={
            hasVariant(variants, "mobileMenu", "closed")
              ? ["closed"]
              : hasVariant(variants, "mobileMenu", "open")
              ? ["open"]
              : []
          }
        >
          {"Applying for a card"}
        </FaqLink>
      </div>

      {(hasVariant(variants, "mobileMenu", "closed") ? true : true) ? (
        <div
          data-plasmic-name={"otherItems"}
          data-plasmic-override={overrides.otherItems}
          className={classNames(projectcss.all, sty.otherItems, {
            [sty.otherItems__mobileMenu_closed]: hasVariant(
              variants,
              "mobileMenu",
              "closed"
            )
          })}
        >
          <FaqLink
            className={classNames("__wab_instance", sty.faqLink__ffadk, {
              [sty.faqLink__mobileMenu_closed__ffadk1CRgT]: hasVariant(
                variants,
                "mobileMenu",
                "closed"
              ),
              [sty.faqLink__mobileMenu_open__ffadkBq2Kd]: hasVariant(
                variants,
                "mobileMenu",
                "open"
              )
            })}
          >
            {"Account management"}
          </FaqLink>

          <FaqLink
            className={classNames("__wab_instance", sty.faqLink___9Wccw, {
              [sty.faqLink__mobileMenu_closed___9Wccw1CRgT]: hasVariant(
                variants,
                "mobileMenu",
                "closed"
              )
            })}
          >
            {"Transactions"}
          </FaqLink>

          <FaqLink className={classNames("__wab_instance", sty.faqLink__rZv0N)}>
            {"Rewards"}
          </FaqLink>

          <FaqLink className={classNames("__wab_instance", sty.faqLink__eb0Bn)}>
            {"Bonus categories"}
          </FaqLink>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navigationMenu: ["navigationMenu", "selectedItem", "otherItems"],
  selectedItem: ["selectedItem"],
  otherItems: ["otherItems"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  navigationMenu: "div";
  selectedItem: "div";
  otherItems: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqNavigation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqNavigation__VariantsArgs;
    args?: PlasmicFaqNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFaqNavigation__Fetches;
  } & Omit<PlasmicFaqNavigation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaqNavigation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaqNavigation__ArgProps,
      internalVariantPropNames: PlasmicFaqNavigation__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFaqNavigation__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "navigationMenu") {
    func.displayName = "PlasmicFaqNavigation";
  } else {
    func.displayName = `PlasmicFaqNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqNavigation = Object.assign(
  // Top-level PlasmicFaqNavigation renders the root element
  makeNodeComponent("navigationMenu"),
  {
    // Helper components rendering sub-elements
    selectedItem: makeNodeComponent("selectedItem"),
    otherItems: makeNodeComponent("otherItems"),

    // Metadata about props expected for PlasmicFaqNavigation
    internalVariantProps: PlasmicFaqNavigation__VariantProps,
    internalArgProps: PlasmicFaqNavigation__ArgProps
  }
);

export default PlasmicFaqNavigation;
/* prettier-ignore-end */
