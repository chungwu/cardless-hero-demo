// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: PkWTYjvvSSlc
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CareersInfoCard from "../../CareersInfoCard"; // plasmic-import: UL0bObsgqj2z/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicHeroAvatar.module.css"; // plasmic-import: PkWTYjvvSSlc/css

export type PlasmicHeroAvatar__VariantMembers = {
  cardLocations: "left" | "bottom" | "right" | "test";
};

export type PlasmicHeroAvatar__VariantsArgs = {
  cardLocations?: SingleChoiceArg<"left" | "bottom" | "right" | "test">;
};

type VariantPropType = keyof PlasmicHeroAvatar__VariantsArgs;
export const PlasmicHeroAvatar__VariantProps = new Array<VariantPropType>(
  "cardLocations"
);

export type PlasmicHeroAvatar__ArgsType = {
  avatarImage?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeroAvatar__ArgsType;
export const PlasmicHeroAvatar__ArgProps = new Array<ArgPropType>(
  "avatarImage",
  "children"
);

export type PlasmicHeroAvatar__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultHeroAvatarProps {
  avatarImage?: React.ReactNode;
  children?: React.ReactNode;
  cardLocations?: SingleChoiceArg<"left" | "bottom" | "right" | "test">;
  className?: string;
}

function PlasmicHeroAvatar__RenderFunc(props: {
  variants: PlasmicHeroAvatar__VariantsArgs;
  args: PlasmicHeroAvatar__ArgsType;
  overrides: PlasmicHeroAvatar__OverridesType;
  dataFetches?: PlasmicHeroAvatar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__cardLocations_bottom]: hasVariant(
          variants,
          "cardLocations",
          "bottom"
        ),
        [sty.root__cardLocations_left]: hasVariant(
          variants,
          "cardLocations",
          "left"
        ),
        [sty.root__cardLocations_right]: hasVariant(
          variants,
          "cardLocations",
          "right"
        ),
        [sty.root__cardLocations_test]: hasVariant(
          variants,
          "cardLocations",
          "test"
        )
      })}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(
        triggers.hover_root
          ? true
          : hasVariant(variants, "cardLocations", "left")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__xwm47, {
            [sty.freeBox__cardLocations_bottom__xwm47FsAf]: hasVariant(
              variants,
              "cardLocations",
              "bottom"
            ),
            [sty.freeBox__cardLocations_left__xwm47GmliM]: hasVariant(
              variants,
              "cardLocations",
              "left"
            ),
            [sty.freeBox__cardLocations_right__xwm47RLZxV]: hasVariant(
              variants,
              "cardLocations",
              "right"
            ),
            [sty.freeBox__cardLocations_test__xwm47ZuAAa]: hasVariant(
              variants,
              "cardLocations",
              "test"
            )
          })}
        >
          {false
            ? p.renderPlasmicSlot({
                defaultContents: true ? (
                  <CareersInfoCard
                    cardContent={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aOVry
                        )}
                      >
                        {'"Quote"'}
                      </div>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.careersInfoCard__yhRp7,
                      {
                        [sty.careersInfoCard__cardLocations_bottom__yhRp7FsAf]:
                          hasVariant(variants, "cardLocations", "bottom")
                      }
                    )}
                  />
                ) : null,
                value: args.children
              })
            : null}
        </div>
      ) : null}

      <div
        className={classNames(projectcss.all, sty.freeBox__jgjgr, {
          [sty.freeBox__cardLocations_bottom__jgjgrFsAf]: hasVariant(
            variants,
            "cardLocations",
            "bottom"
          ),
          [sty.freeBox__cardLocations_left__jgjgrGmliM]: hasVariant(
            variants,
            "cardLocations",
            "left"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__tTWe)}
              displayHeight={"240px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"160px" as const}
              loading={"lazy" as const}
            />
          ),

          value: args.avatarImage
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroAvatar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroAvatar__VariantsArgs;
    args?: PlasmicHeroAvatar__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeroAvatar__Fetches;
  } & Omit<PlasmicHeroAvatar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroAvatar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroAvatar__ArgProps,
      internalVariantPropNames: PlasmicHeroAvatar__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeroAvatar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroAvatar";
  } else {
    func.displayName = `PlasmicHeroAvatar.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroAvatar = Object.assign(
  // Top-level PlasmicHeroAvatar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHeroAvatar
    internalVariantProps: PlasmicHeroAvatar__VariantProps,
    internalArgProps: PlasmicHeroAvatar__ArgProps
  }
);

export default PlasmicHeroAvatar;
/* prettier-ignore-end */
