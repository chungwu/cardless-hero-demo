// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: soDt8HKxeV97
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavBar } from "../../layout/NavBar"; // plasmic-import: VpJrKbBamu0m/codeComponent
import PaddingWrapper from "../../PaddingWrapper"; // plasmic-import: 4i10JAkWDCTW/component
import AppStoreCta from "../../AppStoreCta"; // plasmic-import: ufZvdJ_v0tDv/component
import PlayStoreCta from "../../PlayStoreCta"; // plasmic-import: krLHVnGMVKE8/component
import QuestionEntry from "../../QuestionEntry"; // plasmic-import: 2kml7f9QHlfS/component
import NavButton from "../../NavButton"; // plasmic-import: s0OJmmocqt8k/component
import Footer from "../../Footer"; // plasmic-import: 4TDmEKfWsWRr/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicReferAFriend.module.css"; // plasmic-import: soDt8HKxeV97/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon

export type PlasmicReferAFriend__VariantMembers = {};

export type PlasmicReferAFriend__VariantsArgs = {};
type VariantPropType = keyof PlasmicReferAFriend__VariantsArgs;
export const PlasmicReferAFriend__VariantProps = new Array<VariantPropType>();

export type PlasmicReferAFriend__ArgsType = {
  questionList?: React.ReactNode;
};

type ArgPropType = keyof PlasmicReferAFriend__ArgsType;
export const PlasmicReferAFriend__ArgProps = new Array<ArgPropType>(
  "questionList"
);

export type PlasmicReferAFriend__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  navBarCodeComponent?: p.Flex<typeof NavBar>;
  paddingWrapper?: p.Flex<typeof PaddingWrapper>;
  copyDownloadButtons?: p.Flex<"div">;
  copy?: p.Flex<"div">;
  downloadButtons?: p.Flex<"div">;
  appStoreCta?: p.Flex<typeof AppStoreCta>;
  playStoreCta?: p.Flex<typeof PlayStoreCta>;
  howItWorks?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  copy2?: p.Flex<"div">;
  copy3?: p.Flex<"div">;
  copy4?: p.Flex<"div">;
  wrapper?: p.Flex<"div">;
  exploreCards?: p.Flex<"div">;
  copyDownloadButtons2?: p.Flex<"div">;
  copy5?: p.Flex<"div">;
  exploreCardsBaseOnly?: p.Flex<"div">;
  copyDownloadButtons3?: p.Flex<"div">;
  copy6?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultReferAFriendProps {
  dataFetches: PlasmicReferAFriend__Fetches;
}

function PlasmicReferAFriend__RenderFunc(props: {
  variants: PlasmicReferAFriend__VariantsArgs;
  args: PlasmicReferAFriend__ArgsType;
  overrides: PlasmicReferAFriend__OverridesType;
  dataFetches?: PlasmicReferAFriend__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <NavBar
              data-plasmic-name={"navBarCodeComponent"}
              data-plasmic-override={overrides.navBarCodeComponent}
              className={classNames("__wab_instance", sty.navBarCodeComponent)}
              dark={true}
              noCta={true}
            />

            <PaddingWrapper
              data-plasmic-name={"paddingWrapper"}
              data-plasmic-override={overrides.paddingWrapper}
              className={classNames("__wab_instance", sty.paddingWrapper)}
            >
              {(
                hasVariant(globalVariants, "screen", "tabletSmall")
                  ? true
                  : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__yqKwu)}>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copyDownloadButtons"}
                    data-plasmic-override={overrides.copyDownloadButtons}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.copyDownloadButtons
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy"}
                      data-plasmic-override={overrides.copy}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8QelY
                        )}
                      >
                        {"Earn 10,000 Points for every friend you refer"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lkeA
                        )}
                      >
                        {
                          "Your friends will be eligible for an account opening offer when they apply to Cardless with your link."
                        }
                      </div>
                    </p.Stack>

                    {(
                      hasVariant(globalVariants, "screen", "tabletSmall")
                        ? true
                        : hasVariant(globalVariants, "screen", "laptopSmall")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"downloadButtons"}
                        data-plasmic-override={overrides.downloadButtons}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.downloadButtons
                        )}
                      >
                        <AppStoreCta
                          data-plasmic-name={"appStoreCta"}
                          data-plasmic-override={overrides.appStoreCta}
                          className={classNames(
                            "__wab_instance",
                            sty.appStoreCta
                          )}
                        />

                        <PlayStoreCta
                          data-plasmic-name={"playStoreCta"}
                          data-plasmic-override={overrides.playStoreCta}
                          className={classNames(
                            "__wab_instance",
                            sty.playStoreCta
                          )}
                        />
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </PaddingWrapper>
          </div>

          <div
            data-plasmic-name={"howItWorks"}
            data-plasmic-override={overrides.howItWorks}
            className={classNames(projectcss.all, sty.howItWorks)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dS3SW)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vBcaV
                )}
              >
                {hasVariant(globalVariants, "screen", "tablet")
                  ? "How it works"
                  : "How it works"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__jqReq)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "tablet") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uCoEw)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy2"}
                        data-plasmic-override={overrides.copy2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__axU9U
                          )}
                        >
                          {"1"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bbDss
                          )}
                        >
                          {"Login"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__n9CaX
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "laptopSmall")
                            ? "Log into your account on our mobile app"
                            : "Log into your account on our mobile app"}
                        </div>
                      </p.Stack>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__sfuG8)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tablet")
                            ? ("100%" as const)
                            : ("auto" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_cardless_com/images/image12.svg",
                          fullWidth: 197,
                          fullHeight: 150,
                          aspectRatio: 1.315315
                        }}
                      />
                    </p.Stack>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__vRdE5)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "tablet") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pqLph)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy3"}
                        data-plasmic-override={overrides.copy3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy3)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qIpzj
                          )}
                        >
                          {"2"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__n6Jw1
                          )}
                        >
                          {"Refer a friend"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oEwQm
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "laptop")
                            ? "Share your unique link with friends"
                            : "Share your unique link with friends\n"}
                        </div>
                      </p.Stack>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__chApV)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tablet")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_cardless_com/images/image13.svg",
                          fullWidth: 197,
                          fullHeight: 150,
                          aspectRatio: 1.315315
                        }}
                      />
                    </p.Stack>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__xvZ9R)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "tablet") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bM9LW)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy4"}
                        data-plasmic-override={overrides.copy4}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy4)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jYbcI
                          )}
                        >
                          {"3"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dyTy
                          )}
                        >
                          {"Get rewarded"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vPgY3
                          )}
                        >
                          {"Earn points when your friend gets approved!"}
                        </div>
                      </p.Stack>

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__fZqK)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tablet")
                            ? ("100%" as const)
                            : ("auto" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_cardless_com/images/image15.svg",
                          fullWidth: 197,
                          fullHeight: 150,
                          aspectRatio: 1.315315
                        }}
                      />
                    </p.Stack>
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hLgAd)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"wrapper"}
              data-plasmic-override={overrides.wrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.wrapper)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tA1OU
                )}
              >
                {hasVariant(globalVariants, "screen", "tablet")
                  ? "Frequently asked questions"
                  : "Frequently asked questions"}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__tYdOg)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <QuestionEntry
                        a={
                          "You can receive a Referral Bonus for a maximum of 10 friends per calendar year. Your friends must use your unique link for you to receive a Referral Bonus!"
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.questionEntry___0FkUy
                        )}
                        q={"Is there a limit to how many friends I can refer?"}
                      />

                      <QuestionEntry
                        a={
                          "You can receive a Referral Bonus for a maximum of 10 friends per calendar year. Your friends must use your unique link for you to receive a Referral Bonus!"
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.questionEntry__uqBec
                        )}
                        q={"Is there a limit to how many friends I can refer?"}
                      />

                      <QuestionEntry
                        a={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__noi9M
                            )}
                          >
                            {
                              "You can only refer individuals that you know personally. You cannot engage in spamming, harassment, unsolicited communication or other unfair or otherwise unwarranted or inappropriate treatment of potential Referred Users. You cannot compensate anyone for using your link."
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.questionEntry__mBmTb
                        )}
                        q={"Can anyone use my referral link?"}
                      />

                      <QuestionEntry
                        a={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ujmXl
                            )}
                          >
                            {
                              "Yes! By using your unique link, your friend can still apply and may be approved. However, you will not receive a Referral Bonus if they are approved because you have reached the Referral Bonus limit. Your friend will be eligible for any existing welcome offer that is active when they submit their application."
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.questionEntry__zDpyl
                        )}
                        q={
                          "Can I still refer friends even if I've already reached the Referral Bonus limit this year?"
                        }
                      />

                      <QuestionEntry
                        a={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xQl0J
                            )}
                          >
                            {
                              "Nope! Your friend can apply for any Cardless credit card in order for you to receive a Referral Bonus."
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.questionEntry___04Ve7
                        )}
                        q={
                          "Does my friend have to apply for the same card that I have in order for me to receive my Referral Bonus?"
                        }
                      />

                      <QuestionEntry
                        a={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__g7ND4
                            )}
                          >
                            {
                              "Nope! Your friend can apply for any Cardless credit card in order for you to receive a Referral Bonus."
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.questionEntry__n0M85
                        )}
                        q={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hxO3E
                            )}
                          >
                            {"When will I receive my Referral Bonus?"}
                          </div>
                        }
                      />
                    </React.Fragment>
                  ),
                  value: args.questionList
                })}
              </div>
            </p.Stack>
          </p.Stack>

          {(
            hasVariant(globalVariants, "screen", "laptopSmall")
              ? true
              : hasVariant(globalVariants, "screen", "laptop")
              ? true
              : true
          ) ? (
            <div
              data-plasmic-name={"exploreCards"}
              data-plasmic-override={overrides.exploreCards}
              className={classNames(projectcss.all, sty.exploreCards)}
            >
              {(
                hasVariant(globalVariants, "screen", "laptopSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aJhtu)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copyDownloadButtons2"}
                    data-plasmic-override={overrides.copyDownloadButtons2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.copyDownloadButtons2
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy5"}
                      data-plasmic-override={overrides.copy5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eUswP
                        )}
                      >
                        {"Don't have a card yet?"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__leQ4V
                        )}
                      >
                        {"Find one that's right for you."}
                      </div>
                    </p.Stack>

                    {false ? (
                      <NavButton
                        className={classNames(
                          "__wab_instance",
                          sty.navButton__oLq8G
                        )}
                        destination={
                          hasVariant(globalVariants, "screen", "laptop")
                            ? ("#cards" as const)
                            : undefined
                        }
                      >
                        {"Explore Cards"}
                      </NavButton>
                    ) : null}
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__q0Bqe)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__m3U4O)}
                      displayHeight={"100%" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/image17.png",
                        fullWidth: 1647,
                        fullHeight: 1143,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "laptopSmall")
              ? true
              : hasVariant(globalVariants, "screen", "laptop")
              ? true
              : true
          ) ? (
            <div
              data-plasmic-name={"exploreCardsBaseOnly"}
              data-plasmic-override={overrides.exploreCardsBaseOnly}
              className={classNames(projectcss.all, sty.exploreCardsBaseOnly)}
            >
              {(
                hasVariant(globalVariants, "screen", "laptop") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mtE4P)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copyDownloadButtons3"}
                    data-plasmic-override={overrides.copyDownloadButtons3}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.copyDownloadButtons3
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy6"}
                      data-plasmic-override={overrides.copy6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy6)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nZz5H
                        )}
                      >
                        {"Don't have a card yet?"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6DcmQ
                        )}
                      >
                        {"Find one that's right for you."}
                      </div>
                    </p.Stack>

                    {true ? (
                      <NavButton
                        className={classNames(
                          "__wab_instance",
                          sty.navButton__qmufd
                        )}
                        destination={"/#rightCardOffer" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tiA7
                          )}
                        >
                          {"Explore Cards"}
                        </div>
                      </NavButton>
                    ) : null}
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___1GjOr)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___2RDVi)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("auto" as const)
                          : ("100%" as const)
                      }
                      displayMaxHeight={"364px" as const}
                      displayMaxWidth={"526px" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "laptopSmall")
                          ? ("auto" as const)
                          : ("100%" as const)
                      }
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/image17.png",
                        fullWidth: 1647,
                        fullHeight: 1143,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </p.Stack>
              ) : null}
            </div>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "navBarCodeComponent",
    "paddingWrapper",
    "copyDownloadButtons",
    "copy",
    "downloadButtons",
    "appStoreCta",
    "playStoreCta",
    "howItWorks",
    "columns",
    "copy2",
    "copy3",
    "copy4",
    "wrapper",
    "exploreCards",
    "copyDownloadButtons2",
    "copy5",
    "exploreCardsBaseOnly",
    "copyDownloadButtons3",
    "copy6",
    "footer"
  ],
  hero: [
    "hero",
    "navBarCodeComponent",
    "paddingWrapper",
    "copyDownloadButtons",
    "copy",
    "downloadButtons",
    "appStoreCta",
    "playStoreCta"
  ],
  navBarCodeComponent: ["navBarCodeComponent"],
  paddingWrapper: [
    "paddingWrapper",
    "copyDownloadButtons",
    "copy",
    "downloadButtons",
    "appStoreCta",
    "playStoreCta"
  ],
  copyDownloadButtons: [
    "copyDownloadButtons",
    "copy",
    "downloadButtons",
    "appStoreCta",
    "playStoreCta"
  ],
  copy: ["copy"],
  downloadButtons: ["downloadButtons", "appStoreCta", "playStoreCta"],
  appStoreCta: ["appStoreCta"],
  playStoreCta: ["playStoreCta"],
  howItWorks: ["howItWorks", "columns", "copy2", "copy3", "copy4"],
  columns: ["columns", "copy2", "copy3", "copy4"],
  copy2: ["copy2"],
  copy3: ["copy3"],
  copy4: ["copy4"],
  wrapper: ["wrapper"],
  exploreCards: ["exploreCards", "copyDownloadButtons2", "copy5"],
  copyDownloadButtons2: ["copyDownloadButtons2", "copy5"],
  copy5: ["copy5"],
  exploreCardsBaseOnly: [
    "exploreCardsBaseOnly",
    "copyDownloadButtons3",
    "copy6"
  ],
  copyDownloadButtons3: ["copyDownloadButtons3", "copy6"],
  copy6: ["copy6"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  navBarCodeComponent: typeof NavBar;
  paddingWrapper: typeof PaddingWrapper;
  copyDownloadButtons: "div";
  copy: "div";
  downloadButtons: "div";
  appStoreCta: typeof AppStoreCta;
  playStoreCta: typeof PlayStoreCta;
  howItWorks: "div";
  columns: "div";
  copy2: "div";
  copy3: "div";
  copy4: "div";
  wrapper: "div";
  exploreCards: "div";
  copyDownloadButtons2: "div";
  copy5: "div";
  exploreCardsBaseOnly: "div";
  copyDownloadButtons3: "div";
  copy6: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReferAFriend__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReferAFriend__VariantsArgs;
    args?: PlasmicReferAFriend__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicReferAFriend__Fetches;
  } & Omit<PlasmicReferAFriend__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReferAFriend__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicReferAFriend__ArgProps,
      internalVariantPropNames: PlasmicReferAFriend__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicReferAFriend__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReferAFriend";
  } else {
    func.displayName = `PlasmicReferAFriend.${nodeName}`;
  }
  return func;
}

export const PlasmicReferAFriend = Object.assign(
  // Top-level PlasmicReferAFriend renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    navBarCodeComponent: makeNodeComponent("navBarCodeComponent"),
    paddingWrapper: makeNodeComponent("paddingWrapper"),
    copyDownloadButtons: makeNodeComponent("copyDownloadButtons"),
    copy: makeNodeComponent("copy"),
    downloadButtons: makeNodeComponent("downloadButtons"),
    appStoreCta: makeNodeComponent("appStoreCta"),
    playStoreCta: makeNodeComponent("playStoreCta"),
    howItWorks: makeNodeComponent("howItWorks"),
    columns: makeNodeComponent("columns"),
    copy2: makeNodeComponent("copy2"),
    copy3: makeNodeComponent("copy3"),
    copy4: makeNodeComponent("copy4"),
    wrapper: makeNodeComponent("wrapper"),
    exploreCards: makeNodeComponent("exploreCards"),
    copyDownloadButtons2: makeNodeComponent("copyDownloadButtons2"),
    copy5: makeNodeComponent("copy5"),
    exploreCardsBaseOnly: makeNodeComponent("exploreCardsBaseOnly"),
    copyDownloadButtons3: makeNodeComponent("copyDownloadButtons3"),
    copy6: makeNodeComponent("copy6"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicReferAFriend
    internalVariantProps: PlasmicReferAFriend__VariantProps,
    internalArgProps: PlasmicReferAFriend__ArgProps
  }
);

export default PlasmicReferAFriend;
/* prettier-ignore-end */
