// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: x0xZtXa4ebGM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PaddingWrapper from "../../PaddingWrapper"; // plasmic-import: 4i10JAkWDCTW/component
import SegmentControl from "../../SegmentControl"; // plasmic-import: aklKETeXRlEq/component
import BenefitCallOut from "../../BenefitCallOut"; // plasmic-import: E_Hg5r5Konxr/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicCareersBenefits.module.css"; // plasmic-import: x0xZtXa4ebGM/css

import RemoteWeb48SvgIcon from "./icons/PlasmicIcon__RemoteWeb48Svg"; // plasmic-import: OdwE7yLZTRXI7/icon
import DiningWeb48SvgIcon from "./icons/PlasmicIcon__DiningWeb48Svg"; // plasmic-import: oCd1rD2Q-IJFO/icon
import OfficeWeb48SvgIcon from "./icons/PlasmicIcon__OfficeWeb48Svg"; // plasmic-import: 3bWUB7drGaoUa/icon
import TransitWeb48SvgIcon from "./icons/PlasmicIcon__TransitWeb48Svg"; // plasmic-import: BcDjju4dv5U0M/icon
import CompensationWeb48SvgIcon from "./icons/PlasmicIcon__CompensationWeb48Svg"; // plasmic-import: RKBWrJNsMXOd7/icon
import VacationWeb48SvgIcon from "./icons/PlasmicIcon__VacationWeb48Svg"; // plasmic-import: uKtoFvR3-c7zb/icon
import HealthWeb48SvgIcon from "./icons/PlasmicIcon__HealthWeb48Svg"; // plasmic-import: ibMF42NL4CC2g/icon
import OffsitesWeb48SvgIcon from "./icons/PlasmicIcon__OffsitesWeb48Svg"; // plasmic-import: 28AVjGvKLOWjT/icon

export type PlasmicCareersBenefits__VariantMembers = {
  office: "office";
};

export type PlasmicCareersBenefits__VariantsArgs = {
  office?: SingleBooleanChoiceArg<"office">;
};

type VariantPropType = keyof PlasmicCareersBenefits__VariantsArgs;
export const PlasmicCareersBenefits__VariantProps = new Array<VariantPropType>(
  "office"
);

export type PlasmicCareersBenefits__ArgsType = {};
type ArgPropType = keyof PlasmicCareersBenefits__ArgsType;
export const PlasmicCareersBenefits__ArgProps = new Array<ArgPropType>();

export type PlasmicCareersBenefits__OverridesType = {
  root?: p.Flex<"div">;
  paddingWrapper?: p.Flex<typeof PaddingWrapper>;
  freeBox?: p.Flex<"div">;
  title?: p.Flex<"div">;
  segmentControl?: p.Flex<typeof SegmentControl>;
  officeBenefits?: p.Flex<"div">;
  otherBenefits?: p.Flex<"div">;
};

export interface DefaultCareersBenefitsProps {
  office?: SingleBooleanChoiceArg<"office">;
  className?: string;
}

function PlasmicCareersBenefits__RenderFunc(props: {
  variants: PlasmicCareersBenefits__VariantsArgs;
  args: PlasmicCareersBenefits__ArgsType;
  overrides: PlasmicCareersBenefits__OverridesType;
  dataFetches?: PlasmicCareersBenefits__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__office]: hasVariant(variants, "office", "office")
      })}
    >
      <PaddingWrapper
        data-plasmic-name={"paddingWrapper"}
        data-plasmic-override={overrides.paddingWrapper}
        className={classNames("__wab_instance", sty.paddingWrapper)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            hasGap={true}
            className={classNames(projectcss.all, sty.title)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nverz
              )}
            >
              {"We want you to thrive, wherever you are"}
            </div>

            <SegmentControl
              data-plasmic-name={"segmentControl"}
              data-plasmic-override={overrides.segmentControl}
              className={classNames("__wab_instance", sty.segmentControl, {
                [sty.segmentControl__office]: hasVariant(
                  variants,
                  "office",
                  "office"
                )
              })}
              office={
                hasVariant(variants, "office", "office")
                  ? ("office" as const)
                  : undefined
              }
              rootClassName={"segmentControl" as const}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"officeBenefits"}
            data-plasmic-override={overrides.officeBenefits}
            hasGap={true}
            className={classNames(projectcss.all, sty.officeBenefits)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jCx5V,
                {
                  [sty.text__office__jCx5VxPVp7]: hasVariant(
                    variants,
                    "office",
                    "office"
                  )
                }
              )}
            >
              {hasVariant(variants, "office", "office")
                ? "Work from the office"
                : "Enjoy working remotely"}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__jqxpK, {
                [sty.columns__office__jqxpKxPVp7]: hasVariant(
                  variants,
                  "office",
                  "office"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.column__wgwZl)}>
                <BenefitCallOut
                  className={classNames(
                    "__wab_instance",
                    sty.benefitCallOut__mBnsQ,
                    {
                      [sty.benefitCallOut__office__mBnsQxPVp7]: hasVariant(
                        variants,
                        "office",
                        "office"
                      )
                    }
                  )}
                  subtitle={
                    hasVariant(variants, "office", "office")
                      ? "Tasty meals at our beautiful office in San Francisco and we provide plenty of snacks and drinks"
                      : "Work from anywhere in the U.S. (except CO, AK, HI), or connect with your colleagues in the office"
                  }
                  title={
                    hasVariant(variants, "office", "office")
                      ? "Catered lunches"
                      : "Work from anywhere"
                  }
                >
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(variants, "office", "office")
                        ? DiningWeb48SvgIcon
                        : RemoteWeb48SvgIcon
                    }
                    className={classNames(projectcss.all, sty.svg__uQh, {
                      [sty.svg__office__uQHxPVp7]: hasVariant(
                        variants,
                        "office",
                        "office"
                      )
                    })}
                    role={"img"}
                  />
                </BenefitCallOut>
              </div>

              <div className={classNames(projectcss.all, sty.column__m5T6A)}>
                <BenefitCallOut
                  className={classNames(
                    "__wab_instance",
                    sty.benefitCallOut__sUzTk,
                    {
                      [sty.benefitCallOut__office__sUzTKxPVp7]: hasVariant(
                        variants,
                        "office",
                        "office"
                      )
                    }
                  )}
                  subtitle={
                    hasVariant(variants, "office", "office")
                      ? "$220 per month to offset the cost of public transit and parking passes"
                      : "$500 to cover expenses for your home-office setup"
                  }
                  title={
                    hasVariant(variants, "office", "office")
                      ? "Transit"
                      : "Home office stipend"
                  }
                >
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(variants, "office", "office")
                        ? TransitWeb48SvgIcon
                        : OfficeWeb48SvgIcon
                    }
                    className={classNames(projectcss.all, sty.svg___9Pzex, {
                      [sty.svg__office___9PzexxPVp7]: hasVariant(
                        variants,
                        "office",
                        "office"
                      )
                    })}
                    role={"img"}
                  />
                </BenefitCallOut>
              </div>

              <div className={classNames(projectcss.all, sty.column__j5Mr8)} />
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"otherBenefits"}
            data-plasmic-override={overrides.otherBenefits}
            hasGap={true}
            className={classNames(projectcss.all, sty.otherBenefits)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bQbmO
              )}
            >
              {"Plus everything else you’d expect"}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__ddWnq)}
            >
              <div className={classNames(projectcss.all, sty.column__y2Lm9)}>
                <BenefitCallOut
                  className={classNames(
                    "__wab_instance",
                    sty.benefitCallOut__mjE25,
                    {
                      [sty.benefitCallOut__office__mjE25XPVp7]: hasVariant(
                        variants,
                        "office",
                        "office"
                      )
                    }
                  )}
                  subtitle={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x4QlK
                      )}
                    >
                      {
                        "Competitive salary, meaningful equity and a 401(k) plan"
                      }
                    </div>
                  }
                  title={"Compensation"}
                >
                  <CompensationWeb48SvgIcon
                    className={classNames(projectcss.all, sty.svg__rz1T8)}
                    role={"img"}
                  />
                </BenefitCallOut>
              </div>

              <div className={classNames(projectcss.all, sty.column___5AFq5)}>
                <BenefitCallOut
                  className={classNames(
                    "__wab_instance",
                    sty.benefitCallOut__jy8Wg,
                    {
                      [sty.benefitCallOut__office__jy8WGxPVp7]: hasVariant(
                        variants,
                        "office",
                        "office"
                      )
                    }
                  )}
                  subtitle={
                    "Unlimited paid time off, with a minimum of 15 days off per year"
                  }
                  title={"Recharge"}
                >
                  <VacationWeb48SvgIcon
                    className={classNames(projectcss.all, sty.svg__jxZkr)}
                    role={"img"}
                  />
                </BenefitCallOut>
              </div>

              <div className={classNames(projectcss.all, sty.column__ds2VT)}>
                <BenefitCallOut
                  className={classNames(
                    "__wab_instance",
                    sty.benefitCallOut__eqv66
                  )}
                  subtitle={
                    "Top-of-the-line healthcare (medical, vision, and dental)"
                  }
                  title={"Health"}
                >
                  <HealthWeb48SvgIcon
                    className={classNames(projectcss.all, sty.svg__dXbRi)}
                    role={"img"}
                  />
                </BenefitCallOut>
              </div>

              <div className={classNames(projectcss.all, sty.column___9WZjr)}>
                <BenefitCallOut
                  className={classNames(
                    "__wab_instance",
                    sty.benefitCallOut__oLy8,
                    {
                      [sty.benefitCallOut__office__oLy8XPVp7]: hasVariant(
                        variants,
                        "office",
                        "office"
                      )
                    }
                  )}
                  subtitle={
                    "Amazing team trips and offsites, including via our brand partners"
                  }
                  title={"Adventures"}
                >
                  <OffsitesWeb48SvgIcon
                    className={classNames(projectcss.all, sty.svg__pKFq)}
                    role={"img"}
                  />
                </BenefitCallOut>
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </PaddingWrapper>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "paddingWrapper",
    "freeBox",
    "title",
    "segmentControl",
    "officeBenefits",
    "otherBenefits"
  ],
  paddingWrapper: [
    "paddingWrapper",
    "freeBox",
    "title",
    "segmentControl",
    "officeBenefits",
    "otherBenefits"
  ],
  freeBox: [
    "freeBox",
    "title",
    "segmentControl",
    "officeBenefits",
    "otherBenefits"
  ],
  title: ["title", "segmentControl"],
  segmentControl: ["segmentControl"],
  officeBenefits: ["officeBenefits"],
  otherBenefits: ["otherBenefits"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  paddingWrapper: typeof PaddingWrapper;
  freeBox: "div";
  title: "div";
  segmentControl: typeof SegmentControl;
  officeBenefits: "div";
  otherBenefits: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCareersBenefits__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCareersBenefits__VariantsArgs;
    args?: PlasmicCareersBenefits__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCareersBenefits__Fetches;
  } & Omit<PlasmicCareersBenefits__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCareersBenefits__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCareersBenefits__ArgProps,
      internalVariantPropNames: PlasmicCareersBenefits__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCareersBenefits__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCareersBenefits";
  } else {
    func.displayName = `PlasmicCareersBenefits.${nodeName}`;
  }
  return func;
}

export const PlasmicCareersBenefits = Object.assign(
  // Top-level PlasmicCareersBenefits renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paddingWrapper: makeNodeComponent("paddingWrapper"),
    freeBox: makeNodeComponent("freeBox"),
    title: makeNodeComponent("title"),
    segmentControl: makeNodeComponent("segmentControl"),
    officeBenefits: makeNodeComponent("officeBenefits"),
    otherBenefits: makeNodeComponent("otherBenefits"),

    // Metadata about props expected for PlasmicCareersBenefits
    internalVariantProps: PlasmicCareersBenefits__VariantProps,
    internalArgProps: PlasmicCareersBenefits__ArgProps
  }
);

export default PlasmicCareersBenefits;
/* prettier-ignore-end */
