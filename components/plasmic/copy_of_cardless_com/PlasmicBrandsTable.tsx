// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: sGilO7-Qjn6_
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicBrandsTable.module.css"; // plasmic-import: sGilO7-Qjn6_/css

import CellDivider3Icon from "./icons/PlasmicIcon__CellDivider3"; // plasmic-import: bTV-643ERNmZt/icon
import Check1Icon from "./icons/PlasmicIcon__Check1"; // plasmic-import: cQ8lwAGWnuGmB/icon
import Close3Icon from "./icons/PlasmicIcon__Close3"; // plasmic-import: ukpz4oFAJU_qY/icon

export type PlasmicBrandsTable__VariantMembers = {};

export type PlasmicBrandsTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicBrandsTable__VariantsArgs;
export const PlasmicBrandsTable__VariantProps = new Array<VariantPropType>();

export type PlasmicBrandsTable__ArgsType = {};
type ArgPropType = keyof PlasmicBrandsTable__ArgsType;
export const PlasmicBrandsTable__ArgProps = new Array<ArgPropType>();

export type PlasmicBrandsTable__OverridesType = {
  root?: p.Flex<"div">;
  row0?: p.Flex<"div">;
  content5?: p.Flex<"div">;
  column1?: p.Flex<"div">;
  column2?: p.Flex<"div">;
  column3?: p.Flex<"div">;
  row6?: p.Flex<"div">;
  content6?: p.Flex<"div">;
  column4?: p.Flex<"div">;
  column5?: p.Flex<"div">;
  column6?: p.Flex<"div">;
  row7?: p.Flex<"div">;
  content7?: p.Flex<"div">;
  column7?: p.Flex<"div">;
  column8?: p.Flex<"div">;
  column9?: p.Flex<"div">;
  row8?: p.Flex<"div">;
  content8?: p.Flex<"div">;
  column10?: p.Flex<"div">;
  column11?: p.Flex<"div">;
  column12?: p.Flex<"div">;
  row9?: p.Flex<"div">;
  content9?: p.Flex<"div">;
  column13?: p.Flex<"div">;
  column14?: p.Flex<"div">;
  column15?: p.Flex<"div">;
  row10?: p.Flex<"div">;
  content10?: p.Flex<"div">;
  column16?: p.Flex<"div">;
  column17?: p.Flex<"div">;
  column18?: p.Flex<"div">;
  row11?: p.Flex<"div">;
  content11?: p.Flex<"div">;
};

export interface DefaultBrandsTableProps {
  className?: string;
}

function PlasmicBrandsTable__RenderFunc(props: {
  variants: PlasmicBrandsTable__VariantsArgs;
  args: PlasmicBrandsTable__ArgsType;
  overrides: PlasmicBrandsTable__OverridesType;
  dataFetches?: PlasmicBrandsTable__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"row0"}
        data-plasmic-override={overrides.row0}
        hasGap={true}
        className={classNames(projectcss.all, sty.row0)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"content5"}
          data-plasmic-override={overrides.content5}
          hasGap={true}
          className={classNames(projectcss.all, sty.content5)}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"column1"}
              data-plasmic-override={overrides.column1}
              hasGap={true}
              className={classNames(projectcss.all, sty.column1)}
            />
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"column2"}
            data-plasmic-override={overrides.column2}
            hasGap={true}
            className={classNames(projectcss.all, sty.column2)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mveUw
              )}
            >
              {"Cardless"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column3"}
            data-plasmic-override={overrides.column3}
            hasGap={true}
            className={classNames(projectcss.all, sty.column3)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kTryx
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "Other Banks"
                : hasVariant(globalVariants, "screen", "tabletSmall")
                ? "Other Banks"
                : "Traditional Bank"}
            </div>
          </p.Stack>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__oIgv)}>
          <CellDivider3Icon
            className={classNames(projectcss.all, sty.svg__gkUrN)}
            role={"img"}
          />
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"row6"}
        data-plasmic-override={overrides.row6}
        hasGap={true}
        className={classNames(projectcss.all, sty.row6)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"content6"}
          data-plasmic-override={overrides.content6}
          hasGap={true}
          className={classNames(projectcss.all, sty.content6)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"column4"}
            data-plasmic-override={overrides.column4}
            hasGap={true}
            className={classNames(projectcss.all, sty.column4)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7QeYa
              )}
            >
              {"Start-up costs"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column5"}
            data-plasmic-override={overrides.column5}
            hasGap={true}
            className={classNames(projectcss.all, sty.column5)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eyEow
              )}
            >
              {"$0    "}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column6"}
            data-plasmic-override={overrides.column6}
            hasGap={true}
            className={classNames(projectcss.all, sty.column6)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m4JDw
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "$1M- $10M+"
                : hasVariant(globalVariants, "screen", "tabletSmall")
                ? "$1M - $10M+"
                : "Much more"}
            </div>
          </p.Stack>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__wCpM4)}>
          <CellDivider3Icon
            className={classNames(projectcss.all, sty.svg__mkUcd)}
            role={"img"}
          />
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"row7"}
        data-plasmic-override={overrides.row7}
        hasGap={true}
        className={classNames(projectcss.all, sty.row7)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"content7"}
          data-plasmic-override={overrides.content7}
          hasGap={true}
          className={classNames(projectcss.all, sty.content7)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"column7"}
            data-plasmic-override={overrides.column7}
            hasGap={true}
            className={classNames(projectcss.all, sty.column7)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dfCHj
              )}
            >
              {"Time to launch"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column8"}
            data-plasmic-override={overrides.column8}
            hasGap={true}
            className={classNames(projectcss.all, sty.column8)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6TtzL
              )}
            >
              {"Quick"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column9"}
            data-plasmic-override={overrides.column9}
            hasGap={true}
            className={classNames(projectcss.all, sty.column9)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tdWbL
              )}
            >
              {"Slow"}
            </div>
          </p.Stack>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__auy6Z)}>
          <CellDivider3Icon
            className={classNames(projectcss.all, sty.svg__jiRc5)}
            role={"img"}
          />
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"row8"}
        data-plasmic-override={overrides.row8}
        hasGap={true}
        className={classNames(projectcss.all, sty.row8)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"content8"}
          data-plasmic-override={overrides.content8}
          hasGap={true}
          className={classNames(projectcss.all, sty.content8)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"column10"}
            data-plasmic-override={overrides.column10}
            hasGap={true}
            className={classNames(projectcss.all, sty.column10)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___45N8P
              )}
            >
              {"Tech-first approach"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column11"}
            data-plasmic-override={overrides.column11}
            hasGap={true}
            className={classNames(projectcss.all, sty.column11)}
          >
            <Check1Icon
              className={classNames(projectcss.all, sty.svg__iXeQ)}
              role={"img"}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column12"}
            data-plasmic-override={overrides.column12}
            hasGap={true}
            className={classNames(projectcss.all, sty.column12)}
          >
            {true ? (
              <Close3Icon
                className={classNames(projectcss.all, sty.svg__prNgN)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__l9Mgb)}>
          <CellDivider3Icon
            className={classNames(projectcss.all, sty.svg__eY8F)}
            role={"img"}
          />
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"row9"}
        data-plasmic-override={overrides.row9}
        hasGap={true}
        className={classNames(projectcss.all, sty.row9)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"content9"}
          data-plasmic-override={overrides.content9}
          hasGap={true}
          className={classNames(projectcss.all, sty.content9)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"column13"}
            data-plasmic-override={overrides.column13}
            hasGap={true}
            className={classNames(projectcss.all, sty.column13)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tXzVp
              )}
            >
              {"Dynamic rewards platform"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column14"}
            data-plasmic-override={overrides.column14}
            hasGap={true}
            className={classNames(projectcss.all, sty.column14)}
          >
            <Check1Icon
              className={classNames(projectcss.all, sty.svg__wjYh)}
              role={"img"}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"column15"}
            data-plasmic-override={overrides.column15}
            hasGap={true}
            className={classNames(projectcss.all, sty.column15)}
          >
            {true ? (
              <Close3Icon
                className={classNames(projectcss.all, sty.svg__lWuyt)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__iOolj)}>
          <CellDivider3Icon
            className={classNames(projectcss.all, sty.svg___5ZbS)}
            role={"img"}
          />
        </div>
      </p.Stack>

      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"row10"}
          data-plasmic-override={overrides.row10}
          hasGap={true}
          className={classNames(projectcss.all, sty.row10)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"content10"}
            data-plasmic-override={overrides.content10}
            hasGap={true}
            className={classNames(projectcss.all, sty.content10)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"column16"}
              data-plasmic-override={overrides.column16}
              hasGap={true}
              className={classNames(projectcss.all, sty.column16)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vnaS
                )}
              >
                {"Accessible to a wider range of brands"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"column17"}
              data-plasmic-override={overrides.column17}
              hasGap={true}
              className={classNames(projectcss.all, sty.column17)}
            >
              <Check1Icon
                className={classNames(projectcss.all, sty.svg__st9Wn)}
                role={"img"}
              />
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"column18"}
              data-plasmic-override={overrides.column18}
              hasGap={true}
              className={classNames(projectcss.all, sty.column18)}
            >
              {true ? (
                <Close3Icon
                  className={classNames(projectcss.all, sty.svg__vbNh3)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox___1Fkvz)}>
            <CellDivider3Icon
              className={classNames(projectcss.all, sty.svg__nmjts)}
              role={"img"}
            />
          </div>
        </p.Stack>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"row11"}
        data-plasmic-override={overrides.row11}
        hasGap={true}
        className={classNames(projectcss.all, sty.row11)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"content11"}
          data-plasmic-override={overrides.content11}
          hasGap={true}
          className={classNames(projectcss.all, sty.content11)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xfSqF)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oYqgs
              )}
            >
              {"And much, much, more"}
            </div>
          </p.Stack>

          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mfsOg)}
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iWfFx)}
            />
          ) : null}
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "row0",
    "content5",
    "column1",
    "column2",
    "column3",
    "row6",
    "content6",
    "column4",
    "column5",
    "column6",
    "row7",
    "content7",
    "column7",
    "column8",
    "column9",
    "row8",
    "content8",
    "column10",
    "column11",
    "column12",
    "row9",
    "content9",
    "column13",
    "column14",
    "column15",
    "row10",
    "content10",
    "column16",
    "column17",
    "column18",
    "row11",
    "content11"
  ],
  row0: ["row0", "content5", "column1", "column2", "column3"],
  content5: ["content5", "column1", "column2", "column3"],
  column1: ["column1"],
  column2: ["column2"],
  column3: ["column3"],
  row6: ["row6", "content6", "column4", "column5", "column6"],
  content6: ["content6", "column4", "column5", "column6"],
  column4: ["column4"],
  column5: ["column5"],
  column6: ["column6"],
  row7: ["row7", "content7", "column7", "column8", "column9"],
  content7: ["content7", "column7", "column8", "column9"],
  column7: ["column7"],
  column8: ["column8"],
  column9: ["column9"],
  row8: ["row8", "content8", "column10", "column11", "column12"],
  content8: ["content8", "column10", "column11", "column12"],
  column10: ["column10"],
  column11: ["column11"],
  column12: ["column12"],
  row9: ["row9", "content9", "column13", "column14", "column15"],
  content9: ["content9", "column13", "column14", "column15"],
  column13: ["column13"],
  column14: ["column14"],
  column15: ["column15"],
  row10: ["row10", "content10", "column16", "column17", "column18"],
  content10: ["content10", "column16", "column17", "column18"],
  column16: ["column16"],
  column17: ["column17"],
  column18: ["column18"],
  row11: ["row11", "content11"],
  content11: ["content11"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  row0: "div";
  content5: "div";
  column1: "div";
  column2: "div";
  column3: "div";
  row6: "div";
  content6: "div";
  column4: "div";
  column5: "div";
  column6: "div";
  row7: "div";
  content7: "div";
  column7: "div";
  column8: "div";
  column9: "div";
  row8: "div";
  content8: "div";
  column10: "div";
  column11: "div";
  column12: "div";
  row9: "div";
  content9: "div";
  column13: "div";
  column14: "div";
  column15: "div";
  row10: "div";
  content10: "div";
  column16: "div";
  column17: "div";
  column18: "div";
  row11: "div";
  content11: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBrandsTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBrandsTable__VariantsArgs;
    args?: PlasmicBrandsTable__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicBrandsTable__Fetches;
  } & Omit<PlasmicBrandsTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBrandsTable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBrandsTable__ArgProps,
      internalVariantPropNames: PlasmicBrandsTable__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicBrandsTable__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBrandsTable";
  } else {
    func.displayName = `PlasmicBrandsTable.${nodeName}`;
  }
  return func;
}

export const PlasmicBrandsTable = Object.assign(
  // Top-level PlasmicBrandsTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    row0: makeNodeComponent("row0"),
    content5: makeNodeComponent("content5"),
    column1: makeNodeComponent("column1"),
    column2: makeNodeComponent("column2"),
    column3: makeNodeComponent("column3"),
    row6: makeNodeComponent("row6"),
    content6: makeNodeComponent("content6"),
    column4: makeNodeComponent("column4"),
    column5: makeNodeComponent("column5"),
    column6: makeNodeComponent("column6"),
    row7: makeNodeComponent("row7"),
    content7: makeNodeComponent("content7"),
    column7: makeNodeComponent("column7"),
    column8: makeNodeComponent("column8"),
    column9: makeNodeComponent("column9"),
    row8: makeNodeComponent("row8"),
    content8: makeNodeComponent("content8"),
    column10: makeNodeComponent("column10"),
    column11: makeNodeComponent("column11"),
    column12: makeNodeComponent("column12"),
    row9: makeNodeComponent("row9"),
    content9: makeNodeComponent("content9"),
    column13: makeNodeComponent("column13"),
    column14: makeNodeComponent("column14"),
    column15: makeNodeComponent("column15"),
    row10: makeNodeComponent("row10"),
    content10: makeNodeComponent("content10"),
    column16: makeNodeComponent("column16"),
    column17: makeNodeComponent("column17"),
    column18: makeNodeComponent("column18"),
    row11: makeNodeComponent("row11"),
    content11: makeNodeComponent("content11"),

    // Metadata about props expected for PlasmicBrandsTable
    internalVariantProps: PlasmicBrandsTable__VariantProps,
    internalArgProps: PlasmicBrandsTable__ArgProps
  }
);

export default PlasmicBrandsTable;
/* prettier-ignore-end */
