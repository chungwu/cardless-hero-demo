// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: Bkjz8p8FKwE0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FaqNavigation from "../../FaqNavigation"; // plasmic-import: vA0fonNBN-GL/component
import QuestionEntry from "../../QuestionEntry"; // plasmic-import: 2kml7f9QHlfS/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicFaqComplete.module.css"; // plasmic-import: Bkjz8p8FKwE0/css

export type PlasmicFaqComplete__VariantMembers = {};

export type PlasmicFaqComplete__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaqComplete__VariantsArgs;
export const PlasmicFaqComplete__VariantProps = new Array<VariantPropType>();

export type PlasmicFaqComplete__ArgsType = {};
type ArgPropType = keyof PlasmicFaqComplete__ArgsType;
export const PlasmicFaqComplete__ArgProps = new Array<ArgPropType>();

export type PlasmicFaqComplete__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  faqNav?: p.Flex<typeof FaqNavigation>;
  questionList?: p.Flex<"div">;
};

export interface DefaultFaqCompleteProps {
  className?: string;
}

function PlasmicFaqComplete__RenderFunc(props: {
  variants: PlasmicFaqComplete__VariantsArgs;
  args: PlasmicFaqComplete__ArgsType;
  overrides: PlasmicFaqComplete__OverridesType;
  dataFetches?: PlasmicFaqComplete__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {true ? (
          <FaqNavigation
            data-plasmic-name={"faqNav"}
            data-plasmic-override={overrides.faqNav}
            className={classNames("__wab_instance", sty.faqNav)}
            mobileMenu={
              hasVariant(globalVariants, "screen", "tablet")
                ? ["open"]
                : undefined
            }
          />
        ) : null}

        <div
          data-plasmic-name={"questionList"}
          data-plasmic-override={overrides.questionList}
          className={classNames(projectcss.all, sty.questionList)}
        >
          <QuestionEntry
            className={classNames("__wab_instance", sty.questionEntry__yxPo1)}
          />

          <QuestionEntry
            className={classNames("__wab_instance", sty.questionEntry__xnpCm)}
          />

          <QuestionEntry
            className={classNames("__wab_instance", sty.questionEntry__cueqA)}
          />

          <QuestionEntry
            a={null}
            className={classNames("__wab_instance", sty.questionEntry__ayXO)}
          />
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "faqNav", "questionList"],
  freeBox: ["freeBox", "faqNav", "questionList"],
  faqNav: ["faqNav"],
  questionList: ["questionList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  faqNav: typeof FaqNavigation;
  questionList: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqComplete__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqComplete__VariantsArgs;
    args?: PlasmicFaqComplete__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFaqComplete__Fetches;
  } & Omit<PlasmicFaqComplete__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaqComplete__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaqComplete__ArgProps,
      internalVariantPropNames: PlasmicFaqComplete__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFaqComplete__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqComplete";
  } else {
    func.displayName = `PlasmicFaqComplete.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqComplete = Object.assign(
  // Top-level PlasmicFaqComplete renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    faqNav: makeNodeComponent("faqNav"),
    questionList: makeNodeComponent("questionList"),

    // Metadata about props expected for PlasmicFaqComplete
    internalVariantProps: PlasmicFaqComplete__VariantProps,
    internalArgProps: PlasmicFaqComplete__ArgProps
  }
);

export default PlasmicFaqComplete;
/* prettier-ignore-end */
