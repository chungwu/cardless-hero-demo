// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: c5IZhXwKvBNN
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FauxUi from "../../FauxUi"; // plasmic-import: Tj1OgYPQx9N9/component
import FauxUiTextwrapper from "../../FauxUiTextwrapper"; // plasmic-import: 2N7y0bNNIt8J/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicFauxUiScroll.module.css"; // plasmic-import: c5IZhXwKvBNN/css

export type PlasmicFauxUiScroll__VariantMembers = {};

export type PlasmicFauxUiScroll__VariantsArgs = {};
type VariantPropType = keyof PlasmicFauxUiScroll__VariantsArgs;
export const PlasmicFauxUiScroll__VariantProps = new Array<VariantPropType>();

export type PlasmicFauxUiScroll__ArgsType = {};
type ArgPropType = keyof PlasmicFauxUiScroll__ArgsType;
export const PlasmicFauxUiScroll__ArgProps = new Array<ArgPropType>();

export type PlasmicFauxUiScroll__OverridesType = {
  root?: p.Flex<"div">;
  fadeGradient?: p.Flex<"div">;
  fauxUi?: p.Flex<typeof FauxUi>;
  list?: p.Flex<"div">;
};

export interface DefaultFauxUiScrollProps {
  className?: string;
}

function PlasmicFauxUiScroll__RenderFunc(props: {
  variants: PlasmicFauxUiScroll__VariantsArgs;
  args: PlasmicFauxUiScroll__ArgsType;
  overrides: PlasmicFauxUiScroll__OverridesType;
  dataFetches?: PlasmicFauxUiScroll__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(projectcss.all, sty.freeBox___6O8Xi)}>
        {(hasVariant(globalVariants, "screen", "laptop") ? true : true) ? (
          <div
            data-plasmic-name={"fadeGradient"}
            data-plasmic-override={overrides.fadeGradient}
            className={classNames(projectcss.all, sty.fadeGradient)}
          />
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "tabletSmall")
            ? true
            : hasVariant(globalVariants, "screen", "tablet")
            ? true
            : hasVariant(globalVariants, "screen", "laptop")
            ? true
            : true
        ) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qYiow)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__a8JuH)}
            >
              <FauxUi
                data-plasmic-name={"fauxUi"}
                data-plasmic-override={overrides.fauxUi}
                className={classNames("__wab_instance", sty.fauxUi)}
                scene={"scene1" as const}
              />
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"list"}
              data-plasmic-override={overrides.list}
              hasGap={true}
              className={classNames(projectcss.all, sty.list)}
            >
              {true ? (
                <FauxUiTextwrapper
                  caption={"caption" as const}
                  className={classNames(
                    "__wab_instance",
                    sty.fauxUiTextwrapper__gr5Ti
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g69Yb
                      )}
                    >
                      {
                        "We issue virtual cards immediately, letting you tap to pay and shop online right away"
                      }
                    </div>
                  }
                  slot2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__raFBk
                      )}
                    >
                      {
                        "And we’ll automatically send you a physical card for free"
                      }
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r7Gex
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "laptopSmall")
                      ? "No need to wait"
                      : "No need to wait"}
                  </div>
                </FauxUiTextwrapper>
              ) : null}

              <FauxUiTextwrapper
                className={classNames(
                  "__wab_instance",
                  sty.fauxUiTextwrapper__qT7G5
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0D
                    )}
                  >
                    {"Redeem points for gift cards, cash, or something special"}
                  </div>
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qfjG
                  )}
                >
                  {"Get rewarded"}
                </div>
              </FauxUiTextwrapper>

              {true ? (
                <FauxUiTextwrapper
                  className={classNames(
                    "__wab_instance",
                    sty.fauxUiTextwrapper___04FG9
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0WNc0
                      )}
                    >
                      {
                        "There’s no need to call support to lock your card or request a new number"
                      }
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o5QP6
                    )}
                  >
                    {"Security on your schedule"}
                  </div>
                </FauxUiTextwrapper>
              ) : null}
              {true ? (
                <FauxUiTextwrapper
                  className={classNames(
                    "__wab_instance",
                    sty.fauxUiTextwrapper__mTrGj
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wx2Oy
                      )}
                    >
                      {
                        "Get notified of transactions with our simple, customized alerts"
                      }
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ka4Oa
                    )}
                  >
                    {"Don’t miss a thing"}
                  </div>
                </FauxUiTextwrapper>
              ) : null}
              {true ? (
                <FauxUiTextwrapper
                  className={classNames(
                    "__wab_instance",
                    sty.fauxUiTextwrapper__n9UQ8
                  )}
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wr2Qd
                      )}
                    >
                      {
                        "With instant access to a digital card, it’s easier than ever to tap and pay"
                      }
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k6NB
                    )}
                  >
                    {"Apple Pay support"}
                  </div>
                </FauxUiTextwrapper>
              ) : null}
            </p.Stack>
          </p.Stack>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "fadeGradient", "fauxUi", "list"],
  fadeGradient: ["fadeGradient"],
  fauxUi: ["fauxUi"],
  list: ["list"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  fadeGradient: "div";
  fauxUi: typeof FauxUi;
  list: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFauxUiScroll__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFauxUiScroll__VariantsArgs;
    args?: PlasmicFauxUiScroll__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFauxUiScroll__Fetches;
  } & Omit<PlasmicFauxUiScroll__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFauxUiScroll__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFauxUiScroll__ArgProps,
      internalVariantPropNames: PlasmicFauxUiScroll__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFauxUiScroll__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFauxUiScroll";
  } else {
    func.displayName = `PlasmicFauxUiScroll.${nodeName}`;
  }
  return func;
}

export const PlasmicFauxUiScroll = Object.assign(
  // Top-level PlasmicFauxUiScroll renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fadeGradient: makeNodeComponent("fadeGradient"),
    fauxUi: makeNodeComponent("fauxUi"),
    list: makeNodeComponent("list"),

    // Metadata about props expected for PlasmicFauxUiScroll
    internalVariantProps: PlasmicFauxUiScroll__VariantProps,
    internalArgProps: PlasmicFauxUiScroll__ArgProps
  }
);

export default PlasmicFauxUiScroll;
/* prettier-ignore-end */
