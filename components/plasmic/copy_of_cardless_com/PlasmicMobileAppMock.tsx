// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: L7fXatbRFIgn
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BenefitRow from "../../BenefitRow"; // plasmic-import: O5sEW05m_bGM/component
import AppStoreCta from "../../AppStoreCta"; // plasmic-import: ufZvdJ_v0tDv/component
import PlayStoreCta from "../../PlayStoreCta"; // plasmic-import: krLHVnGMVKE8/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant
import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: RIq68Up0Sibe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicMobileAppMock.module.css"; // plasmic-import: L7fXatbRFIgn/css

import SilverIcon from "./icons/PlasmicIcon__Silver"; // plasmic-import: MtfFFbGFE-WV_/icon
import Rectangle11Icon from "./icons/PlasmicIcon__Rectangle11"; // plasmic-import: NIoaI8UM_F1ZK/icon
import SubtractIcon from "./icons/PlasmicIcon__Subtract"; // plasmic-import: gS6snRuVkIHZR/icon
import Star1Icon from "./icons/PlasmicIcon__Star1"; // plasmic-import: QeMb_grhsgv0U/icon
import Cutlery3Icon from "./icons/PlasmicIcon__Cutlery3"; // plasmic-import: x-fEX2qGySFHx/icon
import CreditCard2Icon from "./icons/PlasmicIcon__CreditCard2"; // plasmic-import: qYjMcRaquJ1ru/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: EO1cJqq86bros/icon
import Silver3Icon from "./icons/PlasmicIcon__Silver3"; // plasmic-import: ssDqJEOkzRm3W/icon
import Rectangle16Icon from "./icons/PlasmicIcon__Rectangle16"; // plasmic-import: NLBmm4ZSbC37t/icon
import Subtract3Icon from "./icons/PlasmicIcon__Subtract3"; // plasmic-import: S-UZudpU8_uk-/icon

export type PlasmicMobileAppMock__VariantMembers = {
  hideAppLinks: "hideAppLinks";
  products: "cardVisible";
  showCaption: "showCaption";
  forBrands: "forBrands";
};

export type PlasmicMobileAppMock__VariantsArgs = {
  hideAppLinks?: SingleBooleanChoiceArg<"hideAppLinks">;
  products?: SingleChoiceArg<"cardVisible">;
  showCaption?: SingleBooleanChoiceArg<"showCaption">;
  forBrands?: SingleBooleanChoiceArg<"forBrands">;
};

type VariantPropType = keyof PlasmicMobileAppMock__VariantsArgs;
export const PlasmicMobileAppMock__VariantProps = new Array<VariantPropType>(
  "hideAppLinks",
  "products",
  "showCaption",
  "forBrands"
);

export type PlasmicMobileAppMock__ArgsType = {
  caption?: React.ReactNode;
  id?: string;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  header4?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMobileAppMock__ArgsType;
export const PlasmicMobileAppMock__ArgProps = new Array<ArgPropType>(
  "caption",
  "id",
  "children",
  "slot",
  "slot2",
  "header4"
);

export type PlasmicMobileAppMock__OverridesType = {
  root?: p.Flex<"div">;
  frame34414?: p.Flex<"div">;
  copy28?: p.Flex<"div">;
  benefitsRow5?: p.Flex<"div">;
  mocks?: p.Flex<"div">;
  brand?: p.Flex<"div">;
  iphone12ProGraphite?: p.Flex<"div">;
  shadows?: p.Flex<"div">;
  group8?: p.Flex<"div">;
  group4?: p.Flex<"div">;
  rectangle23?: p.Flex<"div">;
  rectangle25?: p.Flex<"div">;
  rectangle24?: p.Flex<"div">;
  rectangle26?: p.Flex<"div">;
  rectangle27?: p.Flex<"div">;
  rectangle28?: p.Flex<"div">;
  highlights?: p.Flex<"div">;
  group9?: p.Flex<"div">;
  group5?: p.Flex<"div">;
  rectangle29?: p.Flex<"div">;
  rectangle30?: p.Flex<"div">;
  rectangle31?: p.Flex<"div">;
  rectangle32?: p.Flex<"div">;
  rectangle33?: p.Flex<"div">;
  rectangle34?: p.Flex<"div">;
  group11?: p.Flex<"div">;
  card?: p.Flex<"div">;
  rating?: p.Flex<"div">;
  figmaPaste?: p.Flex<"div">;
  image?: p.Flex<"div">;
  heroUiTransactions1?: p.Flex<"div">;
  starRating?: p.Flex<"div">;
  frame34415?: p.Flex<"div">;
  grayBg?: p.Flex<"div">;
  goldBg?: p.Flex<"div">;
  transaction?: p.Flex<"div">;
  content?: p.Flex<"div">;
  left?: p.Flex<"div">;
  transactionIcon?: p.Flex<"div">;
  right?: p.Flex<"div">;
  transaction2?: p.Flex<"div">;
  content2?: p.Flex<"div">;
  left2?: p.Flex<"div">;
  text2?: p.Flex<"div">;
  right2?: p.Flex<"div">;
  transaction3?: p.Flex<"div">;
  content3?: p.Flex<"div">;
  left3?: p.Flex<"div">;
  transactionIcon2?: p.Flex<"div">;
  text3?: p.Flex<"div">;
  right3?: p.Flex<"div">;
  transaction4?: p.Flex<"div">;
  content4?: p.Flex<"div">;
  left4?: p.Flex<"div">;
  appStore11?: p.Flex<"div">;
  text4?: p.Flex<"div">;
  right4?: p.Flex<"div">;
  iphone12ProGraphite2?: p.Flex<"div">;
  shadows2?: p.Flex<"div">;
  highlights2?: p.Flex<"div">;
  group12?: p.Flex<"div">;
  downloadButtons2?: p.Flex<"div">;
  appStoreCta?: p.Flex<typeof AppStoreCta>;
  playStoreCta?: p.Flex<typeof PlayStoreCta>;
};

export interface DefaultMobileAppMockProps {
  caption?: React.ReactNode;
  id?: string;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  header4?: React.ReactNode;
  hideAppLinks?: SingleBooleanChoiceArg<"hideAppLinks">;
  products?: SingleChoiceArg<"cardVisible">;
  showCaption?: SingleBooleanChoiceArg<"showCaption">;
  forBrands?: SingleBooleanChoiceArg<"forBrands">;
  className?: string;
}

function PlasmicMobileAppMock__RenderFunc(props: {
  variants: PlasmicMobileAppMock__VariantsArgs;
  args: PlasmicMobileAppMock__ArgsType;
  overrides: PlasmicMobileAppMock__OverridesType;
  dataFetches?: PlasmicMobileAppMock__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__hideAppLinks]: hasVariant(
          variants,
          "hideAppLinks",
          "hideAppLinks"
        ),
        [sty.root__products_cardVisible]: hasVariant(
          variants,
          "products",
          "cardVisible"
        ),
        [sty.root__showCaption]: hasVariant(
          variants,
          "showCaption",
          "showCaption"
        )
      })}
      id={args.id}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame34414"}
        data-plasmic-override={overrides.frame34414}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame34414, {
          [sty.frame34414__forBrands]: hasVariant(
            variants,
            "forBrands",
            "forBrands"
          ),
          [sty.frame34414__hideAppLinks]: hasVariant(
            variants,
            "hideAppLinks",
            "hideAppLinks"
          ),
          [sty.frame34414__products_cardVisible]: hasVariant(
            variants,
            "products",
            "cardVisible"
          ),
          [sty.frame34414__showCaption]: hasVariant(
            variants,
            "showCaption",
            "showCaption"
          )
        })}
      >
        {(hasVariant(globalVariants, "screen", "laptop") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"copy28"}
            data-plasmic-override={overrides.copy28}
            hasGap={true}
            className={classNames(projectcss.all, sty.copy28, {
              [sty.copy28__products_cardVisible]: hasVariant(
                variants,
                "products",
                "cardVisible"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Miami Marlins has partnered with Cardless to offer a card designed \naround you",
              value: args.header4,
              className: classNames(sty.slotTargetHeader4, {
                [sty.slotTargetHeader4__hideAppLinks]: hasVariant(
                  variants,
                  "hideAppLinks",
                  "hideAppLinks"
                ),
                [sty.slotTargetHeader4__products_cardVisible]: hasVariant(
                  variants,
                  "products",
                  "cardVisible"
                ),
                [sty.slotTargetHeader4__showCaption]: hasVariant(
                  variants,
                  "showCaption",
                  "showCaption"
                )
              })
            })}

            {(
              hasVariant(variants, "showCaption", "showCaption")
                ? true
                : hasVariant(variants, "products", "cardVisible")
                ? false
                : hasVariant(globalVariants, "screen", "tablet")
                ? false
                : hasVariant(globalVariants, "screen", "laptopSmall")
                ? false
                : hasVariant(globalVariants, "screen", "laptop")
                ? false
                : true
            )
              ? p.renderPlasmicSlot({
                  defaultContents:
                    "From application to daily use, our high-tech platform enables a simple, rewarding experience throughout each customer’s journey",
                  value: args.caption,
                  className: classNames(sty.slotTargetCaption, {
                    [sty.slotTargetCaption__products_cardVisible]: hasVariant(
                      variants,
                      "products",
                      "cardVisible"
                    ),
                    [sty.slotTargetCaption__showCaption]: hasVariant(
                      variants,
                      "showCaption",
                      "showCaption"
                    )
                  })
                })
              : null}
          </p.Stack>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__cxQxP, {
            [sty.freeBox__showCaption__cxQxPiXvwg]: hasVariant(
              variants,
              "showCaption",
              "showCaption"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"benefitsRow5"}
            data-plasmic-override={overrides.benefitsRow5}
            hasGap={true}
            className={classNames(projectcss.all, sty.benefitsRow5, {
              [sty.benefitsRow5__products_cardVisible]: hasVariant(
                variants,
                "products",
                "cardVisible"
              )
            })}
          >
            <BenefitRow
              benefits={
                hasVariant(variants, "forBrands", "forBrands")
                  ? "Cardless members can easily manage spending, payments and rewards through the Cardless app"
                  : "Easily manage spending, payments, rewards, and so much more "
              }
              className={classNames("__wab_instance", sty.benefitRow___5AEcm)}
              header={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3B33L,
                    {
                      [sty.text__forBrands___3B33LUl0Wp]: hasVariant(
                        variants,
                        "forBrands",
                        "forBrands"
                      )
                    }
                  )}
                >
                  {"Modern credit cards"}
                </div>
              }
            />

            <BenefitRow
              benefits={
                hasVariant(variants, "forBrands", "forBrands")
                  ? "Cardless members earn points with every purchase, and can choose from a range of fulfilling rewards"
                  : "Cardless was founded in San Francisco. We help brands connect with their customers using credit cards"
              }
              className={classNames("__wab_instance", sty.benefitRow__lJpEd, {
                [sty.benefitRow__showCaption__lJpEdIXvwg]: hasVariant(
                  variants,
                  "showCaption",
                  "showCaption"
                )
              })}
              header={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rM6Bh,
                    {
                      [sty.text__forBrands__rM6BhUl0Wp]: hasVariant(
                        variants,
                        "forBrands",
                        "forBrands"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "forBrands", "forBrands")
                    ? "Competitive rewards value"
                    : "About us"}
                </div>
              }
            />

            <BenefitRow
              benefits={
                hasVariant(variants, "forBrands", "forBrands")
                  ? "Cardless waives late fees and foreign transaction fees across the board. See Rates & Terms below"
                  : "We are partnered with First Electronic Bank, member FDIC, and Mastercard"
              }
              className={classNames("__wab_instance", sty.benefitRow__hzzl0)}
              header={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nvt57,
                    {
                      [sty.text__forBrands__nvt57Ul0Wp]: hasVariant(
                        variants,
                        "forBrands",
                        "forBrands"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "forBrands", "forBrands")
                    ? "No hidden fees"
                    : "Trusted"}
                </div>
              }
            />
          </p.Stack>

          <div
            data-plasmic-name={"mocks"}
            data-plasmic-override={overrides.mocks}
            className={classNames(projectcss.all, sty.mocks, {
              [sty.mocks__global_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            })}
          >
            {(
              hasVariant(variants, "products", "cardVisible")
                ? true
                : hasVariant(globalVariants, "screen", "tabletSmall")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(globalVariants, "screen", "laptopSmall")
                ? true
                : hasVariant(globalVariants, "screen", "laptop")
                ? true
                : true
            ) ? (
              <div
                data-plasmic-name={"brand"}
                data-plasmic-override={overrides.brand}
                className={classNames(projectcss.all, sty.brand, {
                  [sty.brand__global_unnamedGlobalGroupOfVariants_unnamedVariant]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants",
                      "unnamedVariant"
                    ),
                  [sty.brand__hideAppLinks]: hasVariant(
                    variants,
                    "hideAppLinks",
                    "hideAppLinks"
                  ),
                  [sty.brand__products_cardVisible]: hasVariant(
                    variants,
                    "products",
                    "cardVisible"
                  )
                })}
              >
                <div
                  data-plasmic-name={"iphone12ProGraphite"}
                  data-plasmic-override={overrides.iphone12ProGraphite}
                  className={classNames(
                    projectcss.all,
                    sty.iphone12ProGraphite
                  )}
                >
                  {false ? (
                    <SilverIcon
                      className={classNames(projectcss.all, sty.svg__hphLg)}
                      role={"img"}
                    />
                  ) : null}

                  <SilverIcon
                    className={classNames(projectcss.all, sty.svg__xCuGe)}
                    role={"img"}
                  />

                  {false ? (
                    <SilverIcon
                      className={classNames(projectcss.all, sty.svg__zT5KT)}
                      role={"img"}
                    />
                  ) : null}
                  {false ? (
                    <SilverIcon
                      className={classNames(projectcss.all, sty.svg__fWv8Y)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    data-plasmic-name={"shadows"}
                    data-plasmic-override={overrides.shadows}
                    className={classNames(projectcss.all, sty.shadows)}
                  >
                    <div
                      data-plasmic-name={"group8"}
                      data-plasmic-override={overrides.group8}
                      className={classNames(projectcss.all, sty.group8)}
                    >
                      <Rectangle11Icon
                        className={classNames(projectcss.all, sty.svg__xgodw)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"group4"}
                        data-plasmic-override={overrides.group4}
                        className={classNames(projectcss.all, sty.group4)}
                      >
                        <div
                          data-plasmic-name={"rectangle23"}
                          data-plasmic-override={overrides.rectangle23}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle23
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle25"}
                          data-plasmic-override={overrides.rectangle25}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle25
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle24"}
                          data-plasmic-override={overrides.rectangle24}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle24
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle26"}
                          data-plasmic-override={overrides.rectangle26}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle26
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle27"}
                          data-plasmic-override={overrides.rectangle27}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle27
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle28"}
                          data-plasmic-override={overrides.rectangle28}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle28
                          )}
                        />
                      </div>
                    </div>

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__gH6Us)}
                      displayHeight={"497px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"240px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/rectangle20.svg",
                        fullWidth: 240,
                        fullHeight: 497,
                        aspectRatio: 0.482897
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__bXeZ)}
                      displayHeight={"121.088px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"247.992px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/group10.svg",
                        fullWidth: 247.992,
                        fullHeight: 121.088,
                        aspectRatio: 2.032787
                      }}
                    />
                  </div>

                  <div
                    data-plasmic-name={"highlights"}
                    data-plasmic-override={overrides.highlights}
                    className={classNames(projectcss.all, sty.highlights)}
                  >
                    <div
                      data-plasmic-name={"group9"}
                      data-plasmic-override={overrides.group9}
                      className={classNames(projectcss.all, sty.group9)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__gtUEw)}
                        displayHeight={"502px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"245px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_cardless_com/images/rectangle12.svg",
                          fullWidth: 245,
                          fullHeight: 502,
                          aspectRatio: 0.488048
                        }}
                      />

                      <div
                        data-plasmic-name={"group5"}
                        data-plasmic-override={overrides.group5}
                        className={classNames(projectcss.all, sty.group5)}
                      >
                        <div
                          data-plasmic-name={"rectangle29"}
                          data-plasmic-override={overrides.rectangle29}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle29
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle30"}
                          data-plasmic-override={overrides.rectangle30}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle30
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle31"}
                          data-plasmic-override={overrides.rectangle31}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle31
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle32"}
                          data-plasmic-override={overrides.rectangle32}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle32
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle33"}
                          data-plasmic-override={overrides.rectangle33}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle33
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle34"}
                          data-plasmic-override={overrides.rectangle34}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle34
                          )}
                        />
                      </div>
                    </div>

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__xm0W)}
                      displayHeight={"497px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"240px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/rectangle21.svg",
                        fullWidth: 240,
                        fullHeight: 497,
                        aspectRatio: 0.482897
                      }}
                    />

                    <SubtractIcon
                      className={classNames(projectcss.all, sty.svg___14EvT)}
                      role={"img"}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___08DCz)}
                      displayHeight={"121.088px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"247.992px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_cardless_com/images/group11.svg",
                        fullWidth: 247.992,
                        fullHeight: 121.088,
                        aspectRatio: 2.032787
                      }}
                    />
                  </div>

                  <div
                    data-plasmic-name={"group11"}
                    data-plasmic-override={overrides.group11}
                    className={classNames(projectcss.all, sty.group11)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jXxU, {
                        [sty.freeBox__global_unnamedGlobalGroupOfVariants_unnamedVariant__jXxUkmftK]:
                          hasVariant(
                            globalVariants,
                            "unnamedGlobalGroupOfVariants",
                            "unnamedVariant"
                          ),
                        [sty.freeBox__hideAppLinks__jXxUrwxBi]: hasVariant(
                          variants,
                          "hideAppLinks",
                          "hideAppLinks"
                        ),
                        [sty.freeBox__products_cardVisible__jXxUp7RG]:
                          hasVariant(variants, "products", "cardVisible")
                      })}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__a4QCt)}
                            displayHeight={"477.171px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"220.285px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_cardless_com/images/iphone12ProScreen.svg",
                              fullWidth: 220.285,
                              fullHeight: 477.171,
                              aspectRatio: 0.462343
                            }}
                          />
                        ),

                        value: args.children
                      })}
                    </div>
                  </div>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__dfad8)}
                    displayHeight={"9.577px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"41.729px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_cardless_com/images/group9.svg",
                      fullWidth: 41.729,
                      fullHeight: 9.577,
                      aspectRatio: 4.3
                    }}
                  />
                </div>

                {(
                  hasVariant(globalVariants, "screen", "laptopSmall")
                    ? true
                    : true
                ) ? (
                  <div
                    data-plasmic-name={"card"}
                    data-plasmic-override={overrides.card}
                    className={classNames(projectcss.all, sty.card, {
                      [sty.card__global_unnamedGlobalGroupOfVariants_unnamedVariant]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        ),
                      [sty.card__hideAppLinks]: hasVariant(
                        variants,
                        "hideAppLinks",
                        "hideAppLinks"
                      ),
                      [sty.card__products_cardVisible]: hasVariant(
                        variants,
                        "products",
                        "cardVisible"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__wMwN6,
                        {
                          [sty.freeBox__products_cardVisible__wMwN6P7RG]:
                            hasVariant(variants, "products", "cardVisible")
                        }
                      )}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___0PRpg)}
                            displayHeight={"100%" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"100%" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_cardless_com/images/manuCard2.png",
                              fullWidth: 2048,
                              fullHeight: 1292,
                              aspectRatio: undefined
                            }}
                          />
                        ),

                        value: args.slot
                      })}
                    </div>
                  </div>
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant(variants, "products", "cardVisible")
                ? true
                : hasVariant(globalVariants, "screen", "tabletSmall")
                ? true
                : true
            ) ? (
              <div
                data-plasmic-name={"rating"}
                data-plasmic-override={overrides.rating}
                className={classNames(projectcss.all, sty.rating, {
                  [sty.rating__hideAppLinks]: hasVariant(
                    variants,
                    "hideAppLinks",
                    "hideAppLinks"
                  ),
                  [sty.rating__products_cardVisible]: hasVariant(
                    variants,
                    "products",
                    "cardVisible"
                  )
                })}
              >
                {true ? (
                  <div
                    data-plasmic-name={"figmaPaste"}
                    data-plasmic-override={overrides.figmaPaste}
                    className={classNames(projectcss.all, sty.figmaPaste, {
                      [sty.figmaPaste__hideAppLinks]: hasVariant(
                        variants,
                        "hideAppLinks",
                        "hideAppLinks"
                      )
                    })}
                  >
                    {true ? (
                      <div
                        data-plasmic-name={"image"}
                        data-plasmic-override={overrides.image}
                        className={classNames(projectcss.all, sty.image, {
                          [sty.image__hideAppLinks]: hasVariant(
                            variants,
                            "hideAppLinks",
                            "hideAppLinks"
                          )
                        })}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b08Cm
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "tablet")
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "laptopSmall"
                                )
                              ? true
                              : true
                          ) ? (
                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"heroUiTransactions1"}
                              data-plasmic-override={
                                overrides.heroUiTransactions1
                              }
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.heroUiTransactions1,
                                {
                                  [sty.heroUiTransactions1__hideAppLinks]:
                                    hasVariant(
                                      variants,
                                      "hideAppLinks",
                                      "hideAppLinks"
                                    )
                                }
                              )}
                            >
                              <p.Stack
                                as={"div"}
                                data-plasmic-name={"starRating"}
                                data-plasmic-override={overrides.starRating}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.starRating
                                )}
                              >
                                <Star1Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__kUCgf
                                  )}
                                  role={"img"}
                                />

                                <Star1Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__avl5J
                                  )}
                                  role={"img"}
                                />

                                <Star1Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__vpeG5
                                  )}
                                  role={"img"}
                                />

                                <Star1Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__kkf1Y
                                  )}
                                  role={"img"}
                                />

                                <div
                                  data-plasmic-name={"frame34415"}
                                  data-plasmic-override={overrides.frame34415}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame34415
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"grayBg"}
                                    data-plasmic-override={overrides.grayBg}
                                    className={classNames(
                                      projectcss.all,
                                      sty.grayBg
                                    )}
                                  />

                                  <div
                                    data-plasmic-name={"goldBg"}
                                    data-plasmic-override={overrides.goldBg}
                                    className={classNames(
                                      projectcss.all,
                                      sty.goldBg
                                    )}
                                  />
                                </div>
                              </p.Stack>

                              {false ? (
                                <div
                                  data-plasmic-name={"transaction"}
                                  data-plasmic-override={overrides.transaction}
                                  className={classNames(
                                    projectcss.all,
                                    sty.transaction
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"content"}
                                    data-plasmic-override={overrides.content}
                                    className={classNames(
                                      projectcss.all,
                                      sty.content
                                    )}
                                  >
                                    <p.Stack
                                      as={"div"}
                                      data-plasmic-name={"left"}
                                      data-plasmic-override={overrides.left}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.left
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"transactionIcon"}
                                        data-plasmic-override={
                                          overrides.transactionIcon
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.transactionIcon
                                        )}
                                      >
                                        <Cutlery3Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__mg3Ho
                                          )}
                                          role={"img"}
                                        />
                                      </div>
                                    </p.Stack>

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__ifTWn
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qtR4
                                        )}
                                      >
                                        {"Dolores Market"}
                                      </div>

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__awvyh
                                        )}
                                      >
                                        {"52 Points"}
                                      </div>
                                    </div>

                                    <div
                                      data-plasmic-name={"right"}
                                      data-plasmic-override={overrides.right}
                                      className={classNames(
                                        projectcss.all,
                                        sty.right
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__nyeVb
                                        )}
                                      >
                                        {"$25.99"}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ) : null}

                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__zFatp
                                )}
                              >
                                <div
                                  data-plasmic-name={"transaction2"}
                                  data-plasmic-override={overrides.transaction2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.transaction2
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"content2"}
                                    data-plasmic-override={overrides.content2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.content2
                                    )}
                                  >
                                    <p.Stack
                                      as={"div"}
                                      data-plasmic-name={"left2"}
                                      data-plasmic-override={overrides.left2}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.left2
                                      )}
                                    >
                                      <p.PlasmicImg
                                        alt={""}
                                        className={classNames(sty.img__qls3R)}
                                        displayHeight={"32px" as const}
                                        displayMaxHeight={"none" as const}
                                        displayMaxWidth={"100%" as const}
                                        displayMinHeight={"0" as const}
                                        displayMinWidth={"0" as const}
                                        displayWidth={"32px" as const}
                                        loading={"lazy" as const}
                                        src={{
                                          src: "/plasmic/copy_of_cardless_com/images/appStore12.svg",
                                          fullWidth: 32,
                                          fullHeight: 32,
                                          aspectRatio: 1
                                        }}
                                      />
                                    </p.Stack>

                                    <div
                                      data-plasmic-name={"text2"}
                                      data-plasmic-override={overrides.text2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.text2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__udPZd
                                        )}
                                      >
                                        {"App Store"}
                                      </div>
                                    </div>

                                    <div
                                      data-plasmic-name={"right2"}
                                      data-plasmic-override={overrides.right2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.right2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__fMXpN
                                        )}
                                      >
                                        {"4.7 Stars"}
                                      </div>
                                    </div>
                                  </div>
                                </div>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bsiHt
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? "Image for illustrative purposes"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tabletSmall"
                                      )
                                    ? "Image for illustrative purposes"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "laptopSmall"
                                      )
                                    ? "Image for illustrative purposes"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "laptop"
                                      )
                                    ? "Image for illustrative purposes"
                                    : "Last updated 01/12/21"}
                                </div>
                              </p.Stack>

                              {false ? (
                                <div
                                  data-plasmic-name={"transaction3"}
                                  data-plasmic-override={overrides.transaction3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.transaction3
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"content3"}
                                    data-plasmic-override={overrides.content3}
                                    className={classNames(
                                      projectcss.all,
                                      sty.content3
                                    )}
                                  >
                                    <p.Stack
                                      as={"div"}
                                      data-plasmic-name={"left3"}
                                      data-plasmic-override={overrides.left3}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.left3
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"transactionIcon2"}
                                        data-plasmic-override={
                                          overrides.transactionIcon2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.transactionIcon2
                                        )}
                                      >
                                        <CreditCard2Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__bfIHs
                                          )}
                                          role={"img"}
                                        />
                                      </div>
                                    </p.Stack>

                                    <div
                                      data-plasmic-name={"text3"}
                                      data-plasmic-override={overrides.text3}
                                      className={classNames(
                                        projectcss.all,
                                        sty.text3
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___5Kn4M
                                        )}
                                      >
                                        {"Sea View Ranch"}
                                      </div>

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__dy8Pd
                                        )}
                                      >
                                        {"16 Points"}
                                      </div>
                                    </div>

                                    <div
                                      data-plasmic-name={"right3"}
                                      data-plasmic-override={overrides.right3}
                                      className={classNames(
                                        projectcss.all,
                                        sty.right3
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__hRb
                                        )}
                                      >
                                        {"$15.82"}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ) : null}
                              {true ? (
                                <div
                                  data-plasmic-name={"transaction4"}
                                  data-plasmic-override={overrides.transaction4}
                                  className={classNames(
                                    projectcss.all,
                                    sty.transaction4
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"content4"}
                                    data-plasmic-override={overrides.content4}
                                    className={classNames(
                                      projectcss.all,
                                      sty.content4
                                    )}
                                  >
                                    <p.Stack
                                      as={"div"}
                                      data-plasmic-name={"left4"}
                                      data-plasmic-override={overrides.left4}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.left4
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"appStore11"}
                                        data-plasmic-override={
                                          overrides.appStore11
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.appStore11
                                        )}
                                      >
                                        <Vector3Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__eb9Qa
                                          )}
                                          role={"img"}
                                        />

                                        <p.PlasmicImg
                                          alt={""}
                                          className={classNames(sty.img__kLay)}
                                          displayHeight={"18.846px" as const}
                                          displayMaxHeight={"none" as const}
                                          displayMaxWidth={"100%" as const}
                                          displayMinHeight={"0" as const}
                                          displayMinWidth={"0" as const}
                                          displayWidth={"17.635px" as const}
                                          loading={"lazy" as const}
                                          src={{
                                            src: "/plasmic/copy_of_cardless_com/images/googlePlayArrowLogo2.svg",
                                            fullWidth: 17.635,
                                            fullHeight: 18.846,
                                            aspectRatio: 0.947368
                                          }}
                                        />
                                      </div>
                                    </p.Stack>

                                    <div
                                      data-plasmic-name={"text4"}
                                      data-plasmic-override={overrides.text4}
                                      className={classNames(
                                        projectcss.all,
                                        sty.text4
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__i6A5
                                        )}
                                      >
                                        {"Play Store"}
                                      </div>

                                      {false ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___60OxA
                                          )}
                                        >
                                          {"17 Points"}
                                        </div>
                                      ) : null}
                                    </div>

                                    <div
                                      data-plasmic-name={"right4"}
                                      data-plasmic-override={overrides.right4}
                                      className={classNames(
                                        projectcss.all,
                                        sty.right4
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___3B0Xw
                                        )}
                                      >
                                        {"5.0 Stars"}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ) : null}
                            </p.Stack>
                          ) : null}
                        </div>
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "tabletSmall")
                        ? true
                        : true
                    ) ? (
                      <div
                        data-plasmic-name={"iphone12ProGraphite2"}
                        data-plasmic-override={overrides.iphone12ProGraphite2}
                        className={classNames(
                          projectcss.all,
                          sty.iphone12ProGraphite2
                        )}
                      >
                        {false ? (
                          <Silver3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fI9Li
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <Silver3Icon
                          className={classNames(projectcss.all, sty.svg__sp9K2)}
                          role={"img"}
                        />

                        {false ? (
                          <Silver3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__l1RuP
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {false ? (
                          <Silver3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mlydw
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          data-plasmic-name={"shadows2"}
                          data-plasmic-override={overrides.shadows2}
                          className={classNames(projectcss.all, sty.shadows2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__t9Y5Z
                            )}
                          >
                            <Rectangle16Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uj8Ou
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oMrC
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__fpRbN
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hb496
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__e3LSe
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cgKpS
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___63LP
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uaaBv
                                )}
                              />
                            </div>
                          </div>

                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__e8Aww)}
                            displayHeight={"497px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"240px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_cardless_com/images/rectangle24.svg",
                              fullWidth: 240,
                              fullHeight: 497,
                              aspectRatio: 0.482897
                            }}
                          />

                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__j85VJ)}
                            displayHeight={"121.092px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"248px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_cardless_com/images/group18.svg",
                              fullWidth: 248,
                              fullHeight: 121.092,
                              aspectRatio: 2.032787
                            }}
                          />
                        </div>

                        <div
                          data-plasmic-name={"highlights2"}
                          data-plasmic-override={overrides.highlights2}
                          className={classNames(
                            projectcss.all,
                            sty.highlights2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vNjTw
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__b4VIt)}
                              displayHeight={"502px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"245px" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/copy_of_cardless_com/images/rectangle18.svg",
                                fullWidth: 245,
                                fullHeight: 502,
                                aspectRatio: 0.488048
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wz59
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__spOij
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gJtVv
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4Kdqk
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__beRad
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___6Uo0A
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__abAoJ
                                )}
                              />
                            </div>
                          </div>

                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__c7H2J)}
                            displayHeight={"497px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"240px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_cardless_com/images/rectangle25.svg",
                              fullWidth: 240,
                              fullHeight: 497,
                              aspectRatio: 0.482897
                            }}
                          />

                          <Subtract3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___8FLic
                            )}
                            role={"img"}
                          />

                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___2MJwl)}
                            displayHeight={"121.092px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"248px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/copy_of_cardless_com/images/group19.svg",
                              fullWidth: 248,
                              fullHeight: 121.092,
                              aspectRatio: 2.032787
                            }}
                          />
                        </div>

                        <div
                          data-plasmic-name={"group12"}
                          data-plasmic-override={overrides.group12}
                          className={classNames(projectcss.all, sty.group12)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__isWl0,
                              {
                                [sty.freeBox__global_unnamedGlobalGroupOfVariants_unnamedVariant__isWl0KmftK]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  ),
                                [sty.freeBox__products_cardVisible__isWl0P7RG]:
                                  hasVariant(
                                    variants,
                                    "products",
                                    "cardVisible"
                                  )
                              }
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__ztmC0)}
                                  displayHeight={"477.186px" as const}
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"100%" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"220.292px" as const}
                                  loading={"lazy" as const}
                                  src={{
                                    src: "/plasmic/copy_of_cardless_com/images/homeMarlinspng.png",
                                    fullWidth: 750,
                                    fullHeight: 1624,
                                    aspectRatio: undefined
                                  }}
                                />
                              ),

                              value: args.slot2
                            })}
                          </div>
                        </div>

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__d7TN2)}
                          displayHeight={"9.577px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"41.732px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_cardless_com/images/group20.svg",
                            fullWidth: 41.732,
                            fullHeight: 9.577,
                            aspectRatio: 4.3
                          }}
                        />
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>
        </p.Stack>

        {(
          hasVariant(variants, "hideAppLinks", "hideAppLinks") ? true : true
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"downloadButtons2"}
            data-plasmic-override={overrides.downloadButtons2}
            hasGap={true}
            className={classNames(projectcss.all, sty.downloadButtons2, {
              [sty.downloadButtons2__hideAppLinks]: hasVariant(
                variants,
                "hideAppLinks",
                "hideAppLinks"
              )
            })}
          >
            <AppStoreCta
              data-plasmic-name={"appStoreCta"}
              data-plasmic-override={overrides.appStoreCta}
              className={classNames("__wab_instance", sty.appStoreCta)}
            />

            <PlayStoreCta
              data-plasmic-name={"playStoreCta"}
              data-plasmic-override={overrides.playStoreCta}
              className={classNames("__wab_instance", sty.playStoreCta)}
            />
          </p.Stack>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame34414",
    "copy28",
    "benefitsRow5",
    "mocks",
    "brand",
    "iphone12ProGraphite",
    "shadows",
    "group8",
    "group4",
    "rectangle23",
    "rectangle25",
    "rectangle24",
    "rectangle26",
    "rectangle27",
    "rectangle28",
    "highlights",
    "group9",
    "group5",
    "rectangle29",
    "rectangle30",
    "rectangle31",
    "rectangle32",
    "rectangle33",
    "rectangle34",
    "group11",
    "card",
    "rating",
    "figmaPaste",
    "image",
    "heroUiTransactions1",
    "starRating",
    "frame34415",
    "grayBg",
    "goldBg",
    "transaction",
    "content",
    "left",
    "transactionIcon",
    "right",
    "transaction2",
    "content2",
    "left2",
    "text2",
    "right2",
    "transaction3",
    "content3",
    "left3",
    "transactionIcon2",
    "text3",
    "right3",
    "transaction4",
    "content4",
    "left4",
    "appStore11",
    "text4",
    "right4",
    "iphone12ProGraphite2",
    "shadows2",
    "highlights2",
    "group12",
    "downloadButtons2",
    "appStoreCta",
    "playStoreCta"
  ],
  frame34414: [
    "frame34414",
    "copy28",
    "benefitsRow5",
    "mocks",
    "brand",
    "iphone12ProGraphite",
    "shadows",
    "group8",
    "group4",
    "rectangle23",
    "rectangle25",
    "rectangle24",
    "rectangle26",
    "rectangle27",
    "rectangle28",
    "highlights",
    "group9",
    "group5",
    "rectangle29",
    "rectangle30",
    "rectangle31",
    "rectangle32",
    "rectangle33",
    "rectangle34",
    "group11",
    "card",
    "rating",
    "figmaPaste",
    "image",
    "heroUiTransactions1",
    "starRating",
    "frame34415",
    "grayBg",
    "goldBg",
    "transaction",
    "content",
    "left",
    "transactionIcon",
    "right",
    "transaction2",
    "content2",
    "left2",
    "text2",
    "right2",
    "transaction3",
    "content3",
    "left3",
    "transactionIcon2",
    "text3",
    "right3",
    "transaction4",
    "content4",
    "left4",
    "appStore11",
    "text4",
    "right4",
    "iphone12ProGraphite2",
    "shadows2",
    "highlights2",
    "group12",
    "downloadButtons2",
    "appStoreCta",
    "playStoreCta"
  ],
  copy28: ["copy28"],
  benefitsRow5: ["benefitsRow5"],
  mocks: [
    "mocks",
    "brand",
    "iphone12ProGraphite",
    "shadows",
    "group8",
    "group4",
    "rectangle23",
    "rectangle25",
    "rectangle24",
    "rectangle26",
    "rectangle27",
    "rectangle28",
    "highlights",
    "group9",
    "group5",
    "rectangle29",
    "rectangle30",
    "rectangle31",
    "rectangle32",
    "rectangle33",
    "rectangle34",
    "group11",
    "card",
    "rating",
    "figmaPaste",
    "image",
    "heroUiTransactions1",
    "starRating",
    "frame34415",
    "grayBg",
    "goldBg",
    "transaction",
    "content",
    "left",
    "transactionIcon",
    "right",
    "transaction2",
    "content2",
    "left2",
    "text2",
    "right2",
    "transaction3",
    "content3",
    "left3",
    "transactionIcon2",
    "text3",
    "right3",
    "transaction4",
    "content4",
    "left4",
    "appStore11",
    "text4",
    "right4",
    "iphone12ProGraphite2",
    "shadows2",
    "highlights2",
    "group12"
  ],
  brand: [
    "brand",
    "iphone12ProGraphite",
    "shadows",
    "group8",
    "group4",
    "rectangle23",
    "rectangle25",
    "rectangle24",
    "rectangle26",
    "rectangle27",
    "rectangle28",
    "highlights",
    "group9",
    "group5",
    "rectangle29",
    "rectangle30",
    "rectangle31",
    "rectangle32",
    "rectangle33",
    "rectangle34",
    "group11",
    "card"
  ],
  iphone12ProGraphite: [
    "iphone12ProGraphite",
    "shadows",
    "group8",
    "group4",
    "rectangle23",
    "rectangle25",
    "rectangle24",
    "rectangle26",
    "rectangle27",
    "rectangle28",
    "highlights",
    "group9",
    "group5",
    "rectangle29",
    "rectangle30",
    "rectangle31",
    "rectangle32",
    "rectangle33",
    "rectangle34",
    "group11"
  ],
  shadows: [
    "shadows",
    "group8",
    "group4",
    "rectangle23",
    "rectangle25",
    "rectangle24",
    "rectangle26",
    "rectangle27",
    "rectangle28"
  ],
  group8: [
    "group8",
    "group4",
    "rectangle23",
    "rectangle25",
    "rectangle24",
    "rectangle26",
    "rectangle27",
    "rectangle28"
  ],
  group4: [
    "group4",
    "rectangle23",
    "rectangle25",
    "rectangle24",
    "rectangle26",
    "rectangle27",
    "rectangle28"
  ],
  rectangle23: ["rectangle23"],
  rectangle25: ["rectangle25"],
  rectangle24: ["rectangle24"],
  rectangle26: ["rectangle26"],
  rectangle27: ["rectangle27"],
  rectangle28: ["rectangle28"],
  highlights: [
    "highlights",
    "group9",
    "group5",
    "rectangle29",
    "rectangle30",
    "rectangle31",
    "rectangle32",
    "rectangle33",
    "rectangle34"
  ],
  group9: [
    "group9",
    "group5",
    "rectangle29",
    "rectangle30",
    "rectangle31",
    "rectangle32",
    "rectangle33",
    "rectangle34"
  ],
  group5: [
    "group5",
    "rectangle29",
    "rectangle30",
    "rectangle31",
    "rectangle32",
    "rectangle33",
    "rectangle34"
  ],
  rectangle29: ["rectangle29"],
  rectangle30: ["rectangle30"],
  rectangle31: ["rectangle31"],
  rectangle32: ["rectangle32"],
  rectangle33: ["rectangle33"],
  rectangle34: ["rectangle34"],
  group11: ["group11"],
  card: ["card"],
  rating: [
    "rating",
    "figmaPaste",
    "image",
    "heroUiTransactions1",
    "starRating",
    "frame34415",
    "grayBg",
    "goldBg",
    "transaction",
    "content",
    "left",
    "transactionIcon",
    "right",
    "transaction2",
    "content2",
    "left2",
    "text2",
    "right2",
    "transaction3",
    "content3",
    "left3",
    "transactionIcon2",
    "text3",
    "right3",
    "transaction4",
    "content4",
    "left4",
    "appStore11",
    "text4",
    "right4",
    "iphone12ProGraphite2",
    "shadows2",
    "highlights2",
    "group12"
  ],
  figmaPaste: [
    "figmaPaste",
    "image",
    "heroUiTransactions1",
    "starRating",
    "frame34415",
    "grayBg",
    "goldBg",
    "transaction",
    "content",
    "left",
    "transactionIcon",
    "right",
    "transaction2",
    "content2",
    "left2",
    "text2",
    "right2",
    "transaction3",
    "content3",
    "left3",
    "transactionIcon2",
    "text3",
    "right3",
    "transaction4",
    "content4",
    "left4",
    "appStore11",
    "text4",
    "right4",
    "iphone12ProGraphite2",
    "shadows2",
    "highlights2",
    "group12"
  ],
  image: [
    "image",
    "heroUiTransactions1",
    "starRating",
    "frame34415",
    "grayBg",
    "goldBg",
    "transaction",
    "content",
    "left",
    "transactionIcon",
    "right",
    "transaction2",
    "content2",
    "left2",
    "text2",
    "right2",
    "transaction3",
    "content3",
    "left3",
    "transactionIcon2",
    "text3",
    "right3",
    "transaction4",
    "content4",
    "left4",
    "appStore11",
    "text4",
    "right4"
  ],
  heroUiTransactions1: [
    "heroUiTransactions1",
    "starRating",
    "frame34415",
    "grayBg",
    "goldBg",
    "transaction",
    "content",
    "left",
    "transactionIcon",
    "right",
    "transaction2",
    "content2",
    "left2",
    "text2",
    "right2",
    "transaction3",
    "content3",
    "left3",
    "transactionIcon2",
    "text3",
    "right3",
    "transaction4",
    "content4",
    "left4",
    "appStore11",
    "text4",
    "right4"
  ],
  starRating: ["starRating", "frame34415", "grayBg", "goldBg"],
  frame34415: ["frame34415", "grayBg", "goldBg"],
  grayBg: ["grayBg"],
  goldBg: ["goldBg"],
  transaction: ["transaction", "content", "left", "transactionIcon", "right"],
  content: ["content", "left", "transactionIcon", "right"],
  left: ["left", "transactionIcon"],
  transactionIcon: ["transactionIcon"],
  right: ["right"],
  transaction2: ["transaction2", "content2", "left2", "text2", "right2"],
  content2: ["content2", "left2", "text2", "right2"],
  left2: ["left2"],
  text2: ["text2"],
  right2: ["right2"],
  transaction3: [
    "transaction3",
    "content3",
    "left3",
    "transactionIcon2",
    "text3",
    "right3"
  ],
  content3: ["content3", "left3", "transactionIcon2", "text3", "right3"],
  left3: ["left3", "transactionIcon2"],
  transactionIcon2: ["transactionIcon2"],
  text3: ["text3"],
  right3: ["right3"],
  transaction4: [
    "transaction4",
    "content4",
    "left4",
    "appStore11",
    "text4",
    "right4"
  ],
  content4: ["content4", "left4", "appStore11", "text4", "right4"],
  left4: ["left4", "appStore11"],
  appStore11: ["appStore11"],
  text4: ["text4"],
  right4: ["right4"],
  iphone12ProGraphite2: [
    "iphone12ProGraphite2",
    "shadows2",
    "highlights2",
    "group12"
  ],
  shadows2: ["shadows2"],
  highlights2: ["highlights2"],
  group12: ["group12"],
  downloadButtons2: ["downloadButtons2", "appStoreCta", "playStoreCta"],
  appStoreCta: ["appStoreCta"],
  playStoreCta: ["playStoreCta"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame34414: "div";
  copy28: "div";
  benefitsRow5: "div";
  mocks: "div";
  brand: "div";
  iphone12ProGraphite: "div";
  shadows: "div";
  group8: "div";
  group4: "div";
  rectangle23: "div";
  rectangle25: "div";
  rectangle24: "div";
  rectangle26: "div";
  rectangle27: "div";
  rectangle28: "div";
  highlights: "div";
  group9: "div";
  group5: "div";
  rectangle29: "div";
  rectangle30: "div";
  rectangle31: "div";
  rectangle32: "div";
  rectangle33: "div";
  rectangle34: "div";
  group11: "div";
  card: "div";
  rating: "div";
  figmaPaste: "div";
  image: "div";
  heroUiTransactions1: "div";
  starRating: "div";
  frame34415: "div";
  grayBg: "div";
  goldBg: "div";
  transaction: "div";
  content: "div";
  left: "div";
  transactionIcon: "div";
  right: "div";
  transaction2: "div";
  content2: "div";
  left2: "div";
  text2: "div";
  right2: "div";
  transaction3: "div";
  content3: "div";
  left3: "div";
  transactionIcon2: "div";
  text3: "div";
  right3: "div";
  transaction4: "div";
  content4: "div";
  left4: "div";
  appStore11: "div";
  text4: "div";
  right4: "div";
  iphone12ProGraphite2: "div";
  shadows2: "div";
  highlights2: "div";
  group12: "div";
  downloadButtons2: "div";
  appStoreCta: typeof AppStoreCta;
  playStoreCta: typeof PlayStoreCta;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMobileAppMock__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMobileAppMock__VariantsArgs;
    args?: PlasmicMobileAppMock__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMobileAppMock__Fetches;
  } & Omit<PlasmicMobileAppMock__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMobileAppMock__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMobileAppMock__ArgProps,
      internalVariantPropNames: PlasmicMobileAppMock__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMobileAppMock__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMobileAppMock";
  } else {
    func.displayName = `PlasmicMobileAppMock.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileAppMock = Object.assign(
  // Top-level PlasmicMobileAppMock renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame34414: makeNodeComponent("frame34414"),
    copy28: makeNodeComponent("copy28"),
    benefitsRow5: makeNodeComponent("benefitsRow5"),
    mocks: makeNodeComponent("mocks"),
    brand: makeNodeComponent("brand"),
    iphone12ProGraphite: makeNodeComponent("iphone12ProGraphite"),
    shadows: makeNodeComponent("shadows"),
    group8: makeNodeComponent("group8"),
    group4: makeNodeComponent("group4"),
    rectangle23: makeNodeComponent("rectangle23"),
    rectangle25: makeNodeComponent("rectangle25"),
    rectangle24: makeNodeComponent("rectangle24"),
    rectangle26: makeNodeComponent("rectangle26"),
    rectangle27: makeNodeComponent("rectangle27"),
    rectangle28: makeNodeComponent("rectangle28"),
    highlights: makeNodeComponent("highlights"),
    group9: makeNodeComponent("group9"),
    group5: makeNodeComponent("group5"),
    rectangle29: makeNodeComponent("rectangle29"),
    rectangle30: makeNodeComponent("rectangle30"),
    rectangle31: makeNodeComponent("rectangle31"),
    rectangle32: makeNodeComponent("rectangle32"),
    rectangle33: makeNodeComponent("rectangle33"),
    rectangle34: makeNodeComponent("rectangle34"),
    group11: makeNodeComponent("group11"),
    card: makeNodeComponent("card"),
    rating: makeNodeComponent("rating"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    image: makeNodeComponent("image"),
    heroUiTransactions1: makeNodeComponent("heroUiTransactions1"),
    starRating: makeNodeComponent("starRating"),
    frame34415: makeNodeComponent("frame34415"),
    grayBg: makeNodeComponent("grayBg"),
    goldBg: makeNodeComponent("goldBg"),
    transaction: makeNodeComponent("transaction"),
    content: makeNodeComponent("content"),
    left: makeNodeComponent("left"),
    transactionIcon: makeNodeComponent("transactionIcon"),
    right: makeNodeComponent("right"),
    transaction2: makeNodeComponent("transaction2"),
    content2: makeNodeComponent("content2"),
    left2: makeNodeComponent("left2"),
    text2: makeNodeComponent("text2"),
    right2: makeNodeComponent("right2"),
    transaction3: makeNodeComponent("transaction3"),
    content3: makeNodeComponent("content3"),
    left3: makeNodeComponent("left3"),
    transactionIcon2: makeNodeComponent("transactionIcon2"),
    text3: makeNodeComponent("text3"),
    right3: makeNodeComponent("right3"),
    transaction4: makeNodeComponent("transaction4"),
    content4: makeNodeComponent("content4"),
    left4: makeNodeComponent("left4"),
    appStore11: makeNodeComponent("appStore11"),
    text4: makeNodeComponent("text4"),
    right4: makeNodeComponent("right4"),
    iphone12ProGraphite2: makeNodeComponent("iphone12ProGraphite2"),
    shadows2: makeNodeComponent("shadows2"),
    highlights2: makeNodeComponent("highlights2"),
    group12: makeNodeComponent("group12"),
    downloadButtons2: makeNodeComponent("downloadButtons2"),
    appStoreCta: makeNodeComponent("appStoreCta"),
    playStoreCta: makeNodeComponent("playStoreCta"),

    // Metadata about props expected for PlasmicMobileAppMock
    internalVariantProps: PlasmicMobileAppMock__VariantProps,
    internalArgProps: PlasmicMobileAppMock__ArgProps
  }
);

export default PlasmicMobileAppMock;
/* prettier-ignore-end */
