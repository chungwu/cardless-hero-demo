// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: EHxtyqyRMHbY
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicFaqLink.module.css"; // plasmic-import: EHxtyqyRMHbY/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon

export type PlasmicFaqLink__VariantMembers = {
  selected: "closed" | "open";
};

export type PlasmicFaqLink__VariantsArgs = {
  selected?: MultiChoiceArg<"closed" | "open">;
};

type VariantPropType = keyof PlasmicFaqLink__VariantsArgs;
export const PlasmicFaqLink__VariantProps = new Array<VariantPropType>(
  "selected"
);

export type PlasmicFaqLink__ArgsType = {
  children?: React.ReactNode;
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicFaqLink__ArgsType;
export const PlasmicFaqLink__ArgProps = new Array<ArgPropType>(
  "children",
  "destination"
);

export type PlasmicFaqLink__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  freeBox?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultFaqLinkProps {
  children?: React.ReactNode;
  destination?: string | PageHref;
  selected?: MultiChoiceArg<"closed" | "open">;
  className?: string;
}

function PlasmicFaqLink__RenderFunc(props: {
  variants: PlasmicFaqLink__VariantsArgs;
  args: PlasmicFaqLink__ArgsType;
  overrides: PlasmicFaqLink__OverridesType;
  dataFetches?: PlasmicFaqLink__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.a, projectcss.root_reset, sty.root, {
        [sty.root__selected_closed]: hasVariant(variants, "selected", "closed"),
        [sty.root__selected_open]: hasVariant(variants, "selected", "open")
      })}
      component={Link}
      href={args.destination}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Label",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildren__selected_closed]: hasVariant(
              variants,
              "selected",
              "closed"
            ),
            [sty.slotTargetChildren__selected_open]: hasVariant(
              variants,
              "selected",
              "open"
            )
          })
        })}

        {(
          hasVariant(variants, "selected", "open")
            ? true
            : hasVariant(variants, "selected", "closed")
            ? true
            : true
        ) ? (
          <ArrowRightIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svg__selected_closed]: hasVariant(
                variants,
                "selected",
                "closed"
              ),
              [sty.svg__selected_open]: hasVariant(variants, "selected", "open")
            })}
            role={"img"}
          />
        ) : null}
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "svg"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  freeBox: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqLink__VariantsArgs;
    args?: PlasmicFaqLink__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFaqLink__Fetches;
  } & Omit<PlasmicFaqLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaqLink__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaqLink__ArgProps,
      internalVariantPropNames: PlasmicFaqLink__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFaqLink__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqLink";
  } else {
    func.displayName = `PlasmicFaqLink.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqLink = Object.assign(
  // Top-level PlasmicFaqLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicFaqLink
    internalVariantProps: PlasmicFaqLink__VariantProps,
    internalArgProps: PlasmicFaqLink__ArgProps
  }
);

export default PlasmicFaqLink;
/* prettier-ignore-end */
