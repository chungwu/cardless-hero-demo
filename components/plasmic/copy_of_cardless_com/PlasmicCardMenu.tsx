// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: G3VsH9kXpX86
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CardsMenuItem from "../../CardsMenuItem"; // plasmic-import: uRVb2au7FrOu/component

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicCardMenu.module.css"; // plasmic-import: G3VsH9kXpX86/css

import TinyManutdsvgIcon from "./icons/PlasmicIcon__TinyManutdsvg"; // plasmic-import: n7Yw70mhhxdBb/icon
import TinyCelticssvgIcon from "./icons/PlasmicIcon__TinyCelticssvg"; // plasmic-import: f0iHiqVuQOxOv/icon
import TinyCavssvgIcon from "./icons/PlasmicIcon__TinyCavssvg"; // plasmic-import: qWchLk0kEKjbg/icon
import TinyMarlinssvgIcon from "./icons/PlasmicIcon__TinyMarlinssvg"; // plasmic-import: rjdpNRU-nsmOd/icon

export type PlasmicCardMenu__VariantMembers = {
  darkMode: "darkMode";
};

export type PlasmicCardMenu__VariantsArgs = {
  darkMode?: SingleBooleanChoiceArg<"darkMode">;
};

type VariantPropType = keyof PlasmicCardMenu__VariantsArgs;
export const PlasmicCardMenu__VariantProps = new Array<VariantPropType>(
  "darkMode"
);

export type PlasmicCardMenu__ArgsType = {};
type ArgPropType = keyof PlasmicCardMenu__ArgsType;
export const PlasmicCardMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicCardMenu__OverridesType = {
  root?: p.Flex<"div">;
  list?: p.Flex<"div">;
};

export interface DefaultCardMenuProps {
  darkMode?: SingleBooleanChoiceArg<"darkMode">;
  className?: string;
}

function PlasmicCardMenu__RenderFunc(props: {
  variants: PlasmicCardMenu__VariantsArgs;
  args: PlasmicCardMenu__ArgsType;
  overrides: PlasmicCardMenu__OverridesType;
  dataFetches?: PlasmicCardMenu__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        "dropdown maxContent" as const,
        { [sty.root__darkMode]: hasVariant(variants, "darkMode", "darkMode") }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"list"}
        data-plasmic-override={overrides.list}
        hasGap={true}
        className={classNames(projectcss.all, sty.list, {
          [sty.list__darkMode]: hasVariant(variants, "darkMode", "darkMode")
        })}
      >
        <CardsMenuItem
          className={classNames("__wab_instance", sty.cardsMenuItem__mRsjn, {
            [sty.cardsMenuItem__darkMode__mRsjn86JlY]: hasVariant(
              variants,
              "darkMode",
              "darkMode"
            )
          })}
          darkMode={
            hasVariant(variants, "darkMode", "darkMode")
              ? ("darkMode" as const)
              : hasVariant(globalVariants, "screen", "tablet")
              ? undefined
              : undefined
          }
          destination={"/manutd" as const}
          icon={
            <React.Fragment>
              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : true
              ) ? (
                <TinyManutdsvgIcon
                  className={classNames(projectcss.all, sty.svg__z6Uqf)}
                  role={"img"}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : false
              ) ? (
                <TinyManutdsvgIcon
                  className={classNames(projectcss.all, sty.svg__acVJa)}
                  role={"img"}
                />
              ) : null}
            </React.Fragment>
          }
          name={"Manchester United"}
        />

        <CardsMenuItem
          className={classNames("__wab_instance", sty.cardsMenuItem__eongm, {
            [sty.cardsMenuItem__darkMode__eongm86JlY]: hasVariant(
              variants,
              "darkMode",
              "darkMode"
            )
          })}
          darkMode={
            hasVariant(variants, "darkMode", "darkMode")
              ? ("darkMode" as const)
              : hasVariant(globalVariants, "screen", "tablet")
              ? undefined
              : undefined
          }
          destination={"/celtics" as const}
          icon={
            <TinyCelticssvgIcon
              className={classNames(projectcss.all, sty.svg__ioJbq)}
              role={"img"}
            />
          }
          name={"Boston Celtics"}
        />

        <CardsMenuItem
          className={classNames("__wab_instance", sty.cardsMenuItem__dmZoN, {
            [sty.cardsMenuItem__darkMode__dmZoN86JlY]: hasVariant(
              variants,
              "darkMode",
              "darkMode"
            )
          })}
          darkMode={
            hasVariant(variants, "darkMode", "darkMode")
              ? ("darkMode" as const)
              : hasVariant(globalVariants, "screen", "tablet")
              ? undefined
              : undefined
          }
          destination={"/cavs" as const}
          icon={
            <TinyCavssvgIcon
              className={classNames(projectcss.all, sty.svg__bkhQh)}
              role={"img"}
            />
          }
          name={"Cleveland Cavaliers"}
        />

        <CardsMenuItem
          className={classNames("__wab_instance", sty.cardsMenuItem__jk3QZ, {
            [sty.cardsMenuItem__darkMode__jk3QZ86JlY]: hasVariant(
              variants,
              "darkMode",
              "darkMode"
            )
          })}
          darkMode={
            hasVariant(variants, "darkMode", "darkMode")
              ? ("darkMode" as const)
              : hasVariant(globalVariants, "screen", "tablet")
              ? undefined
              : undefined
          }
          destination={"/marlins" as const}
          icon={
            <TinyMarlinssvgIcon
              className={classNames(projectcss.all, sty.svg__s4ORm, {
                [sty.svg__darkMode__s4ORm86JlY]: hasVariant(
                  variants,
                  "darkMode",
                  "darkMode"
                )
              })}
              role={"img"}
            />
          }
          name={"Miami Marlins"}
        />
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "list"],
  list: ["list"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  list: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardMenu__VariantsArgs;
    args?: PlasmicCardMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardMenu__Fetches;
  } & Omit<PlasmicCardMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardMenu__ArgProps,
      internalVariantPropNames: PlasmicCardMenu__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardMenu__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardMenu";
  } else {
    func.displayName = `PlasmicCardMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicCardMenu = Object.assign(
  // Top-level PlasmicCardMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    list: makeNodeComponent("list"),

    // Metadata about props expected for PlasmicCardMenu
    internalVariantProps: PlasmicCardMenu__VariantProps,
    internalArgProps: PlasmicCardMenu__ArgProps
  }
);

export default PlasmicCardMenu;
/* prettier-ignore-end */
