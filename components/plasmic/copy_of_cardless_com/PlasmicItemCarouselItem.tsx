// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: zUXky6xuKkg7
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicItemCarouselItem.module.css"; // plasmic-import: zUXky6xuKkg7/css

export type PlasmicItemCarouselItem__VariantMembers = {};

export type PlasmicItemCarouselItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicItemCarouselItem__VariantsArgs;
export const PlasmicItemCarouselItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicItemCarouselItem__ArgsType = {
  title?: React.ReactNode;
  body?: React.ReactNode;
  image2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicItemCarouselItem__ArgsType;
export const PlasmicItemCarouselItem__ArgProps = new Array<ArgPropType>(
  "title",
  "body",
  "image2"
);

export type PlasmicItemCarouselItem__OverridesType = {
  root?: p.Flex<"div">;
  image?: p.Flex<"div">;
  copy?: p.Flex<"div">;
};

export interface DefaultItemCarouselItemProps {
  title?: React.ReactNode;
  body?: React.ReactNode;
  image2?: React.ReactNode;
  className?: string;
}

function PlasmicItemCarouselItem__RenderFunc(props: {
  variants: PlasmicItemCarouselItem__VariantsArgs;
  args: PlasmicItemCarouselItem__ArgsType;
  overrides: PlasmicItemCarouselItem__OverridesType;
  dataFetches?: PlasmicItemCarouselItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"image"}
        data-plasmic-override={overrides.image}
        className={classNames(projectcss.all, sty.image)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__mNvDz)}
              displayHeight={"312px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
            />
          ),

          value: args.image2
        })}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"copy"}
        data-plasmic-override={overrides.copy}
        hasGap={true}
        className={classNames(projectcss.all, sty.copy)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___4ZKjs)}>
          {p.renderPlasmicSlot({
            defaultContents: "Item 1",
            value: args.title,
            className: classNames(sty.slotTargetTitle)
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__uCtUk)}>
          {p.renderPlasmicSlot({
            defaultContents: "15,000 points",
            value: args.body,
            className: classNames(sty.slotTargetBody)
          })}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "image", "copy"],
  image: ["image"],
  copy: ["copy"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  image: "div";
  copy: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicItemCarouselItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicItemCarouselItem__VariantsArgs;
    args?: PlasmicItemCarouselItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicItemCarouselItem__Fetches;
  } & Omit<PlasmicItemCarouselItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicItemCarouselItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicItemCarouselItem__ArgProps,
      internalVariantPropNames: PlasmicItemCarouselItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicItemCarouselItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemCarouselItem";
  } else {
    func.displayName = `PlasmicItemCarouselItem.${nodeName}`;
  }
  return func;
}

export const PlasmicItemCarouselItem = Object.assign(
  // Top-level PlasmicItemCarouselItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    image: makeNodeComponent("image"),
    copy: makeNodeComponent("copy"),

    // Metadata about props expected for PlasmicItemCarouselItem
    internalVariantProps: PlasmicItemCarouselItem__VariantProps,
    internalArgProps: PlasmicItemCarouselItem__ArgProps
  }
);

export default PlasmicItemCarouselItem;
/* prettier-ignore-end */
