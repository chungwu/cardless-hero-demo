// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: aklKETeXRlEq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicSegmentControl.module.css"; // plasmic-import: aklKETeXRlEq/css

export type PlasmicSegmentControl__VariantMembers = {
  office: "office";
};

export type PlasmicSegmentControl__VariantsArgs = {
  office?: SingleBooleanChoiceArg<"office">;
};

type VariantPropType = keyof PlasmicSegmentControl__VariantsArgs;
export const PlasmicSegmentControl__VariantProps = new Array<VariantPropType>(
  "office"
);

export type PlasmicSegmentControl__ArgsType = {
  rootClassName?: string;
};

type ArgPropType = keyof PlasmicSegmentControl__ArgsType;
export const PlasmicSegmentControl__ArgProps = new Array<ArgPropType>(
  "rootClassName"
);

export type PlasmicSegmentControl__OverridesType = {
  root?: p.Flex<"div">;
  selectBg?: p.Flex<"div">;
};

export interface DefaultSegmentControlProps {
  rootClassName?: string;
  office?: SingleBooleanChoiceArg<"office">;
  className?: string;
}

function PlasmicSegmentControl__RenderFunc(props: {
  variants: PlasmicSegmentControl__VariantsArgs;
  args: PlasmicSegmentControl__ArgsType;
  overrides: PlasmicSegmentControl__OverridesType;
  dataFetches?: PlasmicSegmentControl__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        args.rootClassName
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__pSxdN,
          {
            [sty.text__office__pSxdNPcVt]: hasVariant(
              variants,
              "office",
              "office"
            )
          }
        )}
      >
        {"Remote"}
      </div>

      <div
        data-plasmic-name={"selectBg"}
        data-plasmic-override={overrides.selectBg}
        className={classNames(projectcss.all, sty.selectBg, {
          [sty.selectBg__office]: hasVariant(variants, "office", "office")
        })}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___0DTh7,
          {
            [sty.text__office___0DTh7PcVt]: hasVariant(
              variants,
              "office",
              "office"
            )
          }
        )}
      >
        {"Office"}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "selectBg"],
  selectBg: ["selectBg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  selectBg: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSegmentControl__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSegmentControl__VariantsArgs;
    args?: PlasmicSegmentControl__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSegmentControl__Fetches;
  } & Omit<PlasmicSegmentControl__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSegmentControl__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSegmentControl__ArgProps,
      internalVariantPropNames: PlasmicSegmentControl__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSegmentControl__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSegmentControl";
  } else {
    func.displayName = `PlasmicSegmentControl.${nodeName}`;
  }
  return func;
}

export const PlasmicSegmentControl = Object.assign(
  // Top-level PlasmicSegmentControl renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    selectBg: makeNodeComponent("selectBg"),

    // Metadata about props expected for PlasmicSegmentControl
    internalVariantProps: PlasmicSegmentControl__VariantProps,
    internalArgProps: PlasmicSegmentControl__ArgProps
  }
);

export default PlasmicSegmentControl;
/* prettier-ignore-end */
