// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: uRVb2au7FrOu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicCardsMenuItem.module.css"; // plasmic-import: uRVb2au7FrOu/css

import ArrowRight4Icon from "./icons/PlasmicIcon__ArrowRight4"; // plasmic-import: USjAvgCpmbA75/icon

export type PlasmicCardsMenuItem__VariantMembers = {
  darkMode: "darkMode";
};

export type PlasmicCardsMenuItem__VariantsArgs = {
  darkMode?: SingleBooleanChoiceArg<"darkMode">;
};

type VariantPropType = keyof PlasmicCardsMenuItem__VariantsArgs;
export const PlasmicCardsMenuItem__VariantProps = new Array<VariantPropType>(
  "darkMode"
);

export type PlasmicCardsMenuItem__ArgsType = {
  name?: React.ReactNode;
  subtitle?: React.ReactNode;
  icon?: React.ReactNode;
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicCardsMenuItem__ArgsType;
export const PlasmicCardsMenuItem__ArgProps = new Array<ArgPropType>(
  "name",
  "subtitle",
  "icon",
  "destination"
);

export type PlasmicCardsMenuItem__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  cardMenuOption?: p.Flex<"div">;
  text?: p.Flex<"div">;
  title?: p.Flex<"div">;
  subtitle?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultCardsMenuItemProps {
  name?: React.ReactNode;
  subtitle?: React.ReactNode;
  icon?: React.ReactNode;
  destination?: string | PageHref;
  darkMode?: SingleBooleanChoiceArg<"darkMode">;
  className?: string;
}

function PlasmicCardsMenuItem__RenderFunc(props: {
  variants: PlasmicCardsMenuItem__VariantsArgs;
  args: PlasmicCardsMenuItem__ArgsType;
  overrides: PlasmicCardsMenuItem__OverridesType;
  dataFetches?: PlasmicCardsMenuItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.a, projectcss.root_reset, sty.root, {
        [sty.root__darkMode]: hasVariant(variants, "darkMode", "darkMode")
      })}
      component={Link}
      href={args.destination}
      platform={"nextjs"}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        data-plasmic-name={"cardMenuOption"}
        data-plasmic-override={overrides.cardMenuOption}
        className={classNames(projectcss.all, sty.cardMenuOption, {
          [sty.cardMenuOption__darkMode]: hasVariant(
            variants,
            "darkMode",
            "darkMode"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <svg
              className={classNames(projectcss.all, sty.svg__fbiqh)}
              role={"img"}
            />
          ),

          value: args.icon
        })}

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(projectcss.all, sty.text, {
            [sty.text__darkMode]: hasVariant(variants, "darkMode", "darkMode")
          })}
        >
          <div
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(projectcss.all, sty.title, {
              [sty.title__darkMode]: hasVariant(
                variants,
                "darkMode",
                "darkMode"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Name",
              value: args.name,
              className: classNames(sty.slotTargetName, {
                [sty.slotTargetName__darkMode]: hasVariant(
                  variants,
                  "darkMode",
                  "darkMode"
                )
              })
            })}
          </div>

          <div
            data-plasmic-name={"subtitle"}
            data-plasmic-override={overrides.subtitle}
            className={classNames(projectcss.all, sty.subtitle)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Learn more",
              value: args.subtitle,
              className: classNames(sty.slotTargetSubtitle, {
                [sty.slotTargetSubtitle__darkMode]: hasVariant(
                  variants,
                  "darkMode",
                  "darkMode"
                )
              })
            })}
          </div>
        </div>

        {(
          triggers.hover_root && hasVariant(globalVariants, "screen", "tablet")
            ? true
            : triggers.hover_root
            ? true
            : true
        ) ? (
          <ArrowRight4Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svg__darkMode]: hasVariant(variants, "darkMode", "darkMode")
            })}
            role={"img"}
          />
        ) : null}
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cardMenuOption", "text", "title", "subtitle", "svg"],
  cardMenuOption: ["cardMenuOption", "text", "title", "subtitle", "svg"],
  text: ["text", "title", "subtitle"],
  title: ["title"],
  subtitle: ["subtitle"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  cardMenuOption: "div";
  text: "div";
  title: "div";
  subtitle: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardsMenuItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardsMenuItem__VariantsArgs;
    args?: PlasmicCardsMenuItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardsMenuItem__Fetches;
  } & Omit<PlasmicCardsMenuItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardsMenuItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardsMenuItem__ArgProps,
      internalVariantPropNames: PlasmicCardsMenuItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardsMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardsMenuItem";
  } else {
    func.displayName = `PlasmicCardsMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCardsMenuItem = Object.assign(
  // Top-level PlasmicCardsMenuItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cardMenuOption: makeNodeComponent("cardMenuOption"),
    text: makeNodeComponent("text"),
    title: makeNodeComponent("title"),
    subtitle: makeNodeComponent("subtitle"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicCardsMenuItem
    internalVariantProps: PlasmicCardsMenuItem__VariantProps,
    internalArgProps: PlasmicCardsMenuItem__ArgProps
  }
);

export default PlasmicCardsMenuItem;
/* prettier-ignore-end */
