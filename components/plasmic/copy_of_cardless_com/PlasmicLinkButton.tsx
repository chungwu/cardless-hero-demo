// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: exoHRHBB2Jd8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicLinkButton.module.css"; // plasmic-import: exoHRHBB2Jd8/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: E7YdTcD7oFygJ/icon

export type PlasmicLinkButton__VariantMembers = {
  type: "mobile";
  dark: "dark";
  selected: "selected";
  icon2: "none" | "right" | "left";
  noPadding: "noPadding";
  color: "red" | "black";
};

export type PlasmicLinkButton__VariantsArgs = {
  type?: MultiChoiceArg<"mobile">;
  dark?: SingleBooleanChoiceArg<"dark">;
  selected?: SingleBooleanChoiceArg<"selected">;
  icon2?: SingleChoiceArg<"none" | "right" | "left">;
  noPadding?: SingleBooleanChoiceArg<"noPadding">;
  color?: MultiChoiceArg<"red" | "black">;
};

type VariantPropType = keyof PlasmicLinkButton__VariantsArgs;
export const PlasmicLinkButton__VariantProps = new Array<VariantPropType>(
  "type",
  "dark",
  "selected",
  "icon2",
  "noPadding",
  "color"
);

export type PlasmicLinkButton__ArgsType = {
  label?: React.ReactNode;
  destination?: string | PageHref;
  id?: string;
  children?: React.ReactNode;
  openNewTab?: Target;
};

type ArgPropType = keyof PlasmicLinkButton__ArgsType;
export const PlasmicLinkButton__ArgProps = new Array<ArgPropType>(
  "label",
  "destination",
  "id",
  "children",
  "openNewTab"
);

export type PlasmicLinkButton__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultLinkButtonProps {
  label?: React.ReactNode;
  destination?: string | PageHref;
  id?: string;
  children?: React.ReactNode;
  openNewTab?: Target;
  type?: MultiChoiceArg<"mobile">;
  dark?: SingleBooleanChoiceArg<"dark">;
  selected?: SingleBooleanChoiceArg<"selected">;
  icon2?: SingleChoiceArg<"none" | "right" | "left">;
  noPadding?: SingleBooleanChoiceArg<"noPadding">;
  color?: MultiChoiceArg<"red" | "black">;
  className?: string;
}

function PlasmicLinkButton__RenderFunc(props: {
  variants: PlasmicLinkButton__VariantsArgs;
  args: PlasmicLinkButton__ArgsType;
  overrides: PlasmicLinkButton__OverridesType;
  dataFetches?: PlasmicLinkButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.a, projectcss.root_reset, sty.root, {
        [sty.root__dark]: hasVariant(variants, "dark", "dark"),
        [sty.root__icon2_left]: hasVariant(variants, "icon2", "left"),
        [sty.root__icon2_right]: hasVariant(variants, "icon2", "right"),
        [sty.root__noPadding]: hasVariant(variants, "noPadding", "noPadding"),
        [sty.root__noPadding_icon2_right]:
          hasVariant(variants, "noPadding", "noPadding") &&
          hasVariant(variants, "icon2", "right"),
        [sty.root__noPadding_icon2_right_color_red]:
          hasVariant(variants, "noPadding", "noPadding") &&
          hasVariant(variants, "icon2", "right") &&
          hasVariant(variants, "color", "red"),
        [sty.root__selected]: hasVariant(variants, "selected", "selected"),
        [sty.root__type_mobile]: hasVariant(variants, "type", "mobile"),
        [sty.root__type_mobile_dark]:
          hasVariant(variants, "type", "mobile") &&
          hasVariant(variants, "dark", "dark")
      })}
      component={Link}
      href={args.destination}
      id={args.id}
      platform={"nextjs"}
      target={args.openNewTab}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Label",
        value: args.label,
        className: classNames(sty.slotTargetLabel, {
          [sty.slotTargetLabel__color_red]: hasVariant(
            variants,
            "color",
            "red"
          ),
          [sty.slotTargetLabel__dark]: hasVariant(variants, "dark", "dark"),
          [sty.slotTargetLabel__icon2_left]: hasVariant(
            variants,
            "icon2",
            "left"
          ),
          [sty.slotTargetLabel__icon2_right]: hasVariant(
            variants,
            "icon2",
            "right"
          ),
          [sty.slotTargetLabel__noPadding]: hasVariant(
            variants,
            "noPadding",
            "noPadding"
          ),
          [sty.slotTargetLabel__noPadding_icon2_right]:
            hasVariant(variants, "noPadding", "noPadding") &&
            hasVariant(variants, "icon2", "right"),
          [sty.slotTargetLabel__noPadding_icon2_right_color_red]:
            hasVariant(variants, "noPadding", "noPadding") &&
            hasVariant(variants, "icon2", "right") &&
            hasVariant(variants, "color", "red"),
          [sty.slotTargetLabel__type_mobile]: hasVariant(
            variants,
            "type",
            "mobile"
          )
        })
      })}

      {(
        hasVariant(variants, "icon2", "left")
          ? true
          : hasVariant(variants, "icon2", "right")
          ? true
          : false
      )
        ? p.renderPlasmicSlot({
            defaultContents: (
              <ArrowRightIcon
                className={classNames(projectcss.all, sty.svg___2YCvf)}
                role={"img"}
              />
            ),

            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildren__icon2_left]: hasVariant(
                variants,
                "icon2",
                "left"
              ),
              [sty.slotTargetChildren__icon2_right]: hasVariant(
                variants,
                "icon2",
                "right"
              ),
              [sty.slotTargetChildren__icon2_right_noPadding]:
                hasVariant(variants, "icon2", "right") &&
                hasVariant(variants, "noPadding", "noPadding"),
              [sty.slotTargetChildren__noPadding_icon2_right_color_red]:
                hasVariant(variants, "noPadding", "noPadding") &&
                hasVariant(variants, "icon2", "right") &&
                hasVariant(variants, "color", "red")
            })
          })
        : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLinkButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLinkButton__VariantsArgs;
    args?: PlasmicLinkButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLinkButton__Fetches;
  } & Omit<PlasmicLinkButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLinkButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLinkButton__ArgProps,
      internalVariantPropNames: PlasmicLinkButton__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLinkButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinkButton";
  } else {
    func.displayName = `PlasmicLinkButton.${nodeName}`;
  }
  return func;
}

export const PlasmicLinkButton = Object.assign(
  // Top-level PlasmicLinkButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicLinkButton
    internalVariantProps: PlasmicLinkButton__VariantProps,
    internalArgProps: PlasmicLinkButton__ArgProps
  }
);

export default PlasmicLinkButton;
/* prettier-ignore-end */
