// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: Tj1OgYPQx9N9
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicFauxUi.module.css"; // plasmic-import: Tj1OgYPQx9N9/css

import Layer8Icon from "./icons/PlasmicIcon__Layer8"; // plasmic-import: Xdr9SX0hdSyWf/icon
import LockIcon from "./icons/PlasmicIcon__Lock"; // plasmic-import: 5B-_vQvkI7jv_/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 2rZdDqBpNsI3n/icon
import ArrowRight3Icon from "./icons/PlasmicIcon__ArrowRight3"; // plasmic-import: 4UmkTfAtphPaa/icon

export type PlasmicFauxUi__VariantMembers = {
  scene: "scene1" | "scene2" | "scene3" | "scene4" | "scene5";
};

export type PlasmicFauxUi__VariantsArgs = {
  scene?: SingleChoiceArg<"scene1" | "scene2" | "scene3" | "scene4" | "scene5">;
};

type VariantPropType = keyof PlasmicFauxUi__VariantsArgs;
export const PlasmicFauxUi__VariantProps = new Array<VariantPropType>("scene");

export type PlasmicFauxUi__ArgsType = {};
type ArgPropType = keyof PlasmicFauxUi__ArgsType;
export const PlasmicFauxUi__ArgProps = new Array<ArgPropType>();

export type PlasmicFauxUi__OverridesType = {
  root?: p.Flex<"div">;
  uiIllustration?: p.Flex<"div">;
  frame3606?: p.Flex<"div">;
  name?: p.Flex<"div">;
  redLogoAsset1?: p.Flex<"div">;
  layer2?: p.Flex<"div">;
  carNumber?: p.Flex<"div">;
  name2?: p.Flex<"div">;
  front?: p.Flex<"div">;
  balance?: p.Flex<"div">;
  photo?: p.Flex<"div">;
  wrapper?: p.Flex<"div">;
  button?: p.Flex<"div">;
  uiIllustration2?: p.Flex<"div">;
  back?: p.Flex<"div">;
  transaction?: p.Flex<"div">;
  content?: p.Flex<"div">;
  title?: p.Flex<"div">;
  caption?: p.Flex<"div">;
  right?: p.Flex<"div">;
  transaction2?: p.Flex<"div">;
  content2?: p.Flex<"div">;
  text2?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  caption2?: p.Flex<"div">;
  right2?: p.Flex<"div">;
  transaction3?: p.Flex<"div">;
  content3?: p.Flex<"div">;
  text3?: p.Flex<"div">;
  title3?: p.Flex<"div">;
  caption3?: p.Flex<"div">;
  right3?: p.Flex<"div">;
  front2?: p.Flex<"div">;
  balance2?: p.Flex<"div">;
  photo2?: p.Flex<"div">;
  wrapper2?: p.Flex<"div">;
  button2?: p.Flex<"div">;
  uiIllustration3?: p.Flex<"div">;
  frame3607?: p.Flex<"div">;
  carNumber2?: p.Flex<"div">;
  front3?: p.Flex<"div">;
  balance3?: p.Flex<"div">;
  off?: p.Flex<"div">;
  bg?: p.Flex<"div">;
  uiIllustration4?: p.Flex<"div">;
  back2?: p.Flex<"div">;
  front4?: p.Flex<"div">;
  balance4?: p.Flex<"div">;
  notif?: p.Flex<"div">;
  notif2?: p.Flex<"div">;
  uiIllustrationPaymentMobile?: p.Flex<"div">;
  frame3596?: p.Flex<"div">;
  rowLabelBackground?: p.Flex<"div">;
  content6?: p.Flex<"div">;
  text6?: p.Flex<"div">;
  rectangle6797?: p.Flex<"div">;
  button3?: p.Flex<"div">;
  applepayui1?: p.Flex<"div">;
};

export interface DefaultFauxUiProps {
  scene?: SingleChoiceArg<"scene1" | "scene2" | "scene3" | "scene4" | "scene5">;
  className?: string;
}

function PlasmicFauxUi__RenderFunc(props: {
  variants: PlasmicFauxUi__VariantsArgs;
  args: PlasmicFauxUi__ArgsType;
  overrides: PlasmicFauxUi__OverridesType;
  dataFetches?: PlasmicFauxUi__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__scene_scene2]: hasVariant(variants, "scene", "scene2"),
        [sty.root__scene_scene3]: hasVariant(variants, "scene", "scene3"),
        [sty.root__scene_scene4]: hasVariant(variants, "scene", "scene4"),
        [sty.root__scene_scene5]: hasVariant(variants, "scene", "scene5")
      })}
    >
      {(
        hasVariant(variants, "scene", "scene5")
          ? true
          : hasVariant(variants, "scene", "scene4")
          ? true
          : hasVariant(variants, "scene", "scene3")
          ? true
          : hasVariant(variants, "scene", "scene2")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"uiIllustration"}
          data-plasmic-override={overrides.uiIllustration}
          className={classNames(projectcss.all, sty.uiIllustration, {
            [sty.uiIllustration__scene_scene1]: hasVariant(
              variants,
              "scene",
              "scene1"
            ),
            [sty.uiIllustration__scene_scene2]: hasVariant(
              variants,
              "scene",
              "scene2"
            ),
            [sty.uiIllustration__scene_scene3]: hasVariant(
              variants,
              "scene",
              "scene3"
            ),
            [sty.uiIllustration__scene_scene4]: hasVariant(
              variants,
              "scene",
              "scene4"
            ),
            [sty.uiIllustration__scene_scene5]: hasVariant(
              variants,
              "scene",
              "scene5"
            )
          })}
        >
          <div
            data-plasmic-name={"frame3606"}
            data-plasmic-override={overrides.frame3606}
            className={classNames(projectcss.all, sty.frame3606, {
              [sty.frame3606__scene_scene1]: hasVariant(
                variants,
                "scene",
                "scene1"
              ),
              [sty.frame3606__scene_scene3]: hasVariant(
                variants,
                "scene",
                "scene3"
              )
            })}
          >
            <div
              data-plasmic-name={"name"}
              data-plasmic-override={overrides.name}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.name
              )}
            >
              {hasVariant(globalVariants, "screen", "laptopSmall")
                ? "DIGITAL CARD"
                : "DIGITAL CARD"}
            </div>

            <div
              data-plasmic-name={"redLogoAsset1"}
              data-plasmic-override={overrides.redLogoAsset1}
              className={classNames(projectcss.all, sty.redLogoAsset1)}
            >
              <div
                data-plasmic-name={"layer2"}
                data-plasmic-override={overrides.layer2}
                className={classNames(projectcss.all, sty.layer2)}
              >
                <Layer8Icon
                  className={classNames(projectcss.all, sty.svg__oDgvA)}
                  role={"img"}
                />
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"carNumber"}
              data-plasmic-override={overrides.carNumber}
              hasGap={true}
              className={classNames(projectcss.all, sty.carNumber)}
            >
              <div
                data-plasmic-name={"name2"}
                data-plasmic-override={overrides.name2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.name2
                )}
              >
                {"  1     •1••• •••• •••• 5647"}
              </div>
            </p.Stack>
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"front"}
            data-plasmic-override={overrides.front}
            hasGap={true}
            className={classNames(projectcss.all, sty.front, {
              [sty.front__scene_scene2]: hasVariant(variants, "scene", "scene2")
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"balance"}
              data-plasmic-override={overrides.balance}
              hasGap={true}
              className={classNames(projectcss.all, sty.balance)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fCeQ
                )}
              >
                {"Gyoza Delivery"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gLlfS
                )}
              >
                {"$12.94"}
              </div>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__cGQbK)}>
              <div
                data-plasmic-name={"photo"}
                data-plasmic-override={overrides.photo}
                className={classNames(projectcss.all, sty.photo)}
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"wrapper"}
              data-plasmic-override={overrides.wrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.wrapper)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(projectcss.all, sty.button)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kVYlb
                  )}
                >
                  {"Order"}
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      ) : null}
      {(hasVariant(variants, "scene", "scene2") ? true : false) ? (
        <div
          data-plasmic-name={"uiIllustration2"}
          data-plasmic-override={overrides.uiIllustration2}
          className={classNames(projectcss.all, sty.uiIllustration2, {
            [sty.uiIllustration2__scene_scene2]: hasVariant(
              variants,
              "scene",
              "scene2"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"back"}
            data-plasmic-override={overrides.back}
            hasGap={true}
            className={classNames(projectcss.all, sty.back)}
          >
            <div
              data-plasmic-name={"transaction"}
              data-plasmic-override={overrides.transaction}
              className={classNames(projectcss.all, sty.transaction)}
            >
              <div
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                className={classNames(projectcss.all, sty.content)}
              >
                {(hasVariant(variants, "scene", "scene2") ? true : true) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__v5ZEj, {
                      [sty.freeBox__scene_scene2__v5ZEjnfsYc]: hasVariant(
                        variants,
                        "scene",
                        "scene2"
                      )
                    })}
                  >
                    {(
                      hasVariant(variants, "scene", "scene2") ? true : false
                    ) ? (
                      <div
                        data-plasmic-name={"title"}
                        data-plasmic-override={overrides.title}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.title,
                          {
                            [sty.title__scene_scene2]: hasVariant(
                              variants,
                              "scene",
                              "scene2"
                            )
                          }
                        )}
                      >
                        {"Coffee at Gio’s"}
                      </div>
                    ) : null}
                    {false ? (
                      <div
                        data-plasmic-name={"caption"}
                        data-plasmic-override={overrides.caption}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.caption
                        )}
                      >
                        {"43 Points"}
                      </div>
                    ) : null}
                  </div>
                ) : null}

                <div
                  data-plasmic-name={"right"}
                  data-plasmic-override={overrides.right}
                  className={classNames(projectcss.all, sty.right)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yuQLy
                    )}
                  >
                    {"+250 Pts"}
                  </div>
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"transaction2"}
              data-plasmic-override={overrides.transaction2}
              className={classNames(projectcss.all, sty.transaction2)}
            >
              <div
                data-plasmic-name={"content2"}
                data-plasmic-override={overrides.content2}
                className={classNames(projectcss.all, sty.content2)}
              >
                <div
                  data-plasmic-name={"text2"}
                  data-plasmic-override={overrides.text2}
                  className={classNames(projectcss.all, sty.text2)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"title2"}
                      data-plasmic-override={overrides.title2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title2
                      )}
                    >
                      {"Coffee at Gio’s"}
                    </div>
                  ) : null}
                  {false ? (
                    <div
                      data-plasmic-name={"caption2"}
                      data-plasmic-override={overrides.caption2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.caption2
                      )}
                    >
                      {"43 Points"}
                    </div>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"right2"}
                  data-plasmic-override={overrides.right2}
                  className={classNames(projectcss.all, sty.right2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9UBdw
                    )}
                  >
                    {"+50 Pts"}
                  </div>
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"transaction3"}
              data-plasmic-override={overrides.transaction3}
              className={classNames(projectcss.all, sty.transaction3)}
            >
              <div
                data-plasmic-name={"content3"}
                data-plasmic-override={overrides.content3}
                className={classNames(projectcss.all, sty.content3)}
              >
                <div
                  data-plasmic-name={"text3"}
                  data-plasmic-override={overrides.text3}
                  className={classNames(projectcss.all, sty.text3)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"title3"}
                      data-plasmic-override={overrides.title3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title3
                      )}
                    >
                      {"Coffee at Gio’s"}
                    </div>
                  ) : null}
                  {false ? (
                    <div
                      data-plasmic-name={"caption3"}
                      data-plasmic-override={overrides.caption3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.caption3
                      )}
                    >
                      {"43 Points"}
                    </div>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"right3"}
                  data-plasmic-override={overrides.right3}
                  className={classNames(projectcss.all, sty.right3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__biOkE
                    )}
                  >
                    {"+80 Pts"}
                  </div>
                </div>
              </div>
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"front2"}
            data-plasmic-override={overrides.front2}
            hasGap={true}
            className={classNames(projectcss.all, sty.front2)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"balance2"}
              data-plasmic-override={overrides.balance2}
              hasGap={true}
              className={classNames(projectcss.all, sty.balance2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aShZg
                )}
              >
                {"Free Item"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qfqtj
                )}
              >
                {"Reward Unlocked"}
              </div>
            </p.Stack>

            {(hasVariant(variants, "scene", "scene2") ? true : true) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__fjDPz, {
                  [sty.freeBox__scene_scene2__fjDPznfsYc]: hasVariant(
                    variants,
                    "scene",
                    "scene2"
                  )
                })}
              >
                <div
                  data-plasmic-name={"photo2"}
                  data-plasmic-override={overrides.photo2}
                  className={classNames(projectcss.all, sty.photo2)}
                />
              </div>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"wrapper2"}
              data-plasmic-override={overrides.wrapper2}
              hasGap={true}
              className={classNames(projectcss.all, sty.wrapper2)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                hasGap={true}
                className={classNames(projectcss.all, sty.button2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eqne
                  )}
                >
                  {"Redeem"}
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      ) : null}
      {(hasVariant(variants, "scene", "scene3") ? true : false) ? (
        <div
          data-plasmic-name={"uiIllustration3"}
          data-plasmic-override={overrides.uiIllustration3}
          className={classNames(projectcss.all, sty.uiIllustration3, {
            [sty.uiIllustration3__scene_scene3]: hasVariant(
              variants,
              "scene",
              "scene3"
            )
          })}
        >
          <div
            data-plasmic-name={"frame3607"}
            data-plasmic-override={overrides.frame3607}
            className={classNames(projectcss.all, sty.frame3607)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yAsUc
              )}
            >
              {"LOCKED"}
            </div>

            {(hasVariant(variants, "scene", "scene3") ? true : true) ? (
              <LockIcon
                className={classNames(projectcss.all, sty.svg__zhwvP, {
                  [sty.svg__scene_scene3__zhwvP1JI78]: hasVariant(
                    variants,
                    "scene",
                    "scene3"
                  )
                })}
                role={"img"}
              />
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"carNumber2"}
              data-plasmic-override={overrides.carNumber2}
              hasGap={true}
              className={classNames(projectcss.all, sty.carNumber2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pZyoi
                )}
              >
                {"  1   •••• •••• •••• ••••"}
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"front3"}
            data-plasmic-override={overrides.front3}
            className={classNames(projectcss.all, sty.front3)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"balance3"}
              data-plasmic-override={overrides.balance3}
              hasGap={true}
              className={classNames(projectcss.all, sty.balance3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__etWw7
                )}
              >
                {"Security"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__v6L0R
                )}
              >
                {"Card Management"}
              </div>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__qv0W2)}>
              <div className={classNames(projectcss.all, sty.freeBox__vMzFv)}>
                <div className={classNames(projectcss.all, sty.freeBox__o1X5S)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yJRq5
                    )}
                  >
                    {"Lock card"}
                  </div>

                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ocDbH
                      )}
                    >
                      {"43 Points"}
                    </div>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__lIrd)}>
                  <div
                    data-plasmic-name={"off"}
                    data-plasmic-override={overrides.off}
                    className={classNames(projectcss.all, sty.off)}
                  >
                    <div
                      data-plasmic-name={"bg"}
                      data-plasmic-override={overrides.bg}
                      className={classNames(projectcss.all, sty.bg)}
                    />

                    {(hasVariant(variants, "scene", "scene3") ? true : true) ? (
                      <CircleIcon
                        className={classNames(projectcss.all, sty.svg__rqvAp, {
                          [sty.svg__scene_scene3__rqvAp1JI78]: hasVariant(
                            variants,
                            "scene",
                            "scene3"
                          )
                        })}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__a8Lj9)}>
              <div className={classNames(projectcss.all, sty.freeBox___94CMe)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6VB1S)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zuBep
                    )}
                  >
                    {"Request new number"}
                  </div>

                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rtqNe
                      )}
                    >
                      {"43 Points"}
                    </div>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__cntbS)}>
                  {(hasVariant(variants, "scene", "scene3") ? true : true) ? (
                    <ArrowRight3Icon
                      className={classNames(projectcss.all, sty.svg__c6H1M, {
                        [sty.svg__scene_scene3__c6H1M1JI78]: hasVariant(
                          variants,
                          "scene",
                          "scene3"
                        )
                      })}
                      role={"img"}
                    />
                  ) : null}
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : null}
      {(hasVariant(variants, "scene", "scene4") ? true : false) ? (
        <div
          data-plasmic-name={"uiIllustration4"}
          data-plasmic-override={overrides.uiIllustration4}
          className={classNames(projectcss.all, sty.uiIllustration4, {
            [sty.uiIllustration4__scene_scene4]: hasVariant(
              variants,
              "scene",
              "scene4"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"back2"}
            data-plasmic-override={overrides.back2}
            hasGap={true}
            className={classNames(projectcss.all, sty.back2)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qoRpv)}>
              <div className={classNames(projectcss.all, sty.freeBox__wgcG)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___9TW9W)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zRmGo
                      )}
                    >
                      {"Coffee at Gio’s"}
                    </div>
                  ) : null}
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jXsug
                      )}
                    >
                      {"43 Points"}
                    </div>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__woEa2)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hXbvE
                    )}
                  >
                    {"$25.48"}
                  </div>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__x9EZi)}>
              <div className={classNames(projectcss.all, sty.freeBox__rgaPt)}>
                <div className={classNames(projectcss.all, sty.freeBox___0W33)}>
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qyPFn
                      )}
                    >
                      {"Coffee at Gio’s"}
                    </div>
                  ) : null}
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dDxLs
                      )}
                    >
                      {"43 Points"}
                    </div>
                  ) : null}
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___93BpV)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zy6Dx
                    )}
                  >
                    {"$5.47"}
                  </div>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___1NMFo)}>
              <div className={classNames(projectcss.all, sty.freeBox__rNc7I)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__qjxdd, {
                    [sty.freeBox__scene_scene4__qjxddc6Tiq]: hasVariant(
                      variants,
                      "scene",
                      "scene4"
                    )
                  })}
                >
                  {(hasVariant(variants, "scene", "scene4") ? true : false) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h8247,
                        {
                          [sty.text__scene_scene4__h8247C6Tiq]: hasVariant(
                            variants,
                            "scene",
                            "scene4"
                          )
                        }
                      )}
                    >
                      {"Coffee at Gio’s"}
                    </div>
                  ) : null}
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dm3Ew
                      )}
                    >
                      {"43 Points"}
                    </div>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__ncIDf)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aRu3G
                    )}
                  >
                    {"$148.99"}
                  </div>
                </div>
              </div>
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"front4"}
            data-plasmic-override={overrides.front4}
            hasGap={true}
            className={classNames(projectcss.all, sty.front4)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"balance4"}
              data-plasmic-override={overrides.balance4}
              hasGap={true}
              className={classNames(projectcss.all, sty.balance4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yJRk
                )}
              >
                {"Activity"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iy6Zt
                )}
              >
                {"Today"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"notif"}
              data-plasmic-override={overrides.notif}
              hasGap={true}
              className={classNames(projectcss.all, sty.notif)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7NDyC
                )}
              >
                {"Just now"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uPAbF
                )}
              >
                {"Your card was charged $25.48 at Safeway 🛒"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"notif2"}
              data-plasmic-override={overrides.notif2}
              hasGap={true}
              className={classNames(projectcss.all, sty.notif2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xibJ
                )}
              >
                {"45 minutes ago"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bLPf
                )}
              >
                {"Your card was charged $5.47 at Starbucks ☕️"}
              </div>
            </p.Stack>
          </p.Stack>
        </div>
      ) : null}
      {(hasVariant(variants, "scene", "scene5") ? true : false) ? (
        <div
          data-plasmic-name={"uiIllustrationPaymentMobile"}
          data-plasmic-override={overrides.uiIllustrationPaymentMobile}
          className={classNames(
            projectcss.all,
            sty.uiIllustrationPaymentMobile,
            {
              [sty.uiIllustrationPaymentMobile__scene_scene5]: hasVariant(
                variants,
                "scene",
                "scene5"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3596"}
            data-plasmic-override={overrides.frame3596}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3596)}
          >
            <div
              data-plasmic-name={"rowLabelBackground"}
              data-plasmic-override={overrides.rowLabelBackground}
              className={classNames(projectcss.all, sty.rowLabelBackground)}
            >
              <div
                data-plasmic-name={"content6"}
                data-plasmic-override={overrides.content6}
                className={classNames(projectcss.all, sty.content6)}
              >
                <div
                  data-plasmic-name={"text6"}
                  data-plasmic-override={overrides.text6}
                  className={classNames(projectcss.all, sty.text6)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lnEAo
                    )}
                  >
                    {"Breakfast"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c05N
                    )}
                  >
                    {"2 items"}
                  </div>
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"rectangle6797"}
              data-plasmic-override={overrides.rectangle6797}
              className={classNames(projectcss.all, sty.rectangle6797)}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vsNhp)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mzn1E)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__moZzq
                  )}
                >
                  {"Total"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tMfgu
                  )}
                >
                  {"$12.94"}
                </div>
              </p.Stack>

              <div
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames(projectcss.all, sty.button3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mzIp2
                  )}
                >
                  {"Pay"}
                </div>
              </div>
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"applepayui1"}
            data-plasmic-override={overrides.applepayui1}
            className={classNames(projectcss.all, sty.applepayui1)}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "uiIllustration",
    "frame3606",
    "name",
    "redLogoAsset1",
    "layer2",
    "carNumber",
    "name2",
    "front",
    "balance",
    "photo",
    "wrapper",
    "button",
    "uiIllustration2",
    "back",
    "transaction",
    "content",
    "title",
    "caption",
    "right",
    "transaction2",
    "content2",
    "text2",
    "title2",
    "caption2",
    "right2",
    "transaction3",
    "content3",
    "text3",
    "title3",
    "caption3",
    "right3",
    "front2",
    "balance2",
    "photo2",
    "wrapper2",
    "button2",
    "uiIllustration3",
    "frame3607",
    "carNumber2",
    "front3",
    "balance3",
    "off",
    "bg",
    "uiIllustration4",
    "back2",
    "front4",
    "balance4",
    "notif",
    "notif2",
    "uiIllustrationPaymentMobile",
    "frame3596",
    "rowLabelBackground",
    "content6",
    "text6",
    "rectangle6797",
    "button3",
    "applepayui1"
  ],
  uiIllustration: [
    "uiIllustration",
    "frame3606",
    "name",
    "redLogoAsset1",
    "layer2",
    "carNumber",
    "name2",
    "front",
    "balance",
    "photo",
    "wrapper",
    "button"
  ],
  frame3606: [
    "frame3606",
    "name",
    "redLogoAsset1",
    "layer2",
    "carNumber",
    "name2"
  ],
  name: ["name"],
  redLogoAsset1: ["redLogoAsset1", "layer2"],
  layer2: ["layer2"],
  carNumber: ["carNumber", "name2"],
  name2: ["name2"],
  front: ["front", "balance", "photo", "wrapper", "button"],
  balance: ["balance"],
  photo: ["photo"],
  wrapper: ["wrapper", "button"],
  button: ["button"],
  uiIllustration2: [
    "uiIllustration2",
    "back",
    "transaction",
    "content",
    "title",
    "caption",
    "right",
    "transaction2",
    "content2",
    "text2",
    "title2",
    "caption2",
    "right2",
    "transaction3",
    "content3",
    "text3",
    "title3",
    "caption3",
    "right3",
    "front2",
    "balance2",
    "photo2",
    "wrapper2",
    "button2"
  ],
  back: [
    "back",
    "transaction",
    "content",
    "title",
    "caption",
    "right",
    "transaction2",
    "content2",
    "text2",
    "title2",
    "caption2",
    "right2",
    "transaction3",
    "content3",
    "text3",
    "title3",
    "caption3",
    "right3"
  ],
  transaction: ["transaction", "content", "title", "caption", "right"],
  content: ["content", "title", "caption", "right"],
  title: ["title"],
  caption: ["caption"],
  right: ["right"],
  transaction2: [
    "transaction2",
    "content2",
    "text2",
    "title2",
    "caption2",
    "right2"
  ],
  content2: ["content2", "text2", "title2", "caption2", "right2"],
  text2: ["text2", "title2", "caption2"],
  title2: ["title2"],
  caption2: ["caption2"],
  right2: ["right2"],
  transaction3: [
    "transaction3",
    "content3",
    "text3",
    "title3",
    "caption3",
    "right3"
  ],
  content3: ["content3", "text3", "title3", "caption3", "right3"],
  text3: ["text3", "title3", "caption3"],
  title3: ["title3"],
  caption3: ["caption3"],
  right3: ["right3"],
  front2: ["front2", "balance2", "photo2", "wrapper2", "button2"],
  balance2: ["balance2"],
  photo2: ["photo2"],
  wrapper2: ["wrapper2", "button2"],
  button2: ["button2"],
  uiIllustration3: [
    "uiIllustration3",
    "frame3607",
    "carNumber2",
    "front3",
    "balance3",
    "off",
    "bg"
  ],
  frame3607: ["frame3607", "carNumber2"],
  carNumber2: ["carNumber2"],
  front3: ["front3", "balance3", "off", "bg"],
  balance3: ["balance3"],
  off: ["off", "bg"],
  bg: ["bg"],
  uiIllustration4: [
    "uiIllustration4",
    "back2",
    "front4",
    "balance4",
    "notif",
    "notif2"
  ],
  back2: ["back2"],
  front4: ["front4", "balance4", "notif", "notif2"],
  balance4: ["balance4"],
  notif: ["notif"],
  notif2: ["notif2"],
  uiIllustrationPaymentMobile: [
    "uiIllustrationPaymentMobile",
    "frame3596",
    "rowLabelBackground",
    "content6",
    "text6",
    "rectangle6797",
    "button3",
    "applepayui1"
  ],
  frame3596: [
    "frame3596",
    "rowLabelBackground",
    "content6",
    "text6",
    "rectangle6797",
    "button3"
  ],
  rowLabelBackground: ["rowLabelBackground", "content6", "text6"],
  content6: ["content6", "text6"],
  text6: ["text6"],
  rectangle6797: ["rectangle6797"],
  button3: ["button3"],
  applepayui1: ["applepayui1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  uiIllustration: "div";
  frame3606: "div";
  name: "div";
  redLogoAsset1: "div";
  layer2: "div";
  carNumber: "div";
  name2: "div";
  front: "div";
  balance: "div";
  photo: "div";
  wrapper: "div";
  button: "div";
  uiIllustration2: "div";
  back: "div";
  transaction: "div";
  content: "div";
  title: "div";
  caption: "div";
  right: "div";
  transaction2: "div";
  content2: "div";
  text2: "div";
  title2: "div";
  caption2: "div";
  right2: "div";
  transaction3: "div";
  content3: "div";
  text3: "div";
  title3: "div";
  caption3: "div";
  right3: "div";
  front2: "div";
  balance2: "div";
  photo2: "div";
  wrapper2: "div";
  button2: "div";
  uiIllustration3: "div";
  frame3607: "div";
  carNumber2: "div";
  front3: "div";
  balance3: "div";
  off: "div";
  bg: "div";
  uiIllustration4: "div";
  back2: "div";
  front4: "div";
  balance4: "div";
  notif: "div";
  notif2: "div";
  uiIllustrationPaymentMobile: "div";
  frame3596: "div";
  rowLabelBackground: "div";
  content6: "div";
  text6: "div";
  rectangle6797: "div";
  button3: "div";
  applepayui1: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFauxUi__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFauxUi__VariantsArgs;
    args?: PlasmicFauxUi__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFauxUi__Fetches;
  } & Omit<PlasmicFauxUi__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFauxUi__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFauxUi__ArgProps,
      internalVariantPropNames: PlasmicFauxUi__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFauxUi__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFauxUi";
  } else {
    func.displayName = `PlasmicFauxUi.${nodeName}`;
  }
  return func;
}

export const PlasmicFauxUi = Object.assign(
  // Top-level PlasmicFauxUi renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    uiIllustration: makeNodeComponent("uiIllustration"),
    frame3606: makeNodeComponent("frame3606"),
    _name: makeNodeComponent("name"),
    redLogoAsset1: makeNodeComponent("redLogoAsset1"),
    layer2: makeNodeComponent("layer2"),
    carNumber: makeNodeComponent("carNumber"),
    name2: makeNodeComponent("name2"),
    front: makeNodeComponent("front"),
    balance: makeNodeComponent("balance"),
    photo: makeNodeComponent("photo"),
    wrapper: makeNodeComponent("wrapper"),
    button: makeNodeComponent("button"),
    uiIllustration2: makeNodeComponent("uiIllustration2"),
    back: makeNodeComponent("back"),
    transaction: makeNodeComponent("transaction"),
    content: makeNodeComponent("content"),
    title: makeNodeComponent("title"),
    caption: makeNodeComponent("caption"),
    right: makeNodeComponent("right"),
    transaction2: makeNodeComponent("transaction2"),
    content2: makeNodeComponent("content2"),
    text2: makeNodeComponent("text2"),
    title2: makeNodeComponent("title2"),
    caption2: makeNodeComponent("caption2"),
    right2: makeNodeComponent("right2"),
    transaction3: makeNodeComponent("transaction3"),
    content3: makeNodeComponent("content3"),
    text3: makeNodeComponent("text3"),
    title3: makeNodeComponent("title3"),
    caption3: makeNodeComponent("caption3"),
    right3: makeNodeComponent("right3"),
    front2: makeNodeComponent("front2"),
    balance2: makeNodeComponent("balance2"),
    photo2: makeNodeComponent("photo2"),
    wrapper2: makeNodeComponent("wrapper2"),
    button2: makeNodeComponent("button2"),
    uiIllustration3: makeNodeComponent("uiIllustration3"),
    frame3607: makeNodeComponent("frame3607"),
    carNumber2: makeNodeComponent("carNumber2"),
    front3: makeNodeComponent("front3"),
    balance3: makeNodeComponent("balance3"),
    off: makeNodeComponent("off"),
    bg: makeNodeComponent("bg"),
    uiIllustration4: makeNodeComponent("uiIllustration4"),
    back2: makeNodeComponent("back2"),
    front4: makeNodeComponent("front4"),
    balance4: makeNodeComponent("balance4"),
    notif: makeNodeComponent("notif"),
    notif2: makeNodeComponent("notif2"),
    uiIllustrationPaymentMobile: makeNodeComponent(
      "uiIllustrationPaymentMobile"
    ),
    frame3596: makeNodeComponent("frame3596"),
    rowLabelBackground: makeNodeComponent("rowLabelBackground"),
    content6: makeNodeComponent("content6"),
    text6: makeNodeComponent("text6"),
    rectangle6797: makeNodeComponent("rectangle6797"),
    button3: makeNodeComponent("button3"),
    applepayui1: makeNodeComponent("applepayui1"),

    // Metadata about props expected for PlasmicFauxUi
    internalVariantProps: PlasmicFauxUi__VariantProps,
    internalArgProps: PlasmicFauxUi__ArgProps
  }
);

export default PlasmicFauxUi;
/* prettier-ignore-end */
