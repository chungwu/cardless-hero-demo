// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: 2N7y0bNNIt8J
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicFauxUiTextwrapper.module.css"; // plasmic-import: 2N7y0bNNIt8J/css

export type PlasmicFauxUiTextwrapper__VariantMembers = {
  caption: "caption";
};

export type PlasmicFauxUiTextwrapper__VariantsArgs = {
  caption?: SingleBooleanChoiceArg<"caption">;
};

type VariantPropType = keyof PlasmicFauxUiTextwrapper__VariantsArgs;
export const PlasmicFauxUiTextwrapper__VariantProps =
  new Array<VariantPropType>("caption");

export type PlasmicFauxUiTextwrapper__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFauxUiTextwrapper__ArgsType;
export const PlasmicFauxUiTextwrapper__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicFauxUiTextwrapper__OverridesType = {
  root?: p.Flex<"div">;
  copy2?: p.Flex<"div">;
  heading11?: p.Flex<"div">;
};

export interface DefaultFauxUiTextwrapperProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  caption?: SingleBooleanChoiceArg<"caption">;
  className?: string;
}

function PlasmicFauxUiTextwrapper__RenderFunc(props: {
  variants: PlasmicFauxUiTextwrapper__VariantsArgs;
  args: PlasmicFauxUiTextwrapper__ArgsType;
  overrides: PlasmicFauxUiTextwrapper__OverridesType;
  dataFetches?: PlasmicFauxUiTextwrapper__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__caption]: hasVariant(variants, "caption", "caption")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"copy2"}
        data-plasmic-override={overrides.copy2}
        hasGap={true}
        className={classNames(
          projectcss.all,
          sty.copy2,
          "featureTextArea" as const,
          { [sty.copy2__caption]: hasVariant(variants, "caption", "caption") }
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"heading11"}
          data-plasmic-override={overrides.heading11}
          hasGap={true}
          className={classNames(projectcss.all, sty.heading11, {
            [sty.heading11__caption]: hasVariant(variants, "caption", "caption")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "No need to wait",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildren__caption]: hasVariant(
                variants,
                "caption",
                "caption"
              )
            })
          })}

          {p.renderPlasmicSlot({
            defaultContents:
              "We issue virtual cards immediately, letting you tap to pay and shop online right away",
            value: args.slot,
            className: classNames(sty.slotTargetSlot, {
              [sty.slotTargetSlot__caption]: hasVariant(
                variants,
                "caption",
                "caption"
              )
            })
          })}
        </p.Stack>

        {(
          hasVariant(variants, "caption", "caption")
            ? true
            : hasVariant(globalVariants, "screen", "laptop")
            ? true
            : false
        )
          ? p.renderPlasmicSlot({
              defaultContents:
                "And weâ€™ll automatically send you a physical card for free",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2, {
                [sty.slotTargetSlot2__caption]: hasVariant(
                  variants,
                  "caption",
                  "caption"
                )
              })
            })
          : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "copy2", "heading11"],
  copy2: ["copy2", "heading11"],
  heading11: ["heading11"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  copy2: "div";
  heading11: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFauxUiTextwrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFauxUiTextwrapper__VariantsArgs;
    args?: PlasmicFauxUiTextwrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFauxUiTextwrapper__Fetches;
  } & Omit<PlasmicFauxUiTextwrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFauxUiTextwrapper__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFauxUiTextwrapper__ArgProps,
      internalVariantPropNames: PlasmicFauxUiTextwrapper__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFauxUiTextwrapper__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFauxUiTextwrapper";
  } else {
    func.displayName = `PlasmicFauxUiTextwrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicFauxUiTextwrapper = Object.assign(
  // Top-level PlasmicFauxUiTextwrapper renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copy2: makeNodeComponent("copy2"),
    heading11: makeNodeComponent("heading11"),

    // Metadata about props expected for PlasmicFauxUiTextwrapper
    internalVariantProps: PlasmicFauxUiTextwrapper__VariantProps,
    internalArgProps: PlasmicFauxUiTextwrapper__ArgProps
  }
);

export default PlasmicFauxUiTextwrapper;
/* prettier-ignore-end */
