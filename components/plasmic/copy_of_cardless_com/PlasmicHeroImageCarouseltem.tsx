// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5bwAVSS7yxRyYYekzZSF6R
// Component: MMV2NaMzNI6o
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbUUiKYc55Zpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bUUiKYc55Zpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_cardless_com.module.css"; // plasmic-import: 5bwAVSS7yxRyYYekzZSF6R/projectcss
import * as sty from "./PlasmicHeroImageCarouseltem.module.css"; // plasmic-import: MMV2NaMzNI6o/css

export type PlasmicHeroImageCarouseltem__VariantMembers = {};

export type PlasmicHeroImageCarouseltem__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeroImageCarouseltem__VariantsArgs;
export const PlasmicHeroImageCarouseltem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHeroImageCarouseltem__ArgsType = {
  title?: React.ReactNode;
  body?: React.ReactNode;
  leftImage?: React.ReactNode;
  rightImage?: React.ReactNode;
  centerImage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeroImageCarouseltem__ArgsType;
export const PlasmicHeroImageCarouseltem__ArgProps = new Array<ArgPropType>(
  "title",
  "body",
  "leftImage",
  "rightImage",
  "centerImage"
);

export type PlasmicHeroImageCarouseltem__OverridesType = {
  root?: p.Flex<"div">;
  left?: p.Flex<"div">;
  leftOverlay?: p.Flex<"div">;
  _1440Fill?: p.Flex<"div">;
  center?: p.Flex<"div">;
  right?: p.Flex<"div">;
  rightOverlay?: p.Flex<"div">;
  _1440Fill2?: p.Flex<"div">;
};

export interface DefaultHeroImageCarouseltemProps {
  title?: React.ReactNode;
  body?: React.ReactNode;
  leftImage?: React.ReactNode;
  rightImage?: React.ReactNode;
  centerImage?: React.ReactNode;
  className?: string;
}

function PlasmicHeroImageCarouseltem__RenderFunc(props: {
  variants: PlasmicHeroImageCarouseltem__VariantsArgs;
  args: PlasmicHeroImageCarouseltem__ArgsType;
  overrides: PlasmicHeroImageCarouseltem__OverridesType;
  dataFetches?: PlasmicHeroImageCarouseltem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUUiKYc55Zpu()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___2NzgM)}
      >
        {(hasVariant(globalVariants, "screen", "tablet") ? false : true) ? (
          <div
            data-plasmic-name={"left"}
            data-plasmic-override={overrides.left}
            className={classNames(projectcss.all, sty.left)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(projectcss.all, sty.freeBox__eld7)}
                />
              ),

              value: args.leftImage
            })}

            {(
              hasVariant(globalVariants, "screen", "laptopSmall") ? true : true
            ) ? (
              <div
                data-plasmic-name={"leftOverlay"}
                data-plasmic-override={overrides.leftOverlay}
                className={classNames(projectcss.all, sty.leftOverlay)}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "laptopSmall") ? true : true
            ) ? (
              <div
                data-plasmic-name={"_1440Fill"}
                data-plasmic-override={overrides._1440Fill}
                className={classNames(projectcss.all, sty._1440Fill)}
              />
            ) : null}
          </div>
        ) : null}

        <div
          data-plasmic-name={"center"}
          data-plasmic-override={overrides.center}
          className={classNames(projectcss.all, sty.center)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div className={classNames(projectcss.all, sty.freeBox__tnQf)} />
            ),

            value: args.centerImage
          })}
        </div>

        {(hasVariant(globalVariants, "screen", "tablet") ? false : true) ? (
          <div
            data-plasmic-name={"right"}
            data-plasmic-override={overrides.right}
            className={classNames(projectcss.all, sty.right)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(projectcss.all, sty.freeBox__i41Si)}
                />
              ),

              value: args.rightImage
            })}

            {(
              hasVariant(globalVariants, "screen", "laptopSmall") ? true : true
            ) ? (
              <div
                data-plasmic-name={"rightOverlay"}
                data-plasmic-override={overrides.rightOverlay}
                className={classNames(projectcss.all, sty.rightOverlay)}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "laptopSmall") ? true : true
            ) ? (
              <div
                data-plasmic-name={"_1440Fill2"}
                data-plasmic-override={overrides._1440Fill2}
                className={classNames(projectcss.all, sty._1440Fill2)}
              />
            ) : null}
          </div>
        ) : null}
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__oJmWt)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__a8Ld2)}>
          {p.renderPlasmicSlot({
            defaultContents: "Retail",
            value: args.title,
            className: classNames(sty.slotTargetTitle)
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__eUzit)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "Leverage our generous rewards programs to reinforce the value of an in-store shopping experience",
            value: args.body,
            className: classNames(sty.slotTargetBody)
          })}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "left",
    "leftOverlay",
    "_1440Fill",
    "center",
    "right",
    "rightOverlay",
    "_1440Fill2"
  ],
  left: ["left", "leftOverlay", "_1440Fill"],
  leftOverlay: ["leftOverlay"],
  _1440Fill: ["_1440Fill"],
  center: ["center"],
  right: ["right", "rightOverlay", "_1440Fill2"],
  rightOverlay: ["rightOverlay"],
  _1440Fill2: ["_1440Fill2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  left: "div";
  leftOverlay: "div";
  _1440Fill: "div";
  center: "div";
  right: "div";
  rightOverlay: "div";
  _1440Fill2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroImageCarouseltem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroImageCarouseltem__VariantsArgs;
    args?: PlasmicHeroImageCarouseltem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeroImageCarouseltem__Fetches;
  } & Omit<PlasmicHeroImageCarouseltem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroImageCarouseltem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroImageCarouseltem__ArgProps,
      internalVariantPropNames: PlasmicHeroImageCarouseltem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeroImageCarouseltem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroImageCarouseltem";
  } else {
    func.displayName = `PlasmicHeroImageCarouseltem.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroImageCarouseltem = Object.assign(
  // Top-level PlasmicHeroImageCarouseltem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    left: makeNodeComponent("left"),
    leftOverlay: makeNodeComponent("leftOverlay"),
    _1440Fill: makeNodeComponent("_1440Fill"),
    center: makeNodeComponent("center"),
    right: makeNodeComponent("right"),
    rightOverlay: makeNodeComponent("rightOverlay"),
    _1440Fill2: makeNodeComponent("_1440Fill2"),

    // Metadata about props expected for PlasmicHeroImageCarouseltem
    internalVariantProps: PlasmicHeroImageCarouseltem__VariantProps,
    internalArgProps: PlasmicHeroImageCarouseltem__ArgProps
  }
);

export default PlasmicHeroImageCarouseltem;
/* prettier-ignore-end */
